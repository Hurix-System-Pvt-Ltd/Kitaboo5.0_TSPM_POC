package com.hurix.reader.kitaboosdkrenderer;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.Dialog;
import android.app.Fragment;
import android.app.FragmentTransaction;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.PointF;
import android.graphics.PorterDuff;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.StrictMode;
import android.provider.Settings;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.text.TextUtils;
import android.util.Base64;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.Pair;
import android.view.Display;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.animation.AccelerateDecelerateInterpolator;
import android.view.animation.AccelerateInterpolator;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.PopupWindow;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.TabHost;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SwitchCompat;
import androidx.core.graphics.drawable.RoundedBitmapDrawable;
import androidx.core.graphics.drawable.RoundedBitmapDrawableFactory;
import androidx.fragment.app.DialogFragment;
import androidx.fragment.app.FragmentManager;
import androidx.print.PrintHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.snackbar.Snackbar;
import com.google.android.youtube.player.YouTubeInitializationResult;
import com.google.android.youtube.player.YouTubeStandalonePlayer;
import com.hurix.Analytics.AnalyticsManager;
import com.hurix.Analytics.EventName;
import com.hurix.Analytics.KitabooAnalytics;
import com.hurix.bookreader.encryption.ConversionUtils;
import com.hurix.bookreader.encryption.EncryptionManager;
import com.hurix.bookreader.helper.InlineVideoHelper;
import com.hurix.bookreader.protractor.AddProtractorEventListener;
import com.hurix.bookreader.views.floatinghtmlview.FloatingHTMLViewService;
import com.hurix.bookreader.views.link.GlossaryView;
import com.hurix.bookreader.views.link.InlineVideoPlayer;
import com.hurix.bookreader.views.link.LinkAudioView;
import com.hurix.bookreader.views.link.LinkDropDownViewer;
import com.hurix.bookreader.views.link.LinkEditFIBView;
import com.hurix.bookreader.views.link.LinkSlideShowActivity;
import com.hurix.bookreader.views.link.LinkVideoPlayer;
import com.hurix.bookreader.views.link.LinkVideoView;
import com.hurix.bookreader.views.link.LinkView;
import com.hurix.bookreader.views.link.LinkWebViewPlayer;
import com.hurix.bookreader.views.link.MultiLinkPopup;
import com.hurix.bookreader.views.link.ScormActivity;
import com.hurix.bookreader.views.link.StandaloneInstruction;
import com.hurix.bookreader.views.link.Webplayer;
import com.hurix.bookreader.views.link.youtube.YoutubeCustomView;
import com.hurix.commons.Constants.Constants;
import com.hurix.commons.Constants.EBookType;
import com.hurix.commons.Constants.PlayerUIConstants;
import com.hurix.commons.Constants.SDKPreferences;
import com.hurix.commons.KitabooSDKModel;
import com.hurix.commons.datamodel.AudioSyncWordInfo;
import com.hurix.commons.datamodel.IBook;
import com.hurix.commons.datamodel.IPage;
import com.hurix.commons.datamodel.KitabooFixedBook;
import com.hurix.commons.datamodel.LinkVO;
import com.hurix.commons.datamodel.PDFPage;
import com.hurix.commons.datamodel.TableOfResourceVo;
import com.hurix.commons.datamodel.UserChapterVO;
import com.hurix.commons.datamodel.UserPageVO;
import com.hurix.commons.iconify.Typefaces;
import com.hurix.commons.listener.OnDialogOkActionListner;
import com.hurix.commons.notifier.GlobalDataManager;
import com.hurix.commons.renderClient.OnPlayerEventsListener;
import com.hurix.commons.renderClient.Renderer;
import com.hurix.commons.renderClient.action.FONT_STYLE;
import com.hurix.commons.renderClient.bus.AssetType;
import com.hurix.commons.renderClient.bus.AssetTypeForReview;
import com.hurix.commons.sdkDatamodel.SDKManager;
import com.hurix.commons.utils.AlphanumComparator;
import com.hurix.commons.utils.DialogUtils;
import com.hurix.customui.Standard.TableOfCCVo;
import com.hurix.customui.Standard.TableOfELPSVo;
import com.hurix.customui.Standard.TableOfExternalResourcesVo;
import com.hurix.customui.Standard.TableOfTEKSVo;
import com.hurix.customui.actionbar.KitabooActionItemView;
import com.hurix.customui.actionbar.KitabooActionbarBuilder;
import com.hurix.customui.bookmark.BookMarkView;
import com.hurix.customui.datamodel.BookMarkVO;
import com.hurix.customui.datamodel.CommentsVO;
import com.hurix.customui.datamodel.HighlightVO;
import com.hurix.customui.datamodel.PentoolVO;
import com.hurix.customui.datamodel.SearchItemVO;
import com.hurix.customui.datamodel.UserClassVO;
import com.hurix.customui.iconify.ClearableEditText;
import com.hurix.customui.iconify.IconButton;
import com.hurix.customui.iconify.IconDrawable;
import com.hurix.customui.interfaces.AssesmentControlListener;
import com.hurix.customui.interfaces.AudioAutoPlayControlListener;
import com.hurix.customui.interfaces.BoomarkActionListner;
import com.hurix.customui.interfaces.FIBCallbackListener;
import com.hurix.customui.interfaces.IClass;
import com.hurix.customui.interfaces.IEpubSettingPanelListner;
import com.hurix.customui.interfaces.IScrollBarVisibilty;
import com.hurix.customui.interfaces.ISliderChangeListner;
import com.hurix.customui.interfaces.IStickyNoteShareSettingListener;
import com.hurix.customui.interfaces.OnMarkupIconClicked;
import com.hurix.customui.interfaces.PrintPageActionListner;
import com.hurix.customui.note.NoteView;
import com.hurix.customui.pagescrollseekbar.ParentPageScrollSeekbarView;
import com.hurix.customui.pentool.ColorPickerDialogDash;
import com.hurix.customui.pentool.ColorSizeDialogDash;
import com.hurix.customui.pentool.PentoolHelper;
import com.hurix.customui.playerTheme.ThemeUserSettingVo;
import com.hurix.customui.popup.HighlightActionItem;
import com.hurix.customui.popup.HighlightActionView;
import com.hurix.customui.printPage.PrintPageIconView;
import com.hurix.customui.readaloud.ColorSizeDialogDashReadAloud;
import com.hurix.customui.readaloud.ReadAloudHelper;
import com.hurix.customui.search.SearchDialog;
import com.hurix.customui.sharingSetting.UGCEnterpriseItemCommentsScreen;
import com.hurix.customui.textAnnotation.AddActivateTextAnnotationOnTouchListener;
import com.hurix.customui.textAnnotation.AddTextAnnotationEventListener;
import com.hurix.customui.textAnnotation.CustomFloatingActionButton;
import com.hurix.customui.textAnnotation.TextAlignment;
import com.hurix.customui.textAnnotation.TextAnnotationKeyboardHeightObserver;
import com.hurix.customui.textAnnotation.TextAnnotationKeyboardHeightProvider;
import com.hurix.customui.textAnnotation.TextAnnotationMenuAdapter;
import com.hurix.customui.textAnnotation.TextAnnotationRecyclerItemClick;
import com.hurix.customui.textAnnotation.TextAnnotationTextColorPickerDialog;
import com.hurix.customui.thumbnails.ThumbnailVO;
import com.hurix.customui.toc.TableOfContentVO;
import com.hurix.customui.toc.ThumbListVO;
import com.hurix.customui.toc.tob.OnTOBItemClick;
import com.hurix.customui.toc.tor.OnTORItemClick;
import com.hurix.customui.toc.tor.TORView;
import com.hurix.customui.views.KitabooSearchView;
import com.hurix.customui.views.PageDetailsSeekBarHint;
import com.hurix.customui.views.ScalableEditText;
import com.hurix.database.datamodels.ContentVO;
import com.hurix.database.dbmanager.SdkDatabaseManager;
import com.hurix.downloadbook.controller.UserController;
import com.hurix.epubreader.Parsers.AudioSyncDataAsynTask;
import com.hurix.epubreader.PrefActivity;
import com.hurix.epubreader.Utility.EpubConstants;
import com.hurix.epubreader.Utility.Utils;
import com.hurix.epubreader.database.DatabaseManager;
import com.hurix.epubreader.datamodel.BookVO;
import com.hurix.epubreader.fixedepubreader.Interfaces.AddFixedEpubStickyNoteCallback;
import com.hurix.epubreader.interfaces.IAudioEndListner;
import com.hurix.epubreader.interfaces.IAudioParseCallBack;
import com.hurix.epubreader.reflowableViewPager.TouchImageView;
import com.hurix.epubreader.views.ImageViewer;
import com.hurix.epubreader.views.LinkImagePopupView;
import com.hurix.htmlinteractivity.HtmlnterActivity;
import com.hurix.reader.kitaboosdkrenderer.Activities.WebViewActivity;
import com.hurix.reader.kitaboosdkrenderer.common.HelpVo;
import com.hurix.reader.kitaboosdkrenderer.constants.ServiceConstants;
import com.hurix.reader.kitaboosdkrenderer.customviews.AddStickcyNoteActionListeners;
import com.hurix.reader.kitaboosdkrenderer.customviews.AddUGCAcceptRejectListener;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomBookmarkActionHandler;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomBottomSettingDialogPanel;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomColorPickerDialogDash;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomColorPickerView;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomCompoundView;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomISharingSettingListner;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomKitabooActionbar;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomMobileBackEnabledActivity;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomMyDataFragment;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomMyDataTabDialogFragment;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomMyDataTabFragment;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomNoteView;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomResourceEnterpriseView;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomSearchAdapter;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomStickyNoteShareScreen;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomTOBView;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomTOCEnterpriseView;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomTOCEnterpriseViewEpub;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomTabThumbnailFragment;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomThumbnailsListner;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomTocListner;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomTocView;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomUGCEnterpriseItemSharingScreen;
import com.hurix.reader.kitaboosdkrenderer.customviews.CustomUGCSharingSettingsScreen;
import com.hurix.reader.kitaboosdkrenderer.customviews.FontSettingTab;
import com.hurix.reader.kitaboosdkrenderer.customviews.HexValidator;
import com.hurix.reader.kitaboosdkrenderer.customviews.KeyboardHeightObserver;
import com.hurix.reader.kitaboosdkrenderer.customviews.KeyboardHeightProvider;
import com.hurix.reader.kitaboosdkrenderer.customviews.ReaderSettingTab;
import com.hurix.reader.kitaboosdkrenderer.customviews.SeekBarFragment;
import com.hurix.reader.kitaboosdkrenderer.customviews.TOCBottomDialogFrag;
import com.hurix.reader.kitaboosdkrenderer.customviews.UGCDataAcceptRejectView;
import com.hurix.reader.kitaboosdkrenderer.customviews.toc_standards.CustomStandardEnterpriseView;
import com.hurix.reader.kitaboosdkrenderer.helpscreen.HelpScreenActivity;
import com.hurix.reader.kitaboosdkrenderer.interfaces.ReadAloudController;
import com.hurix.reader.kitaboosdkrenderer.listeners.OnDialogYesNoActionListner;
import com.hurix.reader.kitaboosdkrenderer.readaloud.ReadAloudDialog;
import com.hurix.reader.kitaboosdkrenderer.readaloud.ReadAloudOptionDialog;
import com.hurix.reader.kitaboosdkrenderer.sdkUtils.EpubSettingPanelAction;
import com.hurix.reader.kitaboosdkrenderer.sdkreadertheme.ReaderThemeController;
import com.hurix.reader.kitaboosdkrenderer.sdkreadertheme.themePojo.ReaderThemeSettingVo;
import com.hurix.reader.kitaboosdkrenderer.views.AboutUs;
import com.hurix.reader.kitaboosdkrenderer.views.CustomPlayerUIConstants;
import com.hurix.reader.kitaboosdkrenderer.views.StudentListFragment;
import com.hurix.reader.kitaboosdkrenderer.views.TeacherReviewFragment;
import com.hurix.renderer.utility.Utility;
import com.hurix.service.Interface.IServiceResponse;
import com.hurix.service.Interface.IServiceResponseListener;
import com.hurix.service.datamodel.UGCFetchResponseObject;
import com.hurix.service.exception.ServiceException;
import com.hurix.service.networkcall.SERVICETYPES;
import com.hurix.service.response.AcceptCollaborationDataResponse;
import com.hurix.service.response.ExternalSecureUrlResponse;
import com.hurix.service.response.FetchClientSecureUrlResponse;
import com.hurix.service.response.FetchCollectionCBMIdResponse;
import com.hurix.service.response.FetchVimeoUrlResponse;
import com.hurix.service.response.FetchbookClassesServieResponse;
import com.hurix.service.response.GetBookReadingResponse;
import com.hurix.service.response.RefreshUserTokenResponse;
import com.hurix.service.response.UserSetttingResponse;
import com.hurix.service.serviceconstant.ServiceConstant;
import com.squareup.picasso.Picasso;
import com.squareup.picasso.Target;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.jetbrains.annotations.NotNull;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.TimeZone;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import static android.view.View.INVISIBLE;
import static android.view.View.VISIBLE;
import static com.hurix.commons.Constants.Constants.REQUEST_ALERTWINDOW_HTMLWRAP;
import static com.hurix.commons.datamodel.LinkVO.LinkType.MULTIPLE_LINK;

//import com.hurix.epubreader.Utility.GlobalDataHolder;

/**
 * Created by lopamudra.mohanty on 11/7/2017.
 */

//NewApi


public class PlayerActivity extends AppCompatActivity implements OnPlayerEventsListener,
        CustomTOCEnterpriseView.TocItemClickListener,
        CustomTocListner, OnTOBItemClick, OnTORItemClick,
        KitabooActionbarBuilder.KitabooActionBarMenuClick, AddProtractorEventListener,
        SearchDialog.SearchListener, KitabooSearchView.SearchActionListener, CustomThumbnailsListner,
        ColorPickerDialogDash.OnColorSelectedListener,
        ColorSizeDialogDash.OnSizeChangedListener, EpubSettingPanelAction.AddEpubSettingPanelListener,
        IStickyNoteShareSettingListener, AdapterView.OnItemClickListener,
        CustomISharingSettingListner, AssesmentControlListener, AddFixedEpubStickyNoteCallback,
        OnDialogOkActionListner, IServiceResponseListener, OnMarkupIconClicked,
        DialogInterface.OnDismissListener, View.OnClickListener, IEpubSettingPanelListner,
        AddUGCAcceptRejectListener, AddStickcyNoteActionListeners, FIBCallbackListener,
        KeyboardHeightObserver, TextAnnotationKeyboardHeightObserver,
        TextAnnotationRecyclerItemClick, AddActivateTextAnnotationOnTouchListener,
        DeleteTextAnnotationDialog.AddTextAnnotationDeletePopupCallback, AddTextAnnotationEventListener,
        StudentListFragment.IStudentReviewActionsListner, AudioAutoPlayControlListener, ColorSizeDialogDashReadAloud.OnSizeChangedListener,
        ReadAloudController, ISliderChangeListner, ServiceCompletedListener, IScrollBarVisibilty, IAudioEndListner,BoomarkActionListner {

    private static final String MEDIA_PATH = "media_path";
    private static final String REFLOW_PRINT_ENABLE = "reflow_print";
    private static final String FIXEDEPUB_PRINT_PAGELIST = "fixed_epub_printlist";
    private static final String ISBN = "ISBN";
    private static final String BOOK_ID = "book_id";
    private static final String BOOK_VERSION = "version";
    public static final String BOOK_MODE = "booktype";
    public static final String READ_ALOUD_BOOK_ = "Auto Read Aloud";
    private static final String USER_ID = "UserID";
    private static final String TOKEN = "token";
    private static final String IS_BOOK_ENCRYPT = "isEncrypt";
    private static final String IS_MATHKEYBOARD_ENABLE = "mathkeyboardenable";
    private static final String IS_PROTRACTOR_ENABLE = "protractorenable";
    private final String EPUB_ENCR_TYPE = "encryptionType";
    private static final String ROLE_NAME = "Rolename";
    private static final String IS_CLASSACCOCIATED = "classAssociated";
    private final String TYPE_SHARED = "shared";
    private final String TYPE_INCREASE = "add";
    private final String TYPE_DECREASE = "deleted";
    private final String INSTRUCTION = "instruction";
    public static final int REQ_YOUTUBE_PLAYER = 3;
    private final String youtubeUrl = "https://www.youtube.com/watch?v=";
    private static final String USER_NAME = "cloudUserName";
    private static final String FIRST_NAME = "cloudFirstName";
    private static final String LAST_NAME = "cloudLastName";
    private static final String PROFILE_PIC = "cloudProfilePic";
    private static final String HELPSCREEN_TYPE = "HELPSCREEN_TYPE";
    private static final String READER = "Reader";
    private static final String REVIEW = "Review";

    /* HTML INTERACTIVITY*/
    private static final String HTMLINTERACTIVITY = "HTMLWRAP";


    private static final int ACTION_ID_HIGHLIGHT_GREEN = 1001;
    private static final int ACTION_ID_HIGHLIGHT_BLUE = 1002;
    private static final int ACTION_ID_HIGHLIGHT_PURPLE = 1005;
    private static final int ACTION_ID_HIGHLIGHT_ORANGE = 1006;
    private static final int ACTION_ID_HIGHLIGHT_RED = 1007;
    private static final int ACTION_ID_HIGHLIGHT_PINK = 1007;
    private static final int ACTION_ID_HIGHLIGHT_YELLOW = 1008;
    private static final int ACTION_ID_SEARCH = 1003;
    private static final int ACTION_ID_DELETE = 1004;
    private static final int ACTION_ID_NOTE = 1012;
    private static final int ACTION_ID_BOLD = 1009;
    private static final int ACTION_ID_ITALIC = 1010;
    private static final int ACTION_ID_UNDERLINE = 1011;
    private static final String SELECTION_RANGE_COLOR = "#ffb7b7";
    public static int ZOOM_INC = 1;
    public static int ZOOM_DEC = 2;
    private String mLastSearchedtext = "";
    private Renderer renderView;
    private String mHighlightedText;
    private long fbEventHighlightId;

    NoteView notepopup;
    HighlightActionView actionView;
    private HighlightVO mHighlight;
    private long bookId;
    private String bookVersion, bookMode, mAssetType;
    private long userID;
    private String token;
    private String isbn;
    private String protractorenable;
    private String mathkeyboardenable;
    private DialogFragment mDialog;
    private Dialog mDialogImagePopUp;
    private LinkImagePopupView mImagePopupView;
    private TouchImageView imageView;
    private Dialog dialog;
    private ArrayList<TableOfContentVO> mTocdata;
    private ArrayList<UserChapterVO> mTorData;
    private ArrayList<SearchItemVO> mSeachdata;
    private CustomKitabooActionbar topActionbar, bottomActionbar;
    private CustomTocView toc = null;
    private final EpubSettingPanelAction epubSettingPanelAction = null;
    private boolean isActionBarVisible = false;
    private boolean isThumbnailVisible = false, isPentoolColorStateCliced, isPentoolSizeCliced, isColorPickerClicked;
    private int mTopActionbarBackGroundColor, mTopActionBarItemColor, mPentoolToolbarBackgroundColor, mPentoolToolbarItemColor;
    private int mBottomActionBarBackGroundColor, mBottomActionBarItemColor;
    private EBookType mReaderType;
    private ArrayList<ThumbnailVO> mThumbnailColl;// use for Book/PDF
    private ArrayList<ThumbListVO> mThumbListColl;// use for EPUB_FIXED
    private HashMap<String, String> mThumbMapColl;
    private ArrayList<ThumbnailVO> gotopagecollection;
    private FrameLayout mPageThumbnailcontainer;
    private CustomTabThumbnailFragment tabThumbnailFragment = null;
    private SeekBarFragment seekBarFragment = null;
    private int currentviewpagerindex = 0, currentviewpagerindexl1 = 0, currentviewpagerindexl2 = 0;
    private String mthumbnailpath;
    private FragmentManager fragmentManager;
    private int pagecollsize = 0;
    private PentoolHelper penHelper;
    private ColorSizeDialogDash colorSize;
    private ReadAloudHelper readAloudHelper;
    KitabooActionItemView mPentoolColor, mPentoolSize, mPentoolEraser, mPentoolUndo, mPentoolDone, mPentoolClearAll, mEpubSettingPanel, mAnnotationDoneText, mPageModeIcon;
    private boolean mPentoolEraserClicked = true;
    private boolean mTeacherRviewEraserClicked = true, mTeacherRviewClearAllClicked = true;
    private final boolean isPenclicked = false;
    private ArrayList<IClass> arrayListforSharingSetting = null;
    private CustomUGCSharingSettingsScreen _ugcSharingSettingScreen;
    private UGCEnterpriseItemCommentsScreen _ugcEnterpriseItemCommentsScreen;
    private CustomUGCEnterpriseItemSharingScreen _ugcEnterpriseItemSharingScreen;
    private CustomStickyNoteShareScreen _stickyNoteShareDialog;
    private String accountType, userName, firstName, lastName, profilePic;
    private boolean IsClassAccociated, mIsSearchOpen;
    private HighlightVO highlightVo;
    private PageDetailsSeekBarHint seekBar;
    private ArrayList<ThumbnailVO> mPageDetailsSeekBarColl;
    private ArrayList<? extends IPage> mTotalPage;
    private TextView tvPageNumber, mTextChapterTitle;
    private TeacherReviewFragment mTeacherHolder;
    private String currentFoliId = "";
    private String currentFoliIdPrev = "";
    private final String torFoliId = "";
    private static boolean FLAG_IS_SUBMIT_CLICKED = false;
    private ServiceHandler mServicehandler;
    private IPage pageVo = null;
    private boolean clickOnSearchiconFromHighlightPopup;
    private CustomMyDataFragment mydata;
    boolean isMobile;
    private RelativeLayout mainview;
    private PopupWindow mAudioPopup, mInstructionPopup;
    private ImageViewer mImageViewer;
    private LinkAudioView mAudioManager;
    private final Boolean mIsLocalSessionEnable = false;
    private FetchClientSecureUrlResponse fetchClientSecureUrlResponse;
    private FetchVimeoUrlResponse fetchVimeoUrlResponse;
    private ExternalSecureUrlResponse externalSecureUrlResponse;
    private ServiceException serviceException;
    private LinkVO linkVO, linkVoReadAloud;
    private final long clikedTorResourceId = 0;
    private LinkVO.LinkType torType;
    private MultiLinkPopup mPopup;
    private IPage mCurrentPageData = null;
    private IPage mAudioPageData = null;
    private IPage mCurrentPageDataPrev = null;
    private LinkVideoView linkView;
    private InlineVideoPlayer inlineVideoPlayer;
    private LinkVideoView linkVideoView = null;
    private YoutubeCustomView youtubeCustomView;
    private ImageView mProfileImage;
    private KitabooActionItemView mClearAllImage;
    private boolean isPentoolBarOpen;
    private PopupWindow mPopupWindow;
    private HashMap<String, Integer> mHighlightColorCollection;
    CustomBookmarkActionHandler mBookmarkActionHandler;
    CustomMyDataTabDialogFragment tabMyDataFragment;
    private IPage[] mLastPage;
    private IPage mLastReflowPage;
    private String exturl = "";
    private Snackbar snackbar;
    private Dialog mProgressDialog;
    private PopupWindow popupWindow;
    private String mLastpageSync;
    private String mClassId;
    private KitabooSearchView mSearchview;
    private LinkVO torlink;
    private ThemeUserSettingVo themeUserSettingVo;
    private Typeface typeface;
    private CustomCompoundView mColorPopupButton;
    private CustomColorPickerView mColorPickerView;
    private LinearLayout mTabSearchLayout;
    private TextView mTabSearchIcon, mTabSearchCancelButton;
    private ClearableEditText mTabSearchEditText;
    private ListView mTabSearchList;
    private final ArrayList<SearchItemVO> mSearchArrayList = new ArrayList<>();
    private final ArrayList<SearchItemVO> mSearchArrayListPageWise = new ArrayList<>();
    private CustomSearchAdapter mSearchAdapter;
    private SearchAsyncTask mSearchAsync;
    private TOCBottomDialogFrag mBottomBookmarkFragment;
    private int mColorPicker;
    private int mPenSelectedColor;
    private int mPenSelectedSize;
    private SeekBar mSetFontSize;
    private SwitchCompat mNightSwitchCompat, mPageSwitchCompact;
    private LinearLayout mParentContainer;
    private CustomColorPickerDialogDash colorcalendar = null;
    private int[] colors;
    private ArrayList<BookMarkVO> mListOfCurrentBookmark;
    private ArrayList<Integer> mHighlightIdCollection;
    private UGCDataAcceptRejectView mMobileAcceptRejectView, mTabAcceptRejectView;
    private LinearLayout mSearchEmptyView;
    private CustomNoteView mStickyNotePopup;
    private boolean isEpubSettingPanelClicked;
    private PopupWindow mSignOutShowPopup;
    private Bitmap mBitmap;
    private String waterMarkText;
    private Intent htmlIntent;
    private LinkDropDownViewer mLinkDropDownViewer;
    private LinkEditFIBView mLinkEditFIBView;
    private androidx.fragment.app.FragmentTransaction mThumbnailFragmentTransaction;
    private KeyboardHeightProvider keyboardHeightProvider;
    private Dialog ugcShareSettingDialog;
    private ReaderThemeSettingVo readerThemeSettingVo;
    private CustomBottomSettingDialogPanel bottomSettingPanel;
    private boolean colorWithHash;
    private Point point;
    private TextAnnotationKeyboardHeightProvider textAnnotationKeyboardHeightProvider;
    private RecyclerView mTextAnnotationBottomBar;
    private LinearLayout mTextAnnotationParent;
    private int[] mTextAnnotationTextColors;
    private TextAnnotationTextColorPickerDialog textAnnotationColorPickerDialog;
    private TextAnnotationMenuAdapter textAnnotationMenuAdapter;
    private boolean mIsKeyboardOpen;
    private int[] mTxtAnnotationTextColors, mTextAnnotationBackgroundColors;
    private DeleteTextAnnotationDialog deleteTextAnnotationDialog;
    public static float MAX_ZOOM_SCALE = 3.0f;
    private boolean mIsElasticSearch = false;
    private String mSearchQuery = "";
    private RelativeLayout mSearchRightcontainer;
    private LinearLayout mElasticSearchPanel;
    private TextView mPrevIcon, mNextIcon, mOpenSearchListIcon, mElasticSearchCancelIcon;
    private LinearLayout mElasticSearchCancel;
    RelativeLayout mSearchTxtConatiner;
    private int mCurrentClickSearchIndex = 0;
    KitabooActionItemView mTeacherEraser, mTeacherUndo, mTeacherRedo, mTeacherPrevious, mTeacherNext, mTeacherReviewGreen, mTeacherReviewRed, mTeacherReviewDone, mTeacherReviewPage, mTeacherReviewFirstname, mTeacherClearAll;
    KitabooActionItemView mReadAloudIcon, mReadSpeed, mReadPause, mReadNext, mReadPrevoius, mReadClose, mPageZoomIcon, mPageZoomOutIcon, mZoomPercentageText, mlastIcon, mPrint, mthumbnailIcon, mSpeedInc, mSpeedDec;
    KitabooActionItemView mASYellowCol, mASRedCol, mASVioletCol, mASGreenCol, mASBlueCol, mAScolorPicker;
    private ImageView mTeacherReviewProfileImage;
    GradientDrawable drawable = new GradientDrawable();
    private boolean isPrevClicked, isNextCliked, isOnItemClicked;
    private UserPageVO mCurrentAnnotationpage;
    private IPage[] mcurrentPageData;
    //private JWTokenResponseVO jwTokenDetails;
    private IconButton mEqEditButton;
    private final ArrayList<IPage> mListOfLoadedPage = new ArrayList<>();
    private ArrayList<TableOfTEKSVo> mTEKSCOLL;
    private ArrayList<TableOfELPSVo> mELPSCOLL;
    private ArrayList<TableOfCCVo> mCCCOLL;
    private ArrayList<TableOfExternalResourcesVo> mExternalResourcesCOLL;
    private ArrayList<UserChapterVO> mInternalResourcesCOLL;
    private IBook bookVo;
    private final ArrayList<HelpVo> _collOfHelp_1 = new ArrayList<>();
    private ArrayList<HelpVo> _collOfHelp_2 = new ArrayList<>();
    private final ArrayList<HelpVo> _collOfHelpTeacher_1 = new ArrayList<>();
    private final ArrayList<HelpVo> _collOfHelpTeacher_2 = new ArrayList<>();
    private final float actionbartextSize = 22f;
    private final ReadAloudOptionDialog readAloudOptionDialog = null;
    private ReadAloudDialog mReadAloudDialog = null;
    private KitabooFixedBook.ReadAloudType readAloudType = null;
    private KitabooFixedBook.ReadAloudType currentreadAloudType = null;
    private ArrayList<LinkVO> readAloudMarkups = null;
    private Locale mLocale;
    private int notificationBarHeight = 0;

    ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
    /*Decides weather to play next audio automatically or not*/
    private final boolean playNextAudioAutomatically = true;

    /*Decides different audio can play or not while audio is playing*/
    private final boolean isNextAudioCanPlayWhileDifferentAudioPlaying = true;

    /*Decides audio bar UI design*/
    private final boolean audioSeekBarVisibility = false;
    private final boolean audioTimeVisibility = false;
    private final boolean audioDragIconVisibility = false;

    /* Decides the audio popup position */
    private final int audioPlayerPopupPosition = 0;
    private LinkVO mObjVO;
    private boolean autoplayReq;
    private boolean audioIsPause;
    private String lastReadAloudFolioID;
    private boolean isReadAloudRequired;
    private boolean isOrientationChanged;
    private String audioBookType = "";
    private boolean playNextAudio = true;
    String mStartdate, mExpireddate, mLogindate, mExpireddateTime;
    int Starttime, Expiredtime;
    private boolean orientantionChangeForReadAloud;
    private BookMarkView bookmarkView;
    private PrintPageIconView mPrintPageView;
    private Context mContext;
    private Spinner mZoomSpinner;
    private PopupWindow popupwindow_obj;
    private View view;
    private Button mZoomTxt_100, mZoomTxt_125, mZoomTxt_150, mZoomTxt_175, mZoomTxt_200;
    private boolean isAudioSyncPlaying;
    private long mCurrAudioSyncLinkID;
    private int mZoomText;
    private TextView mNextPage;
    private TextView mPrevPage;
    private Typeface customTypeFace;
    private String kitabooanalytic;
    private ParentPageScrollSeekbarView parentpageScrollSeekbarView;
    private final ArrayList<ParentPageScrollSeekbarView> parentpageScrollSeekbarViewArray = new ArrayList<>();
    ArrayList<HighlightVO> mUGClist = null;
    private LinearLayout ll_page_scroll_seekbar;
    private TextView verticalScrollPageno, verticalScrollChapterName, mVerticalScrollTimeLeft;
    private ArrayList<String> mCFIDArrayList = new ArrayList<>();

    private boolean isFromBackpressed;
    private RelativeLayout mTimeLeftLayout;
    private TextView mTimeLeftShowing;
    private boolean mIsScrolled;
    private int currentCFID;
    private String mHowMuchTimeLeft;
    private boolean isOrientataionChanged;
    private long bookIdForJumpToBook = 0;
    private String bookTitle;
    private boolean isJumpToBookInNative;
    private final int errorValue = 103;
    private final String bookModeIsLand = "landscape_one_page";
    private ScrollView mScrollView;

    private Handler schedularHandler;
    private Runnable schedularRunnable;
    private JSONObject lastPageFolio = new JSONObject();
    private Typeface mTORResourcesTypeface;
    private String mCfiOpenTimeStamp = "";

    private AlarmManager bookExpiryAlarmManager;
    private String bookExpiryDate = "";
    long CurrentTimeInMillis = 0;
    IntentFilter intentFilter = new IntentFilter();
    private int searchQuerylength = 0;
    private final LinkedList<LinkVO> currASList = new LinkedList<>();
    private final LinkedList<String> tempASFolioList = new LinkedList<>();
    private IPage currPageVo;
    private String nextAudioSyncChapterName;
    private String currAudioSyncChapter = "";
    private boolean onPauseCalled;
    private LinkVO mlinkAudioVO;
    private boolean onAudioOrientationChanged;
    private int currentPageNum;
    private LinkAudioView.AudioSpeed _speedType;
    private String reflowPrintEnable = "";
    private String fixedepubPrintPagelist = "";
    private ArrayList<String> printablePagelist;
    private HashMap sentenceAudioMap;

    private String tokenType = "";

    /**
     * Called once Activity initialize
     *
     * @param savedInstanceState
     */
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (savedInstanceState != null) {
            finish();
            return;
        }
        mContext = this;
        com.hurix.reader.kitaboosdkrenderer.notifier.GlobalDataManager.getInstance().setCurrentSelectedBookLaunch(true);
        mAssetType = getIntent().getStringExtra("asset_type");
        if (mAssetType.equalsIgnoreCase(HTMLINTERACTIVITY)) {

            openHtmlInteractivity();

        } else {

            com.hurix.commons.utils.Utils.setFontFilePath("kitabooread.ttf");
            if (getResources().getBoolean(R.bool.is_nanoq_greenland)) {
                setLocale(Utils.getSharedPreferenceStringValue(
                        PlayerActivity.this, Constants.SHELF_PREFS_NAME, Constants.DEFAULT_APP_LANGUAGE, ""));
            }

            /*if (getResources().getBoolean(R.bool.is_multi_lang_support)) {
                setLocale(utils.Utils.getSharedPreferenceStringValue(
                        PlayerActivity.this, Constants.SHELF_PREFS_NAME, Constants.DEFAULT_APP_LANGUAGE, ""));
            }*/
            // set book expiry

            //  setBookExpiry();

            getTORResourcesFont();
            setContentView(R.layout.activity_sdk_reader);
            mContext = getApplicationContext();
            // getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);
            //com.hurix.epubreader.Utility.Utils.setSecureWindowFlags(PlayerActivity.this);
            com.hurix.commons.notifier.GlobalDataManager.getInstance().addScrollBarListeners(this);
            com.hurix.commons.notifier.GlobalDataManager.getInstance().addAudioSyncListeners(this);
            ll_page_scroll_seekbar = findViewById(R.id.ll_scroll_toast_container);
            ll_page_scroll_seekbar.setVisibility(View.GONE);
            verticalScrollChapterName = findViewById(R.id.vertical_scroll_chapter);
            verticalScrollPageno = findViewById(R.id.vertical_scroll_pageno);
            mVerticalScrollTimeLeft = findViewById(R.id.vertical_scroll_timeLeft);
            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN);
            mainview = findViewById(R.id.activity_main);
            // clear FLAG_TRANSLUCENT_STATUS flag:
            getReaderTyface();
            readerThemeSettingVo = ReaderThemeController.getInstance(getApplicationContext()).getReaderThemeUserSettingVo();
            //mServicehandler = new ServiceHandler(this, KitabooSDKModel.getInstance().getClientID());
            com.hurix.reader.kitaboosdkrenderer.notifier.GlobalDataManager.getInstance().setCurrentSelectedBookLaunch(true);
            /*if (UserController.getInstance(this).getUserVO() != null && UserController.getInstance(this).getUserVO().getProfilePic() != null && UserController.getInstance(this).getUserVO().getProfilePic().isEmpty()) {
                UserController.getInstance(this).getUserVO().setProfilePic(getProfileString());
            }*/

            if ((this.getResources().getString(R.string.server_pointing).isEmpty())) {
                mServicehandler = new ServiceHandler(this, KitabooSDKModel.getInstance().getClientID());
            } else {
                mServicehandler = new ServiceHandler(this, KitabooSDKModel.getInstance().getClientID(),
                        this.getResources().getString(R.string.server_pointing));
            }
            mServicehandler.setServiceCompletedListener(PlayerActivity.this);
            //jwTokenDetails = DBController.getInstance(this).getManager().getJWTokenDetails();
            //configuring line separate between two pages
            SDKManager.getInstance().setTwoPageLineEnabled(getResources().getBoolean(R.bool.is_two_page_line_enabled));
            if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
                SDKManager.getInstance().setisHighlightEnable(true);
                SDKManager.getInstance().setIsBookmarkEnable(true);
            } else if (getResources().getBoolean(R.bool.is_FOSS)) {
                SDKManager.getInstance().setisHighlightEnable(false);
                SDKManager.getInstance().setIsBookmarkEnable(false);
            } else {
                SDKManager.getInstance().setisHighlightEnable(true);
                SDKManager.getInstance().setIsBookmarkEnable(true);
            }

            SDKManager.getInstance().setVirtualPageCountEnable(getResources().getBoolean(R.bool.is_virtual_page_count_enable));


            renderView = (Renderer) getSupportFragmentManager().findFragmentById(R.id.custom_layout);
            // mPageThumbnailcontainer = findViewById(R.id.thumbnailview);
            mElasticSearchPanel = findViewById(R.id.elastic_search_panel);
            mElasticSearchCancel = findViewById(R.id.elastic_search_cancel_container);
            mSearchTxtConatiner = findViewById(R.id.edittextholder);
            mSearchRightcontainer = findViewById(R.id.search_right_container);
            themeUserSettingVo = KitabooSDKModel.getInstance().getThemeUserSettingVo();
            renderView.create(this, getIntent().getStringExtra(MEDIA_PATH), MAX_ZOOM_SCALE);
            LayoutInflater inflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
            view = inflater.inflate(R.layout.zoom_level, null);
            //mTopActionBarItemColor = Color.parseColor(themeUserSettingVo.get_reader_icon_color());

            mZoomTxt_100 = view.findViewById(R.id.zoom_100);
            mZoomTxt_125 = view.findViewById(R.id.zoom_125);
            mZoomTxt_150 = view.findViewById(R.id.zoom_150);
            mZoomTxt_175 = view.findViewById(R.id.zoom_175);
            mZoomTxt_200 = view.findViewById(R.id.zoom_200);

            mZoomTxt_100.setOnClickListener(this);
            mZoomTxt_125.setOnClickListener(this);
            mZoomTxt_150.setOnClickListener(this);
            mZoomTxt_175.setOnClickListener(this);
            mZoomTxt_200.setOnClickListener(this);

            mNextPage = findViewById(R.id.txtnext);
            mPrevPage = findViewById(R.id.txtprevious);
            mNextPage.setOnClickListener(this);
            mPrevPage.setOnClickListener(this);
            mScrollView = findViewById(R.id.sv_search_layout_tab);
            mTabSearchLayout = findViewById(R.id.search_layout_tab);
            mTabSearchIcon = findViewById(R.id.search_icon_text);
            mPrevIcon = findViewById(R.id.search_prev_text);
            mNextIcon = findViewById(R.id.search_next_text);
            mOpenSearchListIcon = findViewById(R.id.search_maximize_text);
            mElasticSearchCancelIcon = findViewById(R.id.elastic_search_cancel);
            // mTabSearchEditText = (ClearableEditText) findViewById(R.id.editTxtSearchBox) ;
            mTabSearchCancelButton = findViewById(R.id.search_cancel_text);
            mTabSearchList = findViewById(R.id.searchListView);
            mTabSearchCancelButton.setTextColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getSearch().getCrossIconColor()));
            mTabSearchList.setBackgroundDrawable(Utils.getRectAngleDrawable(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getSearch().getPopupBackground()),
                    new float[]{2, 2, 2, 2, 2, 2, 2, 2}, 1, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getSearch().getPopupBorder())));

            mSearchEmptyView = findViewById(R.id.empty_view_search_container);
            setEmptyTextView();
            // tokenType = jwTokenDetails.getUserType();
            //mTopActionbarBackGroundColor = Color.parseColor("#f2f2f2");
            isMobile = Utility.isDeviceTypeMobile(this);
            // UserController.getInstance(this).getUserVO().registerProfilePicStatus(this);

            // com.hurix.commons.utils.Utils.setFontFilePath("kitabooread.ttf");
            setHighlightArray();
            mTextAnnotationBottomBar = findViewById(R.id.text_annotation_container);
            initProcessDilog();
            mTextAnnotationParent = findViewById(R.id.text_annotation_parent);
            textAnnotationKeyboardHeightProvider = new TextAnnotationKeyboardHeightProvider(PlayerActivity.this);
            textAnnotationKeyboardHeightProvider.setKeyboardHeightObserver(this);
            getBitmap();
            keyboardHeightProvider = new KeyboardHeightProvider(PlayerActivity.this);
            keyboardHeightProvider.setKeyboardHeightObserver(this);
            if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                Utils.insertSharedPrefernceStringValues(this, PrefActivity.SETTING_PANEL_PREFS_NAME, PrefActivity.KEY_FONT_SIZE, "xSmallFont");


            if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
                /*TODO Scrolling modes for Infobase client's Generic and User Specific account*/
                String key = KitabooSDKModel.getInstance().getUserID() + "_" + SDKManager.getInstance().getGetLocalBookData().getBookID()
                        + "_" + PrefActivity.KEY_SCROLL_MODE;
                Utils.insertSharedPrefernceStringValues(this, PrefActivity.SETTING_PANEL_PREF_NAME, key, "VERTICAL");

                /*TODO Day/Night Mode for Infobase Client Generic and User Specific account*/
                String keyDayMode = KitabooSDKModel.getInstance().getUserID() + "_" + SDKManager.getInstance().getGetLocalBookData().getBookID()
                        + "_" + PrefActivity.KEY_DAY_NIGHT_MODE;
                Utils.insertSharedPrefernceStringValues(this, PrefActivity.SETTING_PANEL_PREF_NAME, keyDayMode, "Day");
            }

            mTopActionbarBackGroundColor = Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getToolbar().getTop().getBackground());
            mTopActionBarItemColor = Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getToolbar().getTop().getIconsColor());
            mBottomActionBarBackGroundColor = Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getToolbar().getSideBottom().getBackground());
            mBottomActionBarItemColor = Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getToolbar().getSideBottom().getIconsColor());
            mPentoolToolbarItemColor = Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getToolbar().getTop().getNavigationArrowColor());
            mPentoolToolbarBackgroundColor = Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getPentool().getToolbar().getBackground());

            SDKManager.getInstance().setActivateTextAnnotationCallback(this);
            setTextAnnotationTextColorCollection();
            setTextAnnotationBackgroundColorCollection();
            SDKManager.getInstance().setBookmarkIconColor(readerThemeSettingVo.getReader().getDayMode().getBookmark().getSelectedIconColor());
            SDKManager.getInstance().setDefaultBookmarkIconColor(readerThemeSettingVo.getReader().getDayMode().getBookmark().getIconColor());
            SDKManager.getInstance().setProtractorEnable(false);
            mEqEditButton = findViewById(R.id.btnKeyboard);
            mEqEditButton.setOnClickListener(this);

            setTypeface();
            //SDKManager.getInstance().setPageScrollFeatureOn(getResources().getBoolean(R.bool.make_vertical_scroll_feature_up));
            SDKManager.getInstance().setEpubEncryptionMode(getResources().getBoolean(R.bool.isEpubBookV1Encrypted));

            mTimeLeftLayout = findViewById(R.id.time_left_layout);
            mTimeLeftShowing = findViewById(R.id.time_left_textView);

            SDKManager.getInstance().setIsStickyNoteDoublePageMoveEnable(true);
            statusBarHeight(getResources());
        }

    }

    private void openHtmlInteractivity() {

        Intent intent;
        Bundle bundle = new Bundle();
        bundle.putBoolean("isOriantationLocked", getIntent().getBooleanExtra("isOriantationLocked", false));
        bundle.putString("path", getIntent().getStringExtra("path"));
        bundle.putString("bookID", getIntent().getStringExtra("bookID") + "");
        bundle.putString("bookTitle", getIntent().getStringExtra("bookTitle"));
        bundle.putString("expiryDate", getIntent().getStringExtra("expiryDate"));
        bundle.putLong("currentTime", getIntent().getExtras().getLong("currentTime"));
        bundle.putBoolean("isBookEncrypted", getIntent().getBooleanExtra(IS_BOOK_ENCRYPT, false));


        intent = new Intent(mContext, HtmlnterActivity.class);
        intent.putExtras(bundle);
        startActivity(intent);
    }


    private void setEmptyTextView() {
        ((TextView) findViewById(R.id.search_no_result_icon)).setTypeface(typeface);
        ((TextView) findViewById(R.id.search_no_result_icon)).setText("ṝ");
        ((TextView) findViewById(R.id.search_no_result_icon)).setAllCaps(false);
        ((TextView) findViewById(R.id.search_no_result_icon)).setTextSize(100);
        ((TextView) findViewById(R.id.search_no_result_icon)).setTextColor(getResources().getColor(R.color.search_edit_text_background_color));
        ((TextView) findViewById(R.id.no_result_text)).setTextColor(getResources().getColor(R.color.black));
        findViewById(R.id.no_result_text).setAlpha(0.5f);
        ((TextView) findViewById(R.id.no_result_text)).setTextSize(18);
    }


    public void setTypeface() {
        customTypeFace = Typefaces.get(getBaseContext(), this.getResources().getString(R.string.kitaboo_bookshelf_font_file_name));


        mNextPage.setTypeface(customTypeFace);
        mNextPage.setAllCaps(false);
        mNextPage.setText(CustomPlayerUIConstants.TEACHER_ACTIONBAR_NEXT);
        mNextPage.setTextColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getNavigationArrows()));

        mPrevPage.setTypeface(customTypeFace);
        mPrevPage.setAllCaps(false);
        mPrevPage.setText(CustomPlayerUIConstants.TEACHER_ACTIONBAR_PREVIOUS);
        mPrevPage.setTextColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getNavigationArrows()));

        if (getPackageManager().hasSystemFeature("org.chromium.arc.device_management")) {
           /* if (getPackageManager().hasSystemFeature("android.hardware.touchscreen")) {
                mNextPage.setVisibility(View.GONE);
                mPrevPage.setVisibility(View.GONE);

            } else {
                mNextPage.setVisibility(View.VISIBLE);
                mPrevPage.setVisibility(View.VISIBLE);
            }*/
            mNextPage.setVisibility(View.VISIBLE);
            mPrevPage.setVisibility(View.VISIBLE);

        }
    }

    public void FullScreencall() {

        // FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.FULL_SCREEN_VIEW_CLICK);

        if (Build.VERSION.SDK_INT < 19) {
            View v = this.getWindow().getDecorView();
            v.setSystemUiVisibility(View.GONE);
        } else {
            //for higher api versions.
            View decorView = getWindow().getDecorView();
            int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
            decorView.setSystemUiVisibility(uiOptions);
        }
    }


    @Override
    protected void onStart() {
        if (getResources().getBoolean(R.bool.is_voyger_client))
            checksessionexpired();
        super.onStart();
    }

    private void checksessionexpired() {
        if (UserController.getInstance(this).getUserVO().getStartDate() != null && UserController.getInstance(this).getUserVO().getExpiryDate() != null) {
            mStartdate = UserController.getInstance(this).getUserVO().getStartDate();
            mExpireddate = UserController.getInstance(this).getUserVO().getExpiryDate();
            mLogindate = mStartdate.replaceAll("[-+.^:,]", "");
            Starttime = Integer.parseInt(mLogindate);
            mExpireddateTime = mExpireddate.replaceAll("[-+ .^:,]", "");
            Expiredtime = Integer.parseInt(mExpireddateTime);
        }

        long currentTimeMillis = System.currentTimeMillis();
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        df.setTimeZone(TimeZone.getTimeZone("UTC"));
        Date date = new Date(currentTimeMillis);
        String currentDate = df.format(date);
        String UpdatedTime = currentDate.replaceAll("[-+.^:,]", "");
        int currenttime = Integer.parseInt(UpdatedTime);
        if (!com.hurix.commons.utils.Utils.checkInternetConnection(PlayerActivity.this)) {
            if ((currenttime > Expiredtime) || (currenttime < Starttime)) {
                showSessionExpiredAlert();

            }
        }
    }

    /**
     * Called once Renderer attach to Activity
     */
    @Override
    public void onReaderAttached() {
        //Add the code to initialize kitaboo SDK here.
        //Create kitaboo renderer instance
        //Clear all data of history Component

        if (Build.MODEL.equalsIgnoreCase("SM-T835") || Build.MODEL.equalsIgnoreCase("SM-T595")) {
            FullScreencall();
            View decorView = getWindow().getDecorView();
            decorView.setOnSystemUiVisibilityChangeListener
                    (new View.OnSystemUiVisibilityChangeListener() {
                        @Override
                        public void onSystemUiVisibilityChange(int visibility) {
                            if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {
                                FullScreencall();
                            } else {

                            }
                        }
                    });
        }

        clearPageHistoryData();
        bookId = getIntent().getLongExtra(BOOK_ID, 0);
        mAssetType = getIntent().getStringExtra("asset_type");
        if (mAssetType != null && mAssetType.equalsIgnoreCase("EPUB")) {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
            mServicehandler.getBookReadingSpeed(bookId, KitabooSDKModel.getInstance().getUserToken(), this);
        } else {
            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);
            // add FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS flag to the window
            getWindow().addFlags(WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS);
            // finally change the color
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                getWindow().setStatusBarColor(getResources().getColor(R.color.grey_transparency));
            }
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN, WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);
        }
        bookVersion = getIntent().getStringExtra(BOOK_VERSION);
        bookMode = getIntent().getStringExtra(BOOK_MODE);
        mathkeyboardenable = getIntent().getStringExtra(IS_MATHKEYBOARD_ENABLE);
        protractorenable = getIntent().getStringExtra(IS_PROTRACTOR_ENABLE);
        if (bookMode != null) SDKManager.getInstance().setBookMode(bookMode);
        userID = getIntent().getLongExtra(USER_ID, 0);
        token = getIntent().hasExtra(TOKEN) ? getIntent().getStringExtra(TOKEN) : "";
        isbn = getIntent().getStringExtra(ISBN);
        reflowPrintEnable = getIntent().getStringExtra(REFLOW_PRINT_ENABLE);
        fixedepubPrintPagelist = getIntent().getStringExtra(FIXEDEPUB_PRINT_PAGELIST);
        SDKManager.getInstance().setCurrentBookISBN(isbn);
        SDKManager.getInstance().setMathkeyboardenable(mathkeyboardenable);
        SDKManager.getInstance().setTextSelectionDefaultColor(SELECTION_RANGE_COLOR);
        mIsElasticSearch = getIntent().getExtras().getString("searchQuery") != null && !getIntent().getExtras().getString("searchQuery").isEmpty();
        renderView.isElasticSearchActive(mIsElasticSearch);
        SDKManager.getInstance().setElasticSearchActive(mIsElasticSearch);
        mSearchQuery = getIntent().getExtras().getString("searchQuery");
        bookTitle = getIntent().getExtras().getString("bookTitle");
        IsClassAccociated = getIntent().getExtras().getBoolean("classAssociated");
        // send the specific user id to sdk to keep track of UGC data for User
        KitabooSDKModel.getInstance().setUserID(userID);
        KitabooSDKModel.getInstance().setUserToken(token);
        SDKManager.getInstance().setIsEncrypt(getIntent().getBooleanExtra(IS_BOOK_ENCRYPT, false));
        accountType = getIntent().getStringExtra(ROLE_NAME);/*"INSTRUCTOR"*/
        userName = getIntent().getStringExtra(USER_NAME);
        firstName = getIntent().getStringExtra(FIRST_NAME);
        lastName = getIntent().getStringExtra(LAST_NAME);
        profilePic = getIntent().getStringExtra(PROFILE_PIC);

        bookExpiryDate = getIntent().getExtras().getString("expiryDate");
        CurrentTimeInMillis = getIntent().getExtras().getLong("currentTime");

        Log.e("expiryDate", "" + bookExpiryDate);

        SDKManager.getInstance().setRoleName(accountType);
        //IsClassAccociated = getIntent().getExtras().getBoolean(IS_CLASSACCOCIATED, false);
        SDKManager.getInstance().setClassAssociated(IsClassAccociated);
        mthumbnailpath = getIntent().getStringExtra(MEDIA_PATH);
        BookInfo book = new BookInfo(
                getIntent().getStringExtra(MEDIA_PATH),
                bookId,
                getIntent().getStringExtra(ISBN), getIntent().getStringExtra(EPUB_ENCR_TYPE));
        book.setBookEncrypt(getIntent().getBooleanExtra(IS_BOOK_ENCRYPT, false));
        //get Class Id and Last page synced from bookshelf , require for KitabooAnalytics
        mLastpageSync = getIntent().getStringExtra("lastPageSync");
        /*Log.d("LocalLastVisitedFolioID", mLastpageSync);
        if (mLastpageSync.equalsIgnoreCase("0")) {
            mLastpageSync = GlobalDataManager.getInstance().getLastVisitedFolioID();
        }*/
        mClassId = getIntent().getStringExtra("classID");
        String trackingdata = DatabaseManager.getInstance(this).getAnalytics(userID, bookId);


        if (Utils.isOnline(this)) {

            // get Class list data from service

            mServicehandler.getClassesOfBook(userID, bookId, KitabooSDKModel.getInstance().getUserToken(), this);

            //get offline Analytics data from DB
            //call fetch ugc and other service requets requst
            //if (!trackingdata.isEmpty()) {
            if (mReaderType == EBookType.REFLOWEPUB) {
                JSONObject lastPageFolio = new JSONObject();
                if (mCFIDArrayList != null && mCFIDArrayList.size() > 0) {
                    try {
                        lastPageFolio.put("chapterid", SDKManager.getInstance().getChapterID());
                        lastPageFolio.put("positionIdentifier", SDKManager.getInstance().getCFIBookMarkPath());
                        lastPageFolio.put("page", SDKManager.getInstance().getmBookMarkPath());
                        lastPageFolio.put("pageCFI", mCFIDArrayList.get(mCFIDArrayList.size() - 1));
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                } else {
                    try {
                        lastPageFolio.put("chapterid", SDKManager.getInstance().getChapterID());
                        lastPageFolio.put("positionIdentifier", SDKManager.getInstance().getCFIBookMarkPath());
                        lastPageFolio.put("page", SDKManager.getInstance().getmBookMarkPath());
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                }
                //kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(analyticdata, mClassId, currentFoliId);
                kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(trackingdata, mClassId, lastPageFolio.toString(), this);
            } else {
                kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(trackingdata, mClassId, currentFoliId, this);
            }

            // String kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(trackingdata, mClassId, mLastpageSync);
            // }
            mServicehandler.sendBackgroundServiceforUGC(bookId, userID, accountType, bookVersion, kitabooanalytic, this);

        } else {
            AnalyticsManager.getInstance(this).setOfflinedata(trackingdata);
        }

        startThread();

        renderView.setDefaultLoaderColor(getResources().getColor(R.color.kitaboo_main_color));
        renderView.hideDefaultActionButtons();

        //get highlight data from DB
        initHighlightPopup();


        /* TODO For WorldBook client Epub books need to open on Vertical mode*/
        String key = KitabooSDKModel.getInstance().getUserID() + "_" + SDKManager.getInstance().getGetLocalBookData().getBookID()
                + "_" + PrefActivity.KEY_SCROLL_MODE;
        if (getResources().getBoolean(R.bool.is_it_worldbook)) {
            Utils.insertSharedPrefernceStringValues(this, PrefActivity.SETTING_PANEL_PREF_NAME, key, "HORIZONTAL");
        }

        penHelper = new PentoolHelper(PlayerActivity.this, themeUserSettingVo);
        //renderView.hideDefaultLoader();
        isJumpToBookInNative = getResources().getBoolean(R.bool.is_Oup_client);
        renderView.playBook(book, isJumpToBookInNative);

        if (isMobile) {
            SDKManager.getInstance().setIsmobile(true);

        } else {
            mScrollView.setPadding(0, 0, 0, 20);
            SDKManager.getInstance().setIsmobile(false);

        }

        waterMarkText = this.getResources().getString(R.string.watermarktext) + "User ID=" + userID + ", Book ID=" + bookId;

    }


    /**
     * Call back on each page load start
     *
     * @param pageVo
     */
    @Override
    public void onPageLoadingStart(IPage pageVo) {
        //get Bookmark data from DB Pagewise
        //initBookmarkView(pageVo.getFolioID());
        if (mReaderType == EBookType.FIXEDEPUB && !SDKManager.getInstance().isIslastvisited()) {
            SDKManager.getInstance().setLastVisitedSuccess(true);
            renderView.loadLastVisitedPage(getLastVisitedPageID());
        }
        hideDialog();
        if (pageVo != null)
            // Log.d("onPageLoadingStart", "" + pageVo.getPageID());

        /*if(mIsElasticSearch) {

            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.SEARCH);
            hideThumbanilPanel();
        //    customSearchPanel(mIsElasticSearch);
            if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                hideDialog();
            }
            openSearchDialog();
          //  hideBottomBar();
            //hideActionBar();
            mIsSearchOpen = true;
            keyboardHeightProvider.start();
            mSearchview.setQuery(mSearchQuery, true);

        }*/
            initBookmarkView(pageVo.getFolioID());

        if (printablePagelist != null && printablePagelist.size() > 0) {
            for (int i = 0; i < printablePagelist.size(); i++) {
                if (printablePagelist.get(i).equalsIgnoreCase(pageVo.getChapterName())) {
                    initPrintPageView(pageVo.getFolioID());
                }

            }
        }
    }

    private void clearPageHistoryData() {
        ArrayList<Integer> mHistoryStack = SDKManager.getInstance().getHistoryStack();
        if (mHistoryStack.size() > 0) {
            SDKManager.mCurserPosition = -1;
            mHistoryStack.clear();
        }
    }

    /**
     * Initialize the Page Scroll View
     */
    private void initPageScrollSeekBarView() {

        parentpageScrollSeekbarView = new ParentPageScrollSeekbarView(this);
        parentpageScrollSeekbarViewArray.add(parentpageScrollSeekbarView);
        parentpageScrollSeekbarView.setViewDetails(R.color.kitaboo_main_color);
        renderView.setPageScrollSeekbarView(parentpageScrollSeekbarView, this);
        SDKManager.getInstance().setSeekbarScrollView(parentpageScrollSeekbarView);

    }

    @Override
    public void pageScrollSeekBarProgresChanged(String chapterName, String pageNo, int motionEvent) {

        if (SDKManager.getInstance().isReadAloudPlaying()) {
            SDKManager.getInstance().setFromUserTouch(true);
            pauseAudio(false);
        }

        if (mIsSearchOpen && mTabSearchCancelButton != null) {
            mTabSearchCancelButton.callOnClick();
        }
        if (chapterName != null && motionEvent == 2) {

            ll_page_scroll_seekbar.setVisibility(View.VISIBLE);
            verticalScrollChapterName.setText(chapterName);
            verticalScrollPageno.setText(getResources().getString(R.string.page_number_toast) + " " + pageNo);
            mVerticalScrollTimeLeft.setText(mHowMuchTimeLeft);
            mTimeLeftLayout.setVisibility(View.GONE);

        } else {
            ll_page_scroll_seekbar.setVisibility(View.GONE);
        }
    }

    /**
     * Initialize the BookmarkView
     *
     * @param folioid : FolioId
     */
    private void initBookmarkView(String folioid) {

        BookMarkView bookmarkview = new BookMarkView(this);
        bookmarkview.setResourceId(bookmarkview);
        bookmarkview.setUpIconFonts(com.hurix.commons.utils.Utils.getFontFilePath());
        if (mReaderType == EBookType.FIXEDEPUB) {
            bookmarkview.setGravitytoBookmark(Gravity.RIGHT);
        }
        bookmarkview.setlistner(new BoomarkActionListner() {

            @Override
            public void onBookmarkTap(View v) {
                if (!SDKManager.getInstance().isReviewMode() || !SDKManager.getInstance().isNewTeacherReviewModeOn()) {
                    showDefaultBookmarkText((BookMarkView) v);
                }
            }
        });
        if (!getResources().getBoolean(R.bool.is_sparkCapital_client) && !getResources().getBoolean(R.bool.is_FOSS))
            renderView.setBookmarkView(bookmarkview, folioid);

        bookmarkView = bookmarkview;
    }

    /**
     * Show bookmark text view
     *
     * @param v
     */
    public void showDefaultBookmarkText(final BookMarkView v) {
        mBookmarkActionHandler = new CustomBookmarkActionHandler(this, v, readerThemeSettingVo);
        mBookmarkActionHandler.setTheme(themeUserSettingVo);
        mBookmarkActionHandler.setBookmarkData(v.getData());
        mBookmarkActionHandler.setAlertLayout(R.layout.bookmark_alert_new);
        mBookmarkActionHandler.getArrowUp().setVisibility(View.GONE);
        mBookmarkActionHandler.getArrowDown().setVisibility(View.GONE);
        mBookmarkActionHandler.addOnHandlerDismissListener(new CustomBookmarkActionHandler.OnHandlerDismissListener() {
            @Override
            public void onDismiss(BookMarkVO vo) {
                //check the mode and set text and color according to it

                if (vo.getMode() != CustomBookmarkActionHandler.UGC_ITEM_MODE_DELETED) {
                    v.setText(PlayerUIConstants.BM_IC_ADDED_TEXT);

                    if (readerThemeSettingVo != null) {
                        //   v.setTextColor(Color.parseColor(themeUserSettingVo.get_reader_bookmark_selected_color()));
                        v.setTextColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getBookmark().getSelectedIconColor()));
                    } else {
                        v.setTextColor(Color.parseColor("#43dbf2"));
                    }
                } else {
                    setBookMarkVisibility(v);
                }
                if (mReaderType == EBookType.REFLOWEPUB && !(vo.getMode() == Constants.UGC_ITEM_MODE_MODIFIED)) {
                    vo.setCFIBookMarkPath(SDKManager.getInstance().getCFIBookMarkPath());
                    vo.setBookMarkPath(SDKManager.getInstance().getmBookMarkPath());
                }
                //Below if-else for avoiding the bookmark-save during orientation change
                if (!isOrientataionChanged)
                    onBookmarkSave(vo);
                else
                    isOrientataionChanged = false;

            }
        });
        mBookmarkActionHandler.locateView(v);
        // mBookmarkActionHandler.showBookMark(v);

        mBookmarkActionHandler.showBookmark(v, calculateLocation(v));
    }

    public void customSearchPanel(boolean mIsElasticSearch) {

        int dialog_height = (int) this.getResources().getDimension(R.dimen.container_height);
        int marginTop = (int) this.getResources().getDimension(R.dimen.margin_top);
        int marginBottom = (int) this.getResources().getDimension(R.dimen.margin_bottom);
        int marginLeft = (int) this.getResources().getDimension(R.dimen.margin_left);

        if (mIsElasticSearch || mReaderType == EBookType.FIXEDKITABOO) {

            mElasticSearchCancel.setVisibility(View.VISIBLE);
            mElasticSearchPanel.setVisibility(View.VISIBLE);
            mTabSearchCancelButton.setVisibility(View.GONE);
            mTabSearchLayout.removeAllViews();

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.MATCH_PARENT, 1.0f);
            mTabSearchLayout.addView(mElasticSearchCancel, params);

            LinearLayout.LayoutParams searchtxt_params = new LinearLayout.LayoutParams(0, dialog_height, 6.0f);
            searchtxt_params.setMargins(5, marginTop, 0, marginBottom);
            mTabSearchLayout.addView(mSearchTxtConatiner, searchtxt_params);

            LinearLayout.LayoutParams searchRightContainer = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.MATCH_PARENT, 3.0f);
            mTabSearchLayout.addView(mSearchRightcontainer, searchRightContainer);
        } else {

            mElasticSearchCancel.setVisibility(View.GONE);
            mElasticSearchPanel.setVisibility(View.GONE);
            mTabSearchCancelButton.setVisibility(View.VISIBLE);
            mTabSearchLayout.removeAllViews();

            LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.MATCH_PARENT, 0.0f);
            mTabSearchLayout.addView(mElasticSearchCancel, params);

            LinearLayout.LayoutParams searchtxt_params = new LinearLayout.LayoutParams(0, dialog_height, 8.0f);
            searchtxt_params.setMargins(marginLeft, marginTop, 0, marginBottom);
            mTabSearchLayout.addView(mSearchTxtConatiner, searchtxt_params);

            LinearLayout.LayoutParams searchRightContainer = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.MATCH_PARENT, 2.0f);
            mTabSearchLayout.addView(mSearchRightcontainer, searchRightContainer);
        }
    }

    private int[] calculateLocation(View view) {
        int[] bookmarkviewLocation = new int[2];
        int[] location = new int[2];
        view.getLocationOnScreen(location);
        final int anchorLeft = location[0];
        final int anchorTop = location[1];
        final int anchorWidth = view.getMeasuredWidth();
        final int anchorHeight = view.getMeasuredHeight();
        Rect anchorRect = new Rect(anchorLeft, anchorTop, anchorLeft + anchorWidth, anchorTop + anchorHeight);
        mBookmarkActionHandler.getRootView().measure(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        final int rootWidth = mBookmarkActionHandler.getRootView().getMeasuredWidth();
        final int rootHeight = mBookmarkActionHandler.getRootView().getMeasuredHeight();
        int screenWidth = ((WindowManager) getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getWidth();
        int xPos = anchorRect.left + (anchorWidth / 2);
        int yPos = anchorRect.top + rootHeight - 20;
        if (rootHeight > anchorTop) {
            yPos = anchorRect.bottom;
        }
        if (rootWidth - (anchorWidth / 2) > screenWidth - xPos) {
            xPos = (anchorRect.left + (anchorWidth / 2)) - rootWidth + 5;
        }
        bookmarkviewLocation[0] = xPos;
        bookmarkviewLocation[1] = yPos;
        return bookmarkviewLocation;
    }

    public void setBookMarkVisibility(BookMarkView v) {
        if (!TextUtils.isEmpty(v.getData().getBookmarkTitle()) && v.isBookmarkavailable()) {
            v.setText(PlayerUIConstants.BM_IC_ADDED_TEXT);
            if (readerThemeSettingVo != null) {
                //  v.setTextColor(Color.parseColor(themeUserSettingVo.get_reader_bookmark_selected_color()));
                v.setTextColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getBookmark().getSelectedIconColor()));
            } else {
                v.setTextColor(Color.parseColor("#43dbf2"));
            }

        } else {
            v.setText(PlayerUIConstants.BM_IC_TEXT);
            if (readerThemeSettingVo != null) {
                //  v.setTextColor(Color.parseColor(themeUserSettingVo.get_reader_bookmaork_default_color()));
                v.setTextColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getBookmark().getIconColor()));
            } else {
                v.setTextColor(Color.parseColor("#a9a9a9"));
            }

        }
    }

    /**
     * Responsible to get list of highlight of loaded page from DB.
     *
     * @param folioID : folioid of page
     */

    private void getHighlightFromDB(String folioID) {
        ArrayList<HighlightVO> highlightlist = DatabaseManager.getInstance(this).getHighlightByChapter(
                bookId, userID, folioID);
        for (HighlightVO highlightvo : highlightlist) {
            if (!highlightvo.getNoteData().isEmpty()) {
                highlightvo.setNoteBtnBgColor(highlightvo.getColor());
                highlightvo.setNoteiconColor("#000000");
            }
        }
        if (highlightlist != null) {
            SDKManager.getInstance().setAllHighlightVO(folioID, highlightlist);
            Log.e("highList", "" + highlightlist.size());
        }

    }

    /**
     * Called on each page load completed
     *
     * @param mpageVo :  page object
     */
    @SuppressLint("RestrictedApi")
    @Override
    public void onPageLoadingCompleted(final IPage mpageVo) {


        if (mpageVo != null) {

            //if (mpageVo.getFolioID().equalsIgnoreCase("0")) {
            if (mCFIDArrayList != null && mCFIDArrayList.size() == 0) {
                mCurrentPageData = SDKManager.getInstance().getCurrentReflowablePageVO();
                if (mCurrentPageData != null) {
                    if (mLastReflowPage != null && mReaderType == EBookType.REFLOWEPUB) {
                        savePageTrackingDataForReflow(mLastReflowPage);
                    }
                    mLastReflowPage = SDKManager.getInstance().getCurrentReflowablePageVO();
                    mLastReflowPage.setOpenTimeStamp(Utils.getDateTime());
                }
            }
            //}
            if (SDKManager.getInstance().isReviewMode() || SDKManager.getInstance().isNewTeacherReviewModeOn()) {
                mListOfLoadedPage.add(mpageVo);
            }
            mCurrentPageData = mpageVo;
            bookVo.setChapterName(mCurrentPageData.getChapterName());
            pageVo = mpageVo;
            if (mReaderType != EBookType.FIXEDEPUB) {
                if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
                    initBookmarkView(pageVo.getFolioID());
                } else {
                    initBookmarkView(pageVo.getFolioID());
                    if (mReaderType == EBookType.FIXEDKITABOO && ((PDFPage) mpageVo).getPrintable()) {
                        initPrintPageView(pageVo.getFolioID());
                    }
                }
            }

            if (SDKManager.getInstance().isPageScrollFeatureOn() && mReaderType == EBookType.REFLOWEPUB) {
                // initPageScrollSeekBarView();
            }
            //initBookmarkView(pageVo.getFolioID());
            addTextAnnotationDeleteButton(pageVo.getFolioID());
            getProtractorFromDB(pageVo.getFolioID());
          /*  if (mReaderType == EBookType.FIXEDKITABOO) {
                mTextChapterTitle.setText(mCurrentPageData.getChapterName());
            } else {
                if (mCurrentPageData != null) {
                    // mTextChapterTitle.setText(mCurrentPageData.getChaptertittle().trim());
                }
            }*/

            Log.e("highrev", "" + !SDKManager.getInstance().isReviewMode());
            //get highlight data from DB Pagewise
            if (!SDKManager.getInstance().isReviewMode()) {
                getHighlightFromDB(pageVo.getFolioID());
                //get Bookmark data from DB Pagewise
                getBookmarkDataFromDB(pageVo, pageVo.getFolioID());
                if (mReaderType == EBookType.FIXEDKITABOO)
                    getTextAnnotationFromDBByFolioId(pageVo.getFolioID());
                if (mReaderType == EBookType.FIXEDKITABOO)
                    getPenFromDB(pageVo.getFolioID());
                if (mReaderType == EBookType.FIXEDKITABOO)
                    setMarksUpsList(mpageVo);
                renderView.loadAsset(AssetType.HighlightNote, pageVo.getFolioID());
            }

            setPageNo();
        }

        if (renderView.isAnnotationActive()) {
            new Handler(getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {
                    enableAnnotationViews();
                }
            }, 1500);
        }
        //SDKManager.getInstance().getTextAnnotationDeleteButton().get(pageVo.getFolioID()).setVisibility(View.INVISIBLE);


        if (mIsElasticSearch && mReaderType == EBookType.REFLOWEPUB) {
            String tmpElasticBackgroundColor = getResources().getString(R.string.elastic_search_color), searchHighlightedColor = getResources().getString(R.string.elastic_search_color);

            renderView.highlightTempElasticSearch(mSearchQuery, tmpElasticBackgroundColor, searchHighlightedColor, mCurrentClickSearchIndex + 1);
        }
        if (mSearchArrayList != null && mIsElasticSearch && mReaderType == EBookType.FIXEDEPUB) {
            if (isNextCliked) {
                isNextCliked = false;
                int time;
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    time = 2000;
                } else {
                    time = 3000;
                }
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false, true);
                    }
                }, time);


            } else if (isPrevClicked) {
                isPrevClicked = false;
                /*if(mSearchArrayListPageWise!=null)
                    mSearchArrayListPageWise.clear();
                for (int i = 0; i <mSearchArrayList.size() ; i++) {
                    if(mSearchArrayList.get(i).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName()))
                        mSearchArrayListPageWise.add(mSearchArrayList.get(i));
                }*/

                int time;
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)
                    time = 2000;
                else
                    time = 3000;

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        SDKManager.getInstance().setSearchSequentialIndexEpub(mSearchArrayListPageWise.size());
                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, true, true);
                    }
                }, time);

            } else if (isOnItemClicked) {
                isOnItemClicked = false;
                int time;
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)
                    time = 2000;
                else
                    time = 3000;

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()).getSearchIndex()), mIsElasticSearch, false, true);
                    }
                }, time);
            } else {
                int time;
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)
                    time = 2000;
                else
                    time = 3000;

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(0), mIsElasticSearch, false, true);
                    }
                }, time);
            }
        }

        renderView.setEqEditorButton(mEqEditButton);

        // FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.EQUATION_EDITOR_CLICK);

        if (getResources().getBoolean(R.bool.isHelpvisible)) {
           /* if (!DBController.getInstance(this).getManager().isBookShelfHelpScreenSeen(UserController
                    .getInstance(PlayerActivity.this).getUserVO().getUserID()) || Utils.getSharedPreferenceBooleanValue(getBaseContext(), Constants.HELPSCREEN_REQUIRED_READER, false)) {
                // helpScreenViews();
            } else {

            }*/
        }
        /*if (mCurrentAnnotationpage != null && mCurrentAnnotationpage.getFolioID() != null && SDKManager.getInstance().isNewTeacherReviewModeOn())
            loadReviewdataTo();*/
       /* new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if (getResources().getBoolean(R.bool.isHelpvisible)) {
                    if(!DBController.getInstance(PlayerActivity.this).getManager().isBookPlayerHelpScreenSeen(UserController
                            .getInstance(PlayerActivity.this).getUserVO().getUserID()) || utils.Utils.getSharedPreferenceBooleanValue(getBaseContext(), Constants.HELPSCREEN_REQUIRED_READER, false)){
                        if(!SDKManager.getInstance().isNewTeacherReviewModeOn())
                            helpScreenViews();
                    }
                    else {
                       // mainLayout.setVisibility(View.GONE);
                    }
                }else {
                   // mainLayout.setVisibility(View.GONE);
                }
            }
        }, 100);*/
        if (readAloudMarkups == null) {
            readAloudMarkups = SDKManager.getInstance().getCurrentPageAudioSyncList();

        }


        // mTextChapterTitle.setText(mCurrentPageData.getChaptertittle().trim());


        /* TODO Need to comment this code after CFID analytics implemented*/


        /*if (mCFIDArrayList.size() == 0) {
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (mReaderType == EBookType.REFLOWEPUB) {
                        mCurrentPageData = SDKManager.getInstance().getCurrentReflowablePageVO();
                        if (mCurrentPageData != null) {
                            if (!(mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                                savePageTrackingDataForReflow(mCurrentPageData);
                            }
                        }
                    }
                }
            }, 1000);
        }*/

        if (mReaderType == EBookType.FIXEDKITABOO && mReadAloudIcon != null && !audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
            if (currASList != null && currASList.size() > 0 && currASList.get(0).getFolioID().equalsIgnoreCase(currentFoliId)) {
                toggleAudioSyncButton(mReadAloudIcon, false);
            } else {
                toggleAudioSyncButton(mReadAloudIcon, true);
            }
        }
    }

    private void addTempASFolio(ArrayList<LinkVO> readAloudMarkups) {

        if (tempASFolioList != null)
            tempASFolioList.clear();

        for (LinkVO tempLinkVO : readAloudMarkups) {
            tempASFolioList.add(tempLinkVO.getFolioID());
        }
    }

    @Override
    public void onPageFinished(final IPage pageVo) {

        if (mReaderType == EBookType.REFLOWEPUB && SDKManager.getInstance().isMediaOverlay() && mReadAloudIcon != null) {
            if (SDKManager.getInstance().getCurrentPageVO() != null && SDKManager.getInstance().getMediaOverlayMap() != null && SDKManager.getInstance().getMediaOverlayMap().size() > 0 && SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(SDKManager.getInstance().getCurrentPageVO().getChaptertittle())) != null) {
                toggleAudioSyncButton(mReadAloudIcon, false);
            } else if (SDKManager.getInstance().getCurrentPageVO() != null && SDKManager.getInstance().getMediaOverlayMap() != null && SDKManager.getInstance().getMediaOverlayMap().size() > 0 && SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(SDKManager.getInstance().getCurrentPageVO().getChaptertittle())) == null) {
                toggleAudioSyncButton(mReadAloudIcon, true);
            }
        }

        if (SDKManager.getInstance().getCurrentPageVO() != null) {
            currPageVo = SDKManager.getInstance().getCurrentPageVO();
        } else {
            currPageVo = pageVo;
        }

        if (mReaderType == EBookType.REFLOWEPUB) {
            String key = KitabooSDKModel.getInstance().getUserID() + "_" + SDKManager.getInstance().getGetLocalBookData().getBookID()
                    + "_" + PrefActivity.KEY_SCROLL_MODE;
            if (mContext != null && Utils.getSharedPreferenceStringValue(mContext, PrefActivity.SETTING_PANEL_PREF_NAME, key, "VERTICAL") != null &&
                    Utils.getSharedPreferenceStringValue(mContext, PrefActivity.SETTING_PANEL_PREF_NAME, key, "VERTICAL").equalsIgnoreCase("VERTICAL") && mReaderType == EBookType.REFLOWEPUB) {
                initPageScrollSeekBarView();
                //updateRemaningTime();
            }
            if (SDKManager.getInstance().getCurrentPageVO() != null) {
                mAudioPageData = SDKManager.getInstance().getCurrentPageVO();
            } else {
                mAudioPageData = pageVo;
            }

            mTextChapterTitle.setText(pageVo.getChaptertittle().trim());
        }
        if (mReaderType == EBookType.FIXEDEPUB) {
            if (mCurrentPageData != null)
                mTextChapterTitle.setText(mCurrentPageData.getChaptertittle().trim());
            else
                mTextChapterTitle.setText(pageVo.getChaptertittle().trim());

            if (!SDKManager.getInstance().isReviewMode()) {
                getHighlightFromDB(pageVo.getFolioID());
                //get Bookmark data from DB Pagewise
                getBookmarkDataFromDB(pageVo, pageVo.getFolioID());
                setCurrentPagePrintData(pageVo);
                getPenFromDB(pageVo.getFolioID());
                //setMarksUpsList(pageVo);
                renderView.loadAsset(AssetType.HighlightNote, pageVo.getFolioID());
            }

            toggleAudioSyncButton(mthumbnailIcon);
        }

        if (mReaderType == EBookType.REFLOWEPUB && SDKManager.getInstance().isReadAloudPlaying()) {
            rePlayAudioSync();
        }

    }

    private void rePlayAudioSync() {
        if (SDKManager.getInstance().isReadAloudPlaying()) {

            if (SDKManager.getInstance().getMediaOverlayMap() != null && SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(nextAudioSyncChapterName)) != null) {
                mTextChapterTitle.setText(nextAudioSyncChapterName);

                if (currAudioSyncChapter.isEmpty() && playNextAudio) {
                    currAudioSyncChapter = nextAudioSyncChapterName;
                    if (SDKManager.getInstance().getAudioVOS() != null && SDKManager.getInstance().getAudioVOS().size() > 0) {
                        SDKManager.getInstance().getAudioVOS().clear();
                    }

                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            playNextAudio = false;
                            //if (currAudioSyncChapter.equalsIgnoreCase(mAudioPageData.getChaptertittle())) {
                            playAudioSync(nextAudioSyncChapterName);
                            // }
                        }
                    }, 5000);

                }
            }

        }
    }

    /**
     * function responsible for getting wordId in AudioSync.
     *
     * @param wordID Id of the word.
     */
    @Override
    public void onAudioSyncTap(String wordID) {
        Log.i("onAudioSyncTap", "called");

        if (!SDKManager.getInstance().isReadAloudPlaying()) {
            return;
        }

        if (mAudioManager != null) {
            mAudioManager.close();
            if (mAudioManager != null)
                mAudioManager.closeExplictly();
        }
        Iterator<AudioSyncWordInfo> iter = SDKManager.getInstance().getAudioSyncWordInfosList().iterator();

        while (iter.hasNext()) {
            AudioSyncWordInfo audioSyncWordInfo = iter.next();
            if (audioSyncWordInfo == null) {
                break;
            } else {
                if (wordID.equalsIgnoreCase(audioSyncWordInfo.wordId)) {

                    if (mAudioManager != null)
                        mAudioManager = null;

                    LinkVO linkAudioVO = new LinkVO();
                    if (mAudioPageData != null) {

                        if (SDKManager.getInstance().getCurrentPageVO() != null && !SDKManager.getInstance().getCurrentPageVO().getChaptertittle().equalsIgnoreCase(mAudioPageData.getChaptertittle())) {
                            mAudioPageData = SDKManager.getInstance().getCurrentPageVO();
                        }

                        BookVO.Manifest bookVo = SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(mAudioPageData.getChaptertittle()));
                        linkAudioVO.setUrl(bookVo.href);

                        float seekToTime = 0;
                        if (SDKManager.getInstance().getAllaudioSrcList() != null && SDKManager.getInstance().getAllaudioSrcList().size() > 0) {

                            if (SDKManager.getInstance().getAudioSyncSrcMap() != null && SDKManager.getInstance().getAudioSyncSrcMap().get(audioSyncWordInfo.audioSrc) != null) {

                                SDKManager.getInstance().setAudioTextTapped(true);

                                LinkedList<AudioSyncWordInfo> audioList = SDKManager.getInstance().getAudioSyncSrcMap().get(audioSyncWordInfo.audioSrc);
                                // For Last played audiosrc
                                for (int i = 0; i < SDKManager.getInstance().getAllaudioSrcList().size(); i++) {

                                    if (SDKManager.getInstance().getAllaudioSrcList().get(i).equalsIgnoreCase(audioSyncWordInfo.audioSrc)) {
                                        SDKManager.getInstance().setAudioSyncSrcCount(i);
                                        break;
                                    }


                                }

                                for (int i = 0; i < audioList.size(); i++) {
                                    if (audioList.get(i).wordId.equals(wordID)) {

                                        SDKManager.getInstance().setAudioSyncCount(i);
                                        SDKManager.getInstance().setLastAudioSrc(audioList.get(i).audioSrc);
                                        seekToTime = audioList.get(i).startPoint;
                                        linkAudioVO.setUrl(audioList.get(i).audioSrc);

                                        break;
                                    }
                                }

                            }

                            linkAudioVO.setmIsAudioSync(true);
                            if ((GlobalDataManager.getInstance().getCurrMode() != GlobalDataManager.PlayerState.HIGHLIGHT)) {
                                if (!onPauseCalled) {
                                    processAudioSync(linkAudioVO, null, seekToTime, true);
                                    if (mReadPause != null) {
                                        if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                                            mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                                            audioIsPause = false;
                                        }
                                    }
                                } else {
                                    if (mReadPause != null) {
                                        if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PAUSE)) {
                                            mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                                            audioIsPause = true;
                                        }
                                    }
                                }
                            }

                        }
                    }
                    break;
                }

            }
        }


    }

    @Override
    public void isReflowPrintIconEnable(IPage[] iPages) {

    }

    @Override
    public void searchStringNotFound() {

    }




    @Override
    public void makeVisible() {
        Log.i("makeVisible", "outer");

        String key = KitabooSDKModel.getInstance().getUserID() + "_" + SDKManager.getInstance().getGetLocalBookData().getBookID()
                + "_" + PrefActivity.KEY_SCROLL_MODE;
        if (mContext != null && Utils.getSharedPreferenceStringValue(mContext, PrefActivity.SETTING_PANEL_PREF_NAME, key, "VERTICAL") != null &&
                Utils.getSharedPreferenceStringValue(mContext, PrefActivity.SETTING_PANEL_PREF_NAME, key, "VERTICAL").equalsIgnoreCase("VERTICAL")) {
            Log.i("makeVisible", "inner");
            initPageScrollSeekBarView();
        }

        Log.i("mContext", "" + mContext);
        Log.i("modescroll", "" + Utils.getSharedPreferenceStringValue(mContext, PrefActivity.SETTING_PANEL_PREF_NAME, key, "VERTICAL"));
        Log.i("mReaderType", "" + mReaderType);

    }

    /**
     * function responsible to add Markup based on page.
     *
     * @param mpageVo data of specific page.
     */
    private void setMarksUpsList(IPage mpageVo) {

        if (mpageVo.getMarkupsList() != null && mpageVo.getMarkupsList().size() > 0) {

            initLinkView(mpageVo.getMarkupsList());
        }
    }


    private void initLinkView(ArrayList<LinkVO> _objVO) {
        getReaderTyface();
        if (_objVO != null) {
            int markupVisibility = View.VISIBLE;
            for (int i = 0; i < _objVO.size(); i++) {
                /*if (_objVO.toString().equalsIgnoreCase(LinkVO.LinkType.VIDEO.toString())) {
                    if (linkVO.isInline())
                        inlineVideoPlayer = new InlineVideoPlayer(this, false);
                } else if (_objVO.toString().equalsIgnoreCase(LinkVO.LinkType.VIMEO_VIDEO.toString())) {
                    if (linkVO.isInline())
                        inlineVideoPlayer = new InlineVideoPlayer(this, false);
                } else if (_objVO.toString().equalsIgnoreCase(LinkVO.LinkType.KALTURASTREAMING.toString())) {
                    if (linkVO.isInline())
                        inlineVideoPlayer = new InlineVideoPlayer(this, false);
                } else if (_objVO.get(i).toString().equalsIgnoreCase(LinkVO.LinkType.ACTIVITY_INJECTION.toString())) {
                    if (_objVO.get(i).getActivityInjectionType().equalsIgnoreCase("dropdown")) {
                        mLinkDropDownViewer = new LinkDropDownViewer(this);
                    } else {
                        mLinkEditFIBView = new LinkEditFIBView(this);
                    }
                } else*/
                LinkVO linkVO = _objVO.get(i);

                if (_objVO.toString().equalsIgnoreCase(LinkVO.LinkType.YOUTUBESTREAMING.toString())) {
                    if (linkVO.isInline())
                        youtubeCustomView = new YoutubeCustomView(this, false, linkVO.getLinkID());
                } else if (linkVO.getType().toString().toLowerCase().equalsIgnoreCase(LinkVO.LinkType.VIDEO.toString().toLowerCase()) && !linkVO.isInline()) {
                    linkVideoView = new LinkVideoView(this, false);
                    linkVO.setLinkView(null, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg),
                            PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC,
                            0, markupVisibility);
                } else {
                    linkView = new LinkVideoView(this, false);

                }

               /* linkVO.setType(LinkVO.LinkType.VIMEO_VIDEO.toString());
                linkVO.setIsInline(true);*/
                LinkVO.LinkType type = linkVO.getType();
                String tooltip = linkVO.getTooltip();
                if (linkVO.getIconUrl() != null && linkVO.getIconUrl().contains("flexibleicon.png") ||
                        linkVO.isFlexible() || linkVO.getAlpha().equalsIgnoreCase("0")
                        || linkVO.getTooltip().contains("Hiden") || linkVO.getTooltip().contains("hiden")) {
                    markupVisibility = View.INVISIBLE;
                } else {
                    markupVisibility = View.VISIBLE;
                }
                //For now Markup Size & FontSize is same for all markup in our product
                linkVO.setMarkupsize(getResources().getInteger(R.integer.link_ic_size));
                linkVO.setFontSize(getResources().getInteger(R.integer.link_ic_font_size));
                if (type.toString().equalsIgnoreCase("comments")/* && tooltip.equals("words")*/) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_COMMENT_TEXT, PlayerUIConstants.OS_LINK_IC_COMMENT_UNSELECTED_FC, 0, markupVisibility);
                }
                if (type.toString().equalsIgnoreCase("comments") && tooltip.equals("heirarchy")) {
                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, null, null, "", 0, Color.TRANSPARENT, markupVisibility);
                }

                if (type.toString().equalsIgnoreCase(LinkVO.LinkType.AUDIO.toString())) {
                    if (!getResources().getBoolean(R.bool.show_markup_read_allowed)
                            && SDKManager.getInstance().getGetLocalBookData().getAudioBookType().equals(Constants.AUDIO_BOOK_TYPE)) {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, null, null, null, 0, 0, markupVisibility);

                    } else {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_AUDIO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.AUDIO_SYNC.toString())) {
                    if (!getResources().getBoolean(R.bool.show_markup_read_allowed)
                            && SDKManager.getInstance().getGetLocalBookData().getAudioBookType().equals(Constants.AUDIO_BOOK_TYPE)) {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, null, null, null, 0, 0, markupVisibility);

                    } else {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_AUDIO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.VIDEO.toString())) {
                    if (linkVO.isInline()) {
                        inlineVideoPlayer = new InlineVideoPlayer(this, false);
                        linkVO.setLinkView(null, null, inlineVideoPlayer, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg),
                                PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC,
                                0, markupVisibility);
                    }/* else {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg),
                                PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC,
                                0, markupVisibility);
                    }*/

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.VIMEO_VIDEO.toString())) {
                    if (linkVO.isInline()) {
                        inlineVideoPlayer = new InlineVideoPlayer(this, false);
                        linkVO.setLinkView(null, null, inlineVideoPlayer, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg),
                                PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC,
                                0, markupVisibility);
                    } else {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg),
                                PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC,
                                0, markupVisibility);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.KALTURASTREAMING.toString())) {
                    if (linkVO.isInline()) {
                        inlineVideoPlayer = new InlineVideoPlayer(this, false);
                        linkVO.setLinkView(null, null, inlineVideoPlayer, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);
                    } else {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.WEB_ADDRESSES.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_WEBLINK_TEXT, PlayerUIConstants.OS_LINK_IC_WEBLINK_UNSELECTED_FC, 0, markupVisibility);

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.HTML_WRAP.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_ACTIVITY_TEXT, PlayerUIConstants.OS_LINK_IC_ACTIVITY_UNSELECTED_FC, 0, markupVisibility);

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.KITABOO_WIDGET.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_KITABOO_ACTIVITY_TEXT, PlayerUIConstants.OS_LINK_IC_KITABOO_ACTIVITY_UNSELECTED_FC, 0, markupVisibility);

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.DOCUMENTS.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_DOCUMENT_TEXT, PlayerUIConstants.OS_LINK_IC_DOCUMENT_UNSELECTED_FC, 0, markupVisibility);

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.INTERNAL.toString())) {
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.IMAGE.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);

                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), linkVO.isZoomImage() ? PlayerUIConstants.OS_LINK_IC_ZOOMIMAGE_TEXT :
                            PlayerUIConstants.OS_LINK_IC_IMAGE_TEXT, PlayerUIConstants.OS_LINK_IC_ACTIVITY_UNSELECTED_FC, 0, markupVisibility);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.TOC.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_TOCGOTO_TEXT, PlayerUIConstants.OS_LINK_IC_TOCGOTO_UNSELECTED_FC, 0, markupVisibility);
                } /*else if (type.toString().equalsIgnoreCase(ACTIVITY_INJECTION.toString())) {

                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                        linkVO.setLinkView(linkView,null,null);
                        linkVO.setFibmarkupSize(15);
                    } else {

                        linkVO.setLinkView(linkView,null,null);
                        linkVO.setFibmarkupSize(20);
                    }
                    linkVO.setLinkView(linkView,null,null);
                    customizeLinkMarkups(linkVO,null,getResources().getDrawable(R.drawable.link_icon_fib_bg),linkVO.getUserAnswer(),Color.BLACK,0,markupVisibility);
                }*/ else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.SLIDESHOW.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_SLIDESHOW_TEXT, PlayerUIConstants.OS_LINK_IC_SLIDESHOW_UNSELECTED_FC, 0, markupVisibility);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.YOUTUBESTREAMING.toString())) {
                    youtubeCustomView = new YoutubeCustomView(this, false, linkVO.getLinkID());
                    if (linkVO.isInline()) {
                        inlineVideoPlayer = new InlineVideoPlayer(this, false);
                        linkVO.setLinkView(null, null, inlineVideoPlayer, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);
                       /* linkVO.setLinkView(null, youtubeCustomView, null, null, null, null);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);*/
                    } else {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg),
                                PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC,
                                0, markupVisibility);
                        /*linkVO.setLinkView(null, youtubeCustomView, null, null, null, null);
                        customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_VIDEO_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);*/
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.SURVEY.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.BD_RESOURCES_SURVEY_IC_TEXT, PlayerUIConstants.OS_LINK_IC_VIDEO_UNSELECTED_FC, 0, markupVisibility);

                } else if (type.toString().equalsIgnoreCase(MULTIPLE_LINK.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_MULTILINK_TEXT, PlayerUIConstants.OS_LINK_IC_MULTILINK_UNSELECTED_FC, 0, markupVisibility);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.JUMP_TO_BOOK.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_JUMP_TO_BOOK_TEXT, PlayerUIConstants.OS_LINK_IC_JUMP_TO_BOOK_UNSELECTED_FC, 0, markupVisibility);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.STANDALONE_INSTRUCTION.toString())) {
                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_Standalone_Instruction_TEXT, PlayerUIConstants.OS_LINK_IC_Standalone_Instruction_UNSELECTED_FC, 0, markupVisibility);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.EXTERNAL_WEB_LINK.toString())) {

                    linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.OS_LINK_IC_WEBLINK_TEXT, PlayerUIConstants.OS_LINK_IC_WEBLINK_UNSELECTED_FC, 0, markupVisibility);

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.ACTIVITY_INJECTION.toString())) {
                    if (linkVO.getActivityInjectionType().equalsIgnoreCase("dropdown")) {
                        linkVO.setLinkView(null, null, null, mLinkDropDownViewer, null, null, linkVideoView);
                    } else {
                        linkVO.setLinkView(null, null, null, null, mLinkEditFIBView, null, linkVideoView);
                        // mLinkEditFIBView.setData(linkVO, false);
                    }

                    /*customizeLinkMarkups(linkVO,typeface,getResources().getDrawable(R.drawable.markup_icon_bg),
                            PlayerUIConstants.OS_LINK_IC_JUMP_TO_BOOK_TEXT,PlayerUIConstants.OS_LINK_IC_JUMP_TO_BOOK_UNSELECTED_FC,0,markupVisibility);*/
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.GLOSSARY.toString())) {
                    GlossaryView glossaryView = new GlossaryView(this);
                    linkVO.setLinkView(null, null, null, null, null, glossaryView, linkVideoView);
                }
                if (linkVO.getIconUrl().contains(Constants.FLEXIBLE_ICON_URL_HITAREA)) {
                    if (linkVO.getAlpha().equals("100")) {
                        customizeLinkMarkups(linkVO, null, null, "", Color.TRANSPARENT, Color.TRANSPARENT, markupVisibility);
                    } else {
                        linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                        customizeLinkMarkups(linkVO, null, null, "", Color.TRANSPARENT, Color.TRANSPARENT, markupVisibility);
                    }
                }
                if (SDKManager.getInstance().isTeacherExclusive()) {
                    if (type.toString().equalsIgnoreCase(LinkVO.LinkType.MULTIPLE_LINK.toString())) {
                        if (linkVO.getIconType().equalsIgnoreCase(LinkVO.Icon_Type.TEACHER_ICON.toString())) {
                            linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                            customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.markup_icon_bg), PlayerUIConstants.TEACHER_ICON, PlayerUIConstants.OS_LINK_IC_DOCUMENT_UNSELECTED_FC, 0, markupVisibility);
                        } else if (linkVO.getIconType().equalsIgnoreCase(LinkVO.Icon_Type.INVISIBLE.toString())) {
                            linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                            customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.transparent), "", Color.TRANSPARENT, Color.TRANSPARENT, markupVisibility);
                        } else if (linkVO.getIconType().equalsIgnoreCase(LinkVO.Icon_Type.NORMAL.toString())) {
                            linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                            customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.link_icon_bg), PlayerUIConstants.OS_LINK_IC_MULTILINK_TEXT, PlayerUIConstants.OS_LINK_IC_MULTILINK_UNSELECTED_FC, 0, markupVisibility);
                        }
                    } else if (linkVO.getIconUrl().contains(LinkVO.Icon_Type.TEACHER_ICON.toString())) {
                        if (accountType.equalsIgnoreCase(Constants.TEACHER)) {
                            linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                            customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.link_icon_bg), PlayerUIConstants.TEACHER_ICON, PlayerUIConstants.OS_LINK_IC_DOCUMENT_UNSELECTED_FC, 0, markupVisibility);
                        } else if (accountType.equalsIgnoreCase(Constants.STUDENT)) {
                            linkVO.setLinkView(linkView, null, null, null, null, null, linkVideoView);
                            customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.transparent), "", Color.TRANSPARENT, Color.TRANSPARENT, markupVisibility);
                        }
                    }
                }
                if (linkVO.getIconUrl() != null && linkVO.getIconUrl().contains("flexibleicon.png")
                        || linkVO.isFlexible() || linkVO.getAlpha().equalsIgnoreCase("0")
                        || linkVO.getTooltip().contains("Hiden") || linkVO.getTooltip().contains("hiden")) {
                    customizeLinkMarkups(linkVO, typeface, getResources().getDrawable(R.drawable.transparent), "", Color.TRANSPARENT, Color.TRANSPARENT, markupVisibility);
                }
            }
            SDKManager.getInstance().setAllMarkupsVO(pageVo.getFolioID(), _objVO);
        }
    }

    private void getReaderTyface() {

        String fontfile = com.hurix.commons.utils.Utils.getFontFilePath();
        if (fontfile != null && !fontfile.isEmpty()) {
            typeface = Typefaces.get(this, fontfile);
        } else {
            typeface = Typefaces.get(this, "kitabooread.ttf");
        }
    }

    private void customizeLinkMarkups(LinkVO _linkVO, Typeface typeface, Drawable drawable, String markupText, int markupTextColor, int markupBackgroundColor, int markupVisibility) {
        _linkVO.setTypeface(typeface);
        _linkVO.setDrawable(drawable);
        _linkVO.setMarkupText(markupText);
        _linkVO.setMarkupTextColor(markupTextColor);
        _linkVO.setMarkupBackgroundColor(markupBackgroundColor);
        _linkVO.setMarkupVisibility(markupVisibility);
    }

    private void initPrintPageView(String folioid) {

        PrintPageIconView printPageView = new PrintPageIconView(this);
        printPageView.setResourceId(printPageView);
        printPageView.setUpIconFonts(com.hurix.commons.utils.Utils.getFontFilePath());

        printPageView.setlistner(new PrintPageActionListner() {

            @Override
            public void onPrintPageTap(PrintPageIconView v) {
                if (mReaderType == EBookType.FIXEDEPUB) {
                    renderView.printCurrentChapter(v, waterMarkText);
                } else {
                    doPrint(v);
                }
            }
        });

        renderView.setPrintPageView(printPageView, folioid);
        mPrintPageView = printPageView;

    }

    private void clearAllFIDDropDown() {

        if (!isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

            clearAllFIBFromPage(currentFoliIdPrev);

            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    SDKManager.getInstance().setClearAllClicked(true);
                    getPenFromDB(currentFoliIdPrev);
                    //clearAllPenFromPage(currentFoliIdPrev);
                    if (SDKManager.getInstance().isClearAllClicked()) {
                        SDKManager.getInstance().setClearAllClicked(false);
                        if (mReaderType == EBookType.FIXEDKITABOO) {

                            renderView.loadAsset(AssetType.HighlightNote, currentFoliIdPrev);

                        }
                        if (mReaderType == EBookType.FIXEDEPUB) {

                            renderView.loadAsset(AssetType.PentoolUndoAndDelete, currentFoliIdPrev);
                        }
                    }
                }
            }, 100);

            clearAllFIBFromPageNext(currentFoliId);

            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    getPenFromDB(currentFoliIdPrev);
                    SDKManager.getInstance().setClearAllClicked(true);
                    //clearAllPenFromPageNext(currentFoliId);
                    if (SDKManager.getInstance().isClearAllClicked()) {
                        SDKManager.getInstance().setClearAllClicked(false);
                        if (mReaderType == EBookType.FIXEDKITABOO) {

                            renderView.loadAsset(AssetType.HighlightNote, currentFoliId);

                        }
                        if (mReaderType == EBookType.FIXEDEPUB) {

                            renderView.loadAsset(AssetType.PentoolUndoAndDelete, currentFoliId);
                        }
                    }
                }
            }, 300);

        } else {
            clearAllFIBFromPage(currentFoliId);
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    //clearAllPenFromPageNext(currentFoliId);
                    getPenFromDB(currentFoliId);
                    SDKManager.getInstance().setClearAllClicked(true);
                    if (SDKManager.getInstance().isClearAllClicked()) {
                        SDKManager.getInstance().setClearAllClicked(false);
                        if (mReaderType == EBookType.FIXEDKITABOO) {

                            renderView.loadAsset(AssetType.HighlightNote, currentFoliId);

                        }
                        if (mReaderType == EBookType.FIXEDEPUB) {

                            renderView.loadAsset(AssetType.PentoolUndoAndDelete, currentFoliId);
                        }
                    }
                }
            }, 100);
        }
        //DatabaseManager.getInstance(this).clearFibDataPerPage(userID, bookId,0,currentFoliId,);
        //  GlobalDataHolder.getInstance().setClearAllClicked(true);
        // updatePenAndActivityData();
    }

    /**
     * Responsible to get the bookmark data from DB for each page
     *
     * @param pageVo : page object
     */
    private void getBookmarkDataFromDB(IPage pageVo, String folioID) {

        ArrayList<BookMarkVO> bookMarkVOs = DatabaseManager.getInstance(this).getBookMarkOnPage(userID, folioID, bookId);
        if (bookMarkVOs.size() == 0) {

            //if no existing bookmark data ,create dummy bookmark vo
            BookMarkVO vo = new BookMarkVO();
            vo.setBookmarkPageID(pageVo.getPageID());
            vo.setFolioID(pageVo.getFolioID());
            vo.setChapterID(pageVo.getChapterID());
            if (mReaderType == EBookType.FIXEDKITABOO) {

                vo.setChaptername(pageVo.getChapterName() + "" + getResources().getString(R.string.bookmark_page_label) + "" + pageVo.getFolioID());
            } else if (mReaderType == EBookType.FIXEDEPUB) {
                if (pageVo.getChaptertittle() == null) {
                    vo.setChaptername(getResources().getString(R.string.bookmark_page_label) + "" + pageVo.getFolioID());
                } else {
                    vo.setChaptername(pageVo.getChaptertittle());
                }
            } else {
                vo.setChaptername(pageVo.getChaptertittle());
            }
            bookMarkVOs.add(vo);
        }
        SDKManager.getInstance().setBookmarkByFolioid(pageVo.getFolioID(), bookMarkVOs);
        if (renderView != null) {
            renderView.setBookmarkData(bookMarkVOs);
        }
    }

    private void setCurrentPagePrintData(IPage pageVo) {
        if (renderView != null) {
            if (printablePagelist != null && printablePagelist.size() > 0) {
                for (int i = 0; i < printablePagelist.size(); i++) {
                    if (printablePagelist.get(i).equalsIgnoreCase(pageVo.getChapterName())) {
                        renderView.setPrintPageData(pageVo);
                    }

                }
            }
        }
    }

    /**
     * Called on each page change / swipe
     *
     * @param index
     * @param currentPageData
     */
    @Override
    public void onPageChanged(final int index, IPage[] currentPageData) {

        //disableAllAudioSyncIconBorder();
        //disableAudioSync();

        // if(isTorClicked){
        if (mReaderType == EBookType.FIXEDKITABOO) {
            if (mCurrentPageData != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection() != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection().size() > 0 && currASList != null)
                currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[0]).getLinkCollection());
        }
        //}

        if (mBottomBookmarkFragment != null) {
            mBottomBookmarkFragment.dismiss();
        }
        if (mReaderType == EBookType.REFLOWEPUB && SDKManager.getInstance().isMediaOverlay() && mReadAloudIcon != null) {
            if (SDKManager.getInstance().getCurrentPageVO() != null && SDKManager.getInstance().getMediaOverlayMap() != null && SDKManager.getInstance().getMediaOverlayMap().size() > 0 && SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(SDKManager.getInstance().getCurrentPageVO().getChaptertittle())) != null) {
                toggleAudioSyncButton(mReadAloudIcon, false);
            } else if (SDKManager.getInstance().getCurrentPageVO() != null && SDKManager.getInstance().getMediaOverlayMap() != null && SDKManager.getInstance().getMediaOverlayMap().size() > 0 && SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(SDKManager.getInstance().getCurrentPageVO().getChaptertittle())) == null) {
                toggleAudioSyncButton(mReadAloudIcon, true);
            }
        }

        if (currentPageData != null)
            mcurrentPageData = currentPageData;
        if (mReaderType == EBookType.FIXEDKITABOO) {


            /*if(mIsElasticSearch)
            {
                searchWordWiseIterationPosition = SDKManager.getInstance().getCurrentPositionOfPageSearchData();
            }*/

            ArrayList<PDFPage> pdfPageList = new ArrayList<>();
            pdfPageList.add((PDFPage) currentPageData[0]);
            if (currentPageData.length > 1) {
                pdfPageList.add((PDFPage) currentPageData[1]);
            }
            if (SDKManager.getInstance().isReviewMode() || SDKManager.getInstance().isNewTeacherReviewModeOn()) {
                mListOfLoadedPage.addAll(pdfPageList);
            }
            SDKManager.getInstance().setCurrentActivatedPageList(pdfPageList);
        }

        //save pagetracking data

        if (mCFIDArrayList.size() == 0) {
                /*new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {*/
            mCurrentPageData = SDKManager.getInstance().getCurrentReflowablePageVO();
            if (mCurrentPageData != null) {
                //if (!(mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                if (mLastReflowPage != null && mReaderType == EBookType.REFLOWEPUB) {

                    savePageTrackingDataForReflow(mLastReflowPage);
                }
                mLastReflowPage = SDKManager.getInstance().getCurrentReflowablePageVO();
                mLastReflowPage.setOpenTimeStamp(Utils.getDateTime());
                // }
            }
                    /*}

                }, 1000);*/
            // }
        }


        if (currentPageData != null) {
            if (mLastPage != null) {
                if (mReaderType != EBookType.REFLOWEPUB) {
                    savePageTrackingData(mLastPage);
                }
            }
            mLastPage = currentPageData;

            if (!SDKManager.getInstance().isReviewMode()) {
                SDKManager.getInstance().clearPenMarkerVO();
            }
            IPage currPage;
            if (currentPageData.length > 1) {
                currPage = currentPageData[1];
            } else {
                currPage = currentPageData[0];
            }
            if (currPage != null) {
                currentFoliIdPrev = currentPageData[0].getFolioID();
                currentFoliId = currPage.getFolioID();
                mCurrentPageData = currPage;
                int pIndex = 0;
                if (SDKManager.getInstance().getCurrentPageIndex() == 0 && !isMobile && (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand))) {
                    pIndex = 1;
                }
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (mCurrentPageData != null && ((PDFPage) mcurrentPageData[pIndex]).getLinkCollection() != null && ((PDFPage) mcurrentPageData[pIndex]).getLinkCollection().size() > 0)
                        currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[pIndex]).getLinkCollection());
                    else if (!isMobile && (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand))) {

                        if (mCurrentPageData != null && ((PDFPage) mcurrentPageData[1]).getLinkCollection() != null && ((PDFPage) mcurrentPageData[1]).getLinkCollection().size() > 0)
                            currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[1]).getLinkCollection());

                    }
                    /*if(currASList!=null && currASList.size()>0 && currASList.get(0).getLinkID()>0)
                    computeAudioSyncAsWordId(((ArrayList<AudioSyncWordInfo>) sentenceAudioMap.get(currASList.get(0).getLinkID())),currASList.get(0).getPageID());*/
                }

            }

            if (mReaderType == EBookType.FIXEDKITABOO) {
                mTextChapterTitle.setText(mCurrentPageData.getChapterName());
            } else {
                if (mTextChapterTitle != null && mCurrentPageData != null) {
                    if (SDKManager.getInstance().getCurrentPageVO() != null) {
                        mAudioPageData = SDKManager.getInstance().getCurrentPageVO();
                    } else {
                        mAudioPageData = mCurrentPageData;
                    }

                    mTextChapterTitle.setText(mCurrentPageData.getChaptertittle().trim());
                }
            }


            mCurrentPageDataPrev = currentPageData[0];
        }
        currentviewpagerindex = index;
        if (null != seekBar) {
            seekBar.setProgress(index);
        }
        SDKManager.getInstance().setIsmobile(isMobile);

        if (mReaderType == EBookType.FIXEDKITABOO) {
            if (mThumbnailColl != null && isMobile) {
                if (mThumbnailColl.get(currentviewpagerindex).getPageID() != 0) {
                    if (mReaderType == EBookType.FIXEDKITABOO) {
                        mThumbnailColl.get(0).setBookpath(getIntent().getStringExtra(MEDIA_PATH));
                    }
                }
                if (SDKManager.getInstance().isHistoryNavigationRecordRequired()) {
                    SDKManager.getInstance().updatePageHistory(index);
                } else {
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                }

            } else {
                if (mThumbnailColl != null && this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand))) {
                    if (mReaderType == EBookType.FIXEDKITABOO) {
                        if (currentviewpagerindex == 0) {
                            currentviewpagerindexl1 = currentviewpagerindexl1 + 1;
                        } else {
                            int pagemaker = currentviewpagerindex * 2;
                            currentviewpagerindexl1 = pagemaker;
                            currentviewpagerindexl2 = pagemaker + 1;
                        }
                    }
                }
                if (SDKManager.getInstance().isHistoryNavigationRecordRequired()) {
                    if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                        SDKManager.getInstance().setPagehistoryorientation(0);
                    } else {
                        SDKManager.getInstance().setPagehistoryorientation(1);
                    }
                    if (SDKManager.getInstance().isConfigchanged()) {
                        SDKManager.getInstance().setConfigchanged(false);
                    } else {
                        SDKManager.getInstance().updatePageHistory(index);
                    }
                } else {
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                }
            }
        } else if (mReaderType == EBookType.FIXEDEPUB) {

            if (SDKManager.getInstance().isPageHistoryRequired()) {

                SDKManager.getInstance().setPageHistoryPosition(SDKManager.getInstance().getHistoryPageIndex());

                SDKManager.getInstance().updateHistory(SDKManager.getInstance().getPageHistoryPosition());
            }
        }


        hideFragment();
        hideDialog();
        Utils.hideKeyboard(this);
       /* if(null!=topActionbar) {
            replaceCustomBarwithActionBar();
        }*/
        if (null != topActionbar) {
            //commented for crash issue in epub books
            // replaceCustomBarwithActionBar();
        }


        //Stop Markup Video
        if (InlineVideoHelper.getVideoInstance(this).getPlayerRef() != null && InlineVideoHelper.getVideoInstance(this).getPlayerRef().getPlayerHelper() != null) {
            InlineVideoHelper.getVideoInstance(this).getPlayerRef().getPlayerHelper().close();
        }

        //TOR Click Handled For Markup
        if (torlink != null) {
            //playClickedMarkUpByResourceId(currPage);
            if (torlink.getType().toString().equalsIgnoreCase(LinkVO.LinkType.VIMEO_VIDEO.toString()) || torlink.isInline()) {
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        playClickedMarkUpByResourceId(torlink);
                    }
                }, 2000);
            } else {
                playClickedMarkUpByResourceId(torlink);
            }


        }
        if (snackbar != null) {
            snackbar.dismiss();
        }

        SDKManager.getInstance().setCurrentFolioId(currentFoliId);
        if (mReaderType == EBookType.REFLOWEPUB) {
            ArrayList<BookMarkVO> bookMarkVOs = DatabaseManager.getInstance(this).
                    getBookMarkOnPage(userID, currentFoliId, bookId);
            // SDKManager.getInstance().getmListOfBookMarkByFolio().get(currentFoliId).clear();
            SDKManager.getInstance().setBookmarkByFolioid(currentFoliId, bookMarkVOs);
           /* if (renderView != null) {
                renderView.setBookmarkData(bookMarkVOs);
            }*/
        }

      /*  if(!isReadAloudRequired && !currentFoliId.equalsIgnoreCase(lastReadAloudFolioID)){
            if (mAudioManager!=null)
                mAudioManager.close();
            if (topActionbar != null) {
                topActionbar.removeAllActionBarItem();
            }
            setTopActionbarItem();
            audioIsPause=true;
            SDKManager.getInstance().setReadAloudPlaying(false);
        }*/
        if (SDKManager.getInstance().isPageTouched()) {
            isReadAloudRequired = false;
        }
        if (SDKManager.getInstance().isReadAloudPlaying() && !SDKManager.getInstance().isAudioSyncPlaying() && mAudioManager == null && readAloudType == null) {
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    playReadAloudAudio();
                }
            }, 100);
        } else if (SDKManager.getInstance().isReadAloudPlaying() && !SDKManager.getInstance().isAudioSyncPlaying() && mAudioManager == null && readAloudType != null) {
            int time = 100;
            if ((mcurrentPageData[0]) != null && (((mcurrentPageData[0]).getMarkupsList() != null || ((PDFPage) mcurrentPageData[0]).getLinkCollection() == null) || (mcurrentPageData[0]).getMarkupsList().get(0).getLinkView() == null)) {
                time = 1000;
            } else if (!isMobile && this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                time = 1000;
            }

            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (SDKManager.getInstance().isReadAloudModeReqOnNavigation())
                        playReadAloudAudio();
                }
            }, time);
        } else if (!isReadAloudRequired && !isOrientationChanged && SDKManager.getInstance().isReadAloudPlaying() && !SDKManager.getInstance().isAudioSyncPlaying()) {
            SDKManager.getInstance().setPageTouched(false);
            if (mAudioManager != null)
                mAudioManager.close();
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    playReadAloudAudio();
                }
            }, 1000);
        } else if (readAloudType != null && readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME) && !isOrientationChanged && SDKManager.getInstance().isReadAloudPlaying() && !SDKManager.getInstance().isAudioSyncPlaying()) {
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    playReadAloudAudio();
                }
            }, 200);
        } else if (SDKManager.getInstance().isReadAloudPlaying() && !SDKManager.getInstance().isAudioSyncPlaying() && isOrientationChanged && mAudioManager != null && mAudioManager.getMediaPlayer().isPlaying() && readAloudType != null && (readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY) || readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME)) && SDKManager.getInstance().isReadAloudModeReqOnNavigation()) {
            if (mAudioManager != null)
                mAudioManager.close();
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME) && orientantionChangeForReadAloud) {
                        playReadAloudAudio();
                        orientantionChangeForReadAloud = false;
                    } else if (readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY))
                        playReadAloudAudio();
                }
            }, 200);
        } else if (readAloudType != null) {
            if (SDKManager.getInstance().isReadAloudPlaying() && isOrientationChanged && readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY) || readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME)) {
                if (mAudioManager != null && mAudioManager.getMediaPlayer().isPlaying() && !isOrientationChanged)
                    isOrientationChanged = false;
                isReadAloudRequired = true;
                if (readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME))
                    orientantionChangeForReadAloud = true;
            }
        }
        /*else if(readAloudType!=null && readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME) && mAudioManager!=null && !mAudioManager.getMediaPlayer().isPlaying()){
            closeReadAloud();
        }*/
        /*else if(!isOrientationChanged && SDKManager.getInstance().isReadAloudPlaying()){
            if (mAudioManager!=null)
                mAudioManager.close();
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    playReadAloudAudio();
                }
            }, 1000);
        }*/
        else if (!SDKManager.getInstance().isReadAloudPlaying() && readAloudType == null && mAudioManager != null && !SDKManager.getInstance().isAudioSyncPlaying()) {
            /*if (mAudioManager != null)
                mAudioManager.close();
            if (topActionbar != null) {
                topActionbar.removeAllActionBarItem();
            }*/
            setTopActionbarItem();
            if (readAloudType == null) {
                clearAudioSyncRect();
                closeReadAloud();
                if (mTextChapterTitle != null)
                    mTextChapterTitle.setText(mCurrentPageData.getChapterName());
                clearAudioSyncData();
            }
        } else if (SDKManager.getInstance().isReadAloudPlaying()) {
            isReadAloudRequired = true;
        }

        if (mReaderType == EBookType.FIXEDKITABOO && mReadAloudIcon != null && !audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
            if (currASList != null && currASList.size() > 0 && currASList.get(0).getFolioID().toString().equalsIgnoreCase(currentFoliId)) {
                toggleAudioSyncButton(mReadAloudIcon, false);
            } else {
                toggleAudioSyncButton(mReadAloudIcon, true);
            }
        }

        if (!SDKManager.getInstance().isReadAloudPlaying() && readAloudType != null && !readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY) && !SDKManager.getInstance().isAudioSyncPlaying()) {
            if (mAudioManager != null)
                mAudioManager.close();
        }

        if (SDKManager.getInstance().isAudioSyncPlaying() && mAudioManager != null && mAudioManager.getMediaPlayer().isPlaying() && !isOrientationChanged) {
            closeReadAloud();
            mTextChapterTitle.setText(mCurrentPageData.getChapterName());
            clearAudioSyncData();
        } else if (isOrientationChanged && mAudioManager != null && !mAudioManager.getMediaPlayer().isPlaying())
            isOrientationChanged = false;
        else if (isOrientationChanged && isMobile)
            isOrientationChanged = false;
    }

    private void currListofAudioSyncMarkup(ArrayList<LinkVO> linkCollection) {

        if (currASList != null)
            currASList.clear();

        for (LinkVO linkVO : linkCollection) {
            if (linkVO.getType().equals(LinkVO.LinkType.AUDIO_SYNC) || linkVO.getType().equals(LinkVO.LinkType.AUDIO))
                currASList.add(linkVO);
        }
    }


    private void savePageTrackingData(IPage[] currpage) {
        if (currpage != null) {
            for (IPage page : currpage) {
                if (page != null) {
                    if (!page.getFolioID().isEmpty()) {
                        int duration = (int) Utils.getTimeSpentInSecond(page.getOpenTimeStamp(), Utils.getDateTime());
                        //if (duration > 2) {
                        JSONObject obj = new JSONObject();
                        try {
                            obj.put("accessTimeStamp", Utils.getDateTime());
                            obj.put("timeSpent", duration);
                            obj.put("chapterID", page.getChapterID());
                    /*if (mReaderType != null && page.getChaptertittle() != null && !page.getChaptertittle().isEmpty()
                            && (mReaderType == EBookType.FIXEDEPUB || mReaderType == EBookType.REFLOWEPUB)) {
                        obj.put("chapterName", page.getChapterID());
                    } else {*/
                            obj.put("chapterName", page.getChapterID());
                            //}

                            obj.put("bookId", bookId);
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                        String uuid = UUID.randomUUID().toString();
                        AnalyticsManager.getInstance(this).TrackEvent(EventName.TIMESPENTON_PAGE.toString(), uuid, page.getFolioID(), obj.toString());
                        //}
                    }
                }
            }
        }
    }


    /* TODO Need to un comment this code after CFID analytics implemented*/
    private void savePageTrackingDataForReflow(IPage currpage, ArrayList<String> cfidList, boolean isFromBackpressed) {

        if (TextUtils.isEmpty(mCfiOpenTimeStamp)) {
            return;
        }
        int duration = (int) Utils.getTimeSpentInSecond(mCfiOpenTimeStamp, Utils.getDateTime());
        if (cfidList.size() > duration) {
            return;
        }

        Collections.reverse(cfidList);
        int result = (duration / cfidList.size());

        for (int i = 0; i < cfidList.size(); i++) {
            if (!currpage.getFolioID().isEmpty() && !TextUtils.isEmpty(cfidList.get(i))) {

                //if (duration > 2) {
                JSONObject obj = new JSONObject();
                try {
                    obj.put("accessTimeStamp", Utils.getDateTime());
                    obj.put("timeSpent", result);
                    obj.put("chapterID", currpage.getChapterID());
                    if (mReaderType != null && currpage.getChaptertittle() != null && !currpage.getChaptertittle().isEmpty()
                            && (mReaderType == EBookType.FIXEDKITABOO || mReaderType == EBookType.REFLOWEPUB)) {
                        obj.put("chapterName", currpage.getChaptertittle());
                    } else {
                        obj.put("chapterName", currpage.getChapterName());
                    }
                    obj.put("bookId", bookId);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                String uuid = UUID.randomUUID().toString();
                AnalyticsManager.getInstance(this).TrackEvent(EventName.TIMESPENTON_PAGE.toString(), uuid, cfidList.get(i), obj.toString());
                //}
            }
        }
    }

    /* TODO Need to comment this code after CFID analytics implemented*/
    private void savePageTrackingDataForReflow(IPage currpage) {
        //for (IPage page : currpage) {
        if (!currpage.getFolioID().isEmpty()) {
            int duration = (int) Utils.getTimeSpentInSecond(currpage.getOpenTimeStamp(), Utils.getDateTime());
            //if (duration > 2) {
            JSONObject obj = new JSONObject();
            try {
                obj.put("accessTimeStamp", Utils.getDateTime());
                obj.put("timeSpent", duration);
                obj.put("chapterID", currpage.getChapterID());
                if (mReaderType != null && currpage.getChaptertittle() != null && !currpage.getChaptertittle().isEmpty()
                        && (mReaderType == EBookType.FIXEDKITABOO || mReaderType == EBookType.REFLOWEPUB)) {
                    obj.put("chapterName", currpage.getChapterID());
                } else {
                    obj.put("chapterName", currpage.getChapterID());
                }
                obj.put("bookId", bookId);
            } catch (JSONException e) {
                e.printStackTrace();
            }
            String uuid = UUID.randomUUID().toString();
            AnalyticsManager.getInstance(this).TrackEvent(EventName.TIMESPENTON_PAGE.toString(), uuid, currpage.getFolioID(), obj.toString());
            //}
        }
        //}
    }
   /* private void setPageNo()
    {
        if(null != tvPageNumber && mTotalPage != null && null != currentFoliId && !(currentFoliId.isEmpty()))
        {
            playClickedMarkUpByResourceId(currentPageData);
        }
    }*/

    private void setPageNo() {
        if (null != tvPageNumber && mTotalPage != null && null != currentFoliId && !(currentFoliId.isEmpty())) {
            if (isMobile || mReaderType == EBookType.REFLOWEPUB) {
                tvPageNumber.setText(getResources().getString(R.string.reader_page) + currentFoliId + " " + getResources().getString(R.string.reader_page_of) + " " + mTotalPage.size());
            } else {
                String prevFolioId = getPrevFoliId(currentFoliId);
                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !(prevFolioId.isEmpty())) {
                    tvPageNumber.setText(getResources().getString(R.string.reader_page) + " " + prevFolioId + " - " + currentFoliId + " " + getResources().getString(R.string.reader_page_of) + " " + mTotalPage.size());
                } else {
                    tvPageNumber.setText(getResources().getString(R.string.reader_page) + currentFoliId + " " + getResources().getString(R.string.reader_page_of) + " " + mTotalPage.size());
                }
            }
        }
    }

    private String getPrevFoliId(String currentFoliId) {
        if (mTotalPage != null) {
            for (int i = 0; i < mTotalPage.size(); i++) {
                IPage vo = mTotalPage.get(i);
                String fname = vo.getFolioID();
                if (i > 0 && currentFoliId.equalsIgnoreCase(fname)) {
                    IPage prevVo = mTotalPage.get(i - 1);
                    String prevFolioId = prevVo.getFolioID();
                    return null != prevFolioId ? prevFolioId : "";
                }
            }
            return "";
        }
        return "";
    }

    /**
     * Called on each page vertical scrolling
     */
    @Override
    public void onPageScrolling() {

    }

    /**
     * Invoked when page scrolled.
     *
     * @param ProgressPercent :Page scrolled percentage.
     */
    @Override
    public void onPageScrollPercentage(int ProgressPercent) {
        Log.i("onPageScrollPercentage", "" + ProgressPercent);
    }

    /**
     * Invoked when page scrolled.
     *
     * @param currentPageNumber             : current Page number chapter-Wise.
     * @param totalPageInCurrentChapter     :total Page number chapter-Wise.
     * @param currentBookPageNumber         :current Page number book-Wise.
     * @param totalBookPageInCurrentChapter :total Page number book-Wise.
     */
    @Override
    public void onPageScrollVirtualPageCount(int currentPageNumber, int totalPageInCurrentChapter, int currentBookPageNumber, int totalBookPageInCurrentChapter) {
        Log.e("TAG", "onPageScrollVirtualPageCount: " + currentPageNumber + " " + totalPageInCurrentChapter + " " + currentBookPageNumber + " " + totalBookPageInCurrentChapter);
    }


    /**
     * Called on once the text seleted for highlight / contextual note
     *
     * @param rect            : rect of highlighted text
     * @param highlightedText
     */
    @Override
    public void onPageTextSelected(Rect rect, String highlightedText) {


        hideActionBar();
        if (actionView != null) {
            actionView.disableHighlightItem(ACTION_ID_DELETE);
            //actionView.setSelectedBackground(ACTION_ID_HIGHLIGHT_YELLOW, Utils.getCircleDrawableWithStroke(PlayerUIConstants.MOB_HC_RED_IC_UNSELECTED_BGC, PlayerUIConstants.MOB_HC_RED_IC_UNSELECTED_BGC, 0));
            //actionView.setSelectedBackground(ACTION_ID_HIGHLIGHT_RED, Utils.getCircleDrawableWithStroke(PlayerUIConstants.MOB_HC_RED_IC_UNSELECTED_BGC, PlayerUIConstants.MOB_HC_RED_IC_UNSELECTED_BGC, 0));

        }
        setDefaultBackgroundOfHighlightColors();
        mHighlightedText = highlightedText.trim();

    }

    private void setDefaultBackgroundOfHighlightColors() {
        for (int i = 0; i < mHighlightIdCollection.size(); i++) {
            actionView.setSelectedBackground(mHighlightIdCollection.get(i), null);
        }
    }

    /**
     * call back on click of existing note icon on renderer
     *
     * @param highlightVo : existing highlight object
     */
    @Override
    public void onNoteClick(HighlightVO highlightVo) {

        // contextual and sticky

        if (Utils.isOnline(this) && arrayListforSharingSetting == null) {
            mServicehandler.getClassesOfBook(userID, bookId, KitabooSDKModel.getInstance().getUserToken(), this);
        }
        String color = "";
        color = highlightVo.getColor();

        if (!isPentoolBarOpen) {

            initStickynote(highlightVo, false);
            mStickyNotePopup.setNoteData(highlightVo.getNoteData());
            mStickyNotePopup.setBackgroundColor(color);
            mStickyNotePopup.show();
            mStickyNotePopup.setCanceledOnTouchOutside(true);
        }

        /*if (highlightVo.getHighlightedText().isEmpty()) {
            initStickynote(highlightVo , false);
            mStickyNotePopup.setNoteData(highlightVo.getNoteData());
            mStickyNotePopup.setBackgroundColor(highlightVo.getColor());
            mStickyNotePopup.show();
        } else {
            initStickynote(highlightVo , false);
            *//*initNotePopup(highlightVo.getHighlightedText(), highlightVo);
            notepopup.setNoteData(highlightVo.getNoteData());
            notepopup.show();*//*
        }*/


    }

    @Override
    public void onStickynoteLongpress(View view) {
        renderView.startDragView(view);
    }

    /**
     * responsible to close-DictionaryView
     */
    @Override
    public void closeDictionaryView() {

    }

    /**
     * callback on highlight rect draw completion on renderer
     *
     * @param highlightvo : Object contains require the details of highlight
     */
    @Override
    public void onHighlightDrawComplete(HighlightVO highlightvo) {


        if (highlightvo != null) {
            renderView.isHighlightActive(false);
            saveHighlight(highlightvo);
            getHighlightFromDB(highlightvo.getFolioID());
            if (mReaderType == EBookType.FIXEDKITABOO) {

                renderView.loadAsset(AssetType.HighlightNote, highlightvo.getFolioID());
            }

            if (fbEventHighlightId == 0 || highlightvo.getLocalID() != fbEventHighlightId) {

                fbEventHighlightId = highlightvo.getLocalID();

               /* Bundle bundle = new Bundle();
                bundle.putString(FirebaseConstants.HIGHLIGHT_COLOR, highlightvo.getColor());

                FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.HIGHLIGHT_COLOR_CLICK, bundle);*/

            }


        }
    }

    private void saveAnalyticsForHighlightShare(HighlightVO highlightvo, String event) {
        String eventname = "";
        eventname = event;

        JSONObject obj = new JSONObject();
        try {
            obj.put("createdOn", highlightvo.getDateTime());
            obj.put("startX", highlightvo.getX());
            obj.put("startY", highlightvo.getY());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
            AnalyticsManager.getInstance(this).TrackEvent(eventname, highlightvo.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", obj.toString());
        } else {
            AnalyticsManager.getInstance(this).TrackEvent(eventname, highlightvo.getLocalID() + "", highlightvo.getFolioID() + "", obj.toString());
        }
    }

    private void saveAnalytics(HighlightVO highlightvo, String event) {
        String eventname = "";
        if (event.isEmpty()) {
            eventname = EventName.HIGHLIGHT_CREATED.toString();
            if (!highlightvo.getNoteData().isEmpty()) {
                eventname = EventName.NOTE_CREATED.toString();
            } else {
                if (highlightvo.isImportant()) {
                    eventname = EventName.IMP_HIGHLIGHT_CREATED.toString();
                }
            }
        } else {
            eventname = event;
        }

        JSONObject obj = new JSONObject();
        try {
            obj.put("createdOn", highlightvo.getDateTime());
            obj.put("startX", highlightvo.getX());
            obj.put("startY", highlightvo.getY());
        } catch (JSONException e) {
            e.printStackTrace();
        }
        if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
            AnalyticsManager.getInstance(this).TrackEvent(eventname, highlightvo.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", obj.toString());
        } else {
            AnalyticsManager.getInstance(this).TrackEvent(eventname, highlightvo.getLocalID() + "", highlightvo.getFolioID() + "", obj.toString());
        }
    }


    private void saveAnalyticsForShare(HighlightVO highlightvo, String event) {
        String eventname = event;
        JSONObject obj = new JSONObject();
        try {
            obj.put("createdOn", highlightvo.getDateTime());
            obj.put("startX", highlightvo.getX());
            obj.put("startY", highlightvo.getY());
        } catch (JSONException e) {
            e.printStackTrace();
        }

        if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
            AnalyticsManager.getInstance(this).TrackEventForShare(eventname, highlightvo, mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", obj.toString());
        } else {
            AnalyticsManager.getInstance(this).TrackEventForShare(eventname, highlightvo, highlightvo.getFolioID(), obj.toString());
        }
    }


    /**
     * Callback on click of  existing highlight on renderer
     *
     * @param existHighlight : existing highlight object
     */
    @Override
    public void onHighlightTaped(HighlightVO existHighlight) {
        if (!isPentoolBarOpen) {
            GradientDrawable drawable = new GradientDrawable();
            drawable.setShape(GradientDrawable.OVAL);
            drawable.setStroke(1, Color.parseColor(themeUserSettingVo.getmKitabooMainColor()));
            String color = "";
            color = existHighlight.getColor();

            if (new HexValidator().validate(color)) {
                if (mHighlightColorCollection.get(color.toUpperCase()) != null) {
                    int actionId = mHighlightColorCollection.get(color.toUpperCase());
                    setDefaultBackgroundOfHighlightColors();
                    actionView.setSelectedBackground(actionId, drawable);
                    boolean isNoteSharedNCreatedByUser = existHighlight != null && existHighlight.getCreatedByUserVO() != null && existHighlight.getCreatedByUserVO().getUserID() == userID;
                    if (!isNoteSharedNCreatedByUser) // Receiver cannot delete the highlight
                        actionView.disableHighlightItem(ACTION_ID_DELETE);
                    else
                        actionView.enableHighlightItem(ACTION_ID_DELETE);
                } else if (mHighlightColorCollection.get(color.toLowerCase()) != null) {
                    int actionId = mHighlightColorCollection.get(color.toLowerCase());
                    setDefaultBackgroundOfHighlightColors();
                    actionView.setSelectedBackground(actionId, drawable);
                    boolean isNoteSharedNCreatedByUser = existHighlight != null && existHighlight.getCreatedByUserVO() != null && existHighlight.getCreatedByUserVO().getUserID() == userID;
                    if (!isNoteSharedNCreatedByUser) // Receiver cannot delete the highlight
                    {
                        actionView.disableHighlightItem(ACTION_ID_HIGHLIGHT_ORANGE);
                        actionView.disableHighlightItem(ACTION_ID_HIGHLIGHT_PINK);
                        actionView.disableHighlightItem(ACTION_ID_HIGHLIGHT_PURPLE);
                        actionView.disableHighlightItem(ACTION_ID_HIGHLIGHT_GREEN);
                        actionView.disableHighlightItem(ACTION_ID_HIGHLIGHT_BLUE);
                        actionView.disableHighlightItem(ACTION_ID_DELETE);
                    } else {
                        actionView.enableHighlightItem(ACTION_ID_HIGHLIGHT_ORANGE);
                        actionView.enableHighlightItem(ACTION_ID_HIGHLIGHT_PINK);
                        actionView.enableHighlightItem(ACTION_ID_HIGHLIGHT_PURPLE);
                        actionView.enableHighlightItem(ACTION_ID_HIGHLIGHT_GREEN);
                        actionView.enableHighlightItem(ACTION_ID_HIGHLIGHT_BLUE);
                        actionView.enableHighlightItem(ACTION_ID_DELETE);
                    }
                }

            }

        }


    }

    /**
     * Callback from page on bookmark created / updated
     *
     * @param bookmarkvo : Contains require details of Bookmark
     */
    @Override
    public void onBookmarkSave(BookMarkVO bookmarkvo) {

        // Save,delete and update bookmark in Database

        //FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.BOOKMARK_DATA_CLICK);


        if (bookmarkvo.getMode() == Constants.UGC_ITEM_MODE_NEW) {
            long dbid = DatabaseManager.getInstance(this).insertBookMark(bookmarkvo, userID, bookId);
            bookmarkvo.setLocalID(dbid);
            ArrayList<BookMarkVO> bookMarkVOs = DatabaseManager.getInstance(this).getBookMarkOnPage(userID, bookmarkvo.getFolioID(), bookId);
            SDKManager.getInstance().setBookmarkByFolioid(bookmarkvo.getFolioID(), bookMarkVOs);
            if (renderView != null) {
                //renderView.setBookmarkData(bookMarkVOs);
                renderView.setNewBookmarkData(bookMarkVOs);
            }

        } else if (bookmarkvo.getMode() == Constants.UGC_ITEM_MODE_MODIFIED) {
            DatabaseManager.getInstance(this).updateBookMark(bookmarkvo, userID, bookId);
        } else {
            boolean deleteSucess = DatabaseManager.getInstance(this).deleteORUpdateUGCData(bookmarkvo, userID, bookId);
            bookmarkvo.setBookmarkPageID(0);
            if (deleteSucess)
                bookmarkvo.setLocalID(-1);
        }
    }

    /**
     * Callback from page on bookmark tapped
     *
     * @param v BookMarkView
     */
    @Override
    public void onBookmarkTap(View v) {
        renderView.isHighlightActive(false);
        //  isHighlightActive = false;
    }

    /**
     * Callback on bookparsing completed
     *
     * @param book : Object contains require details
     *             :Toc list , pagelist, Booktype etc
     */
    @Override
    public void onBookLoaded(IBook book) {
        bookVo = book;
        if (com.hurix.commons.notifier.GlobalDataManager.getInstance().getmAudioEndListner() != null && com.hurix.commons.notifier.GlobalDataManager.getInstance().getmAudioEndListner().size() == 0) {
            com.hurix.commons.notifier.GlobalDataManager.getInstance().addAudioSyncListeners(this);
        }
        if (book.getaudioSyncWordInfos() != null && book.getaudioSyncWordInfos().size() > 0) {
            sentenceAudioMap = computeAudioSyncWords(book.getaudioSyncWordInfos());
        }
        if (bookTitle != null && !bookTitle.isEmpty()) {
            bookVo.setBookTitle(bookTitle);
        }
        mTocdata = book.getTocdata();
        SDKManager.getInstance().setTocdata(mTocdata);
        mTorData = book.getBookTorUserVoList();
        mSeachdata = book.getSearchlist();
        mReaderType = book.getReaderType();

        mTotalPage = book.getAllPageColl();
        renderView.getCurrentPageAudioSyncListReadAloud("");


        if (mReaderType == EBookType.REFLOWEPUB) {
            String key = KitabooSDKModel.getInstance().getUserID() + "_" +
                    SDKManager.getInstance().getGetLocalBookData().getBookID()
                    + "_" + PrefActivity.KEY_LAST_PAGE;
            final String lastPage = Utils.getSharedPreferenceStringValue(this, PrefActivity.SETTING_PANEL_PREF_NAME, key, "");
            if (lastPage.isEmpty()) {
                try {
                    JSONObject lastvisitedobj = new JSONObject(mLastpageSync);
                    Utils.insertSharedPrefernceStringValues(this, PrefActivity.SETTING_PANEL_PREF_NAME, key, lastvisitedobj.toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

        }

        if (mReaderType == EBookType.FIXEDKITABOO) {
            mPageDetailsSeekBarColl = book.getmThumbnailCollformobile();
            SDKManager.getInstance().setPagecoll(book.getmThumbnailCollformobile());
            pagecollsize = book.getmThumbnailCollformobile().size();
            SDKManager.getInstance().setPagecollsize(pagecollsize);
            gotopagecollection = book.getmThumbnailCollformobile();
            if (isMobile) {
                mThumbnailColl = book.getmThumbnailCollformobile();
            } else {
                mThumbnailColl = book.getmThumbnailColl();
            }
        }
        if (topActionbar != null) {
            topActionbar.removeAllActionBarItem();
        }
        setTopActionbarItem();
        if (bottomActionbar != null) {
            bottomActionbar.removeAllActionBarItem();
        }
        setUpBottomBar();
        if (mReaderType == EBookType.FIXEDKITABOO) {
            if (com.hurix.commons.notifier.GlobalDataManager.getInstance().getLastVisitedFolioID() != null &&
                    !com.hurix.commons.notifier.GlobalDataManager.getInstance().getLastVisitedFolioID().isEmpty()) {
                renderView.loadLastVisitedPage(com.hurix.commons.notifier.GlobalDataManager.getInstance().getLastVisitedFolioID());
            } else {
                renderView.loadLastVisitedPage(getLastVisitedPageID());
                Log.d("LocalLastVisitedFolioID", getLastVisitedPageID());
            }
        }

        drawImage();

        if (mIsElasticSearch) {
            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.SEARCH);
            hideThumbanilPanel();
            //    customSearchPanel(mIsElasticSearch);
            if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                hideDialog();
            }
            openSearchDialog();
            //  hideBottomBar();
            //hideActionBar();
            mIsSearchOpen = true;
            if (!getPackageManager().hasSystemFeature("org.chromium.arc.device_management")) {
                keyboardHeightProvider.start();
            }
            mSearchview.setQuery(mSearchQuery, true);

        }

        //  helpScreenViews();
        if (!TextUtils.isEmpty(fixedepubPrintPagelist)) {
            parsePrintablePagesinFixedEpub(fixedepubPrintPagelist);
        }


        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if (getResources().getBoolean(R.bool.isHelpvisible)) {
                   /* if (!DBController.getInstance(PlayerActivity.this).getManager().isBookPlayerHelpScreenSeen(UserController
                            .getInstance(PlayerActivity.this).getUserVO().getUserID()) || Utils.getSharedPreferenceBooleanValue(getBaseContext(),
                            Constants.HELPSCREEN_REQUIRED_READER, false)) {
                        if (!SDKManager.getInstance().isNewTeacherReviewModeOn() && getResources().getConfiguration().orientation != Configuration.ORIENTATION_PORTRAIT) {
                            statusBarHeightInLandscape();
                            helpScreenViewsLandscape();
                        } else {
                            statusBarHeight(getResources());
                            helpScreenViews();
                        }
                    } else {
                        // mainLayout.setVisibility(View.GONE);
                    }*/
                } else {
                    // mainLayout.setVisibility(View.GONE);
                }
            }
        }, 500);
    }

    private HashMap computeAudioSyncWords(ArrayList<AudioSyncWordInfo> list) {
        HashMap hashMap = new HashMap();
        for (AudioSyncWordInfo audioSyncWordInfo : list) {
            if (hashMap.get(audioSyncWordInfo.linkId) != null) {
                ArrayList repeatedList = ((ArrayList) hashMap.get(audioSyncWordInfo.linkId));
                repeatedList.add(audioSyncWordInfo);
                hashMap.put(audioSyncWordInfo.linkId, repeatedList);
            } else {
                ArrayList arrayList = new ArrayList();
                arrayList.add(audioSyncWordInfo);
                hashMap.put(audioSyncWordInfo.linkId, arrayList);
            }

        }
        return hashMap;
    }

    private void computeAudioSyncAsWordId(ArrayList<AudioSyncWordInfo> list, int pageID) {

        if (com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList() != null)
            com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList().clear();

        if (list != null && list.size() > 0)
            setGroupListRect(list.get(0).groupId, pageID, computeWordsGroupID(list));

        /*for (AudioSyncWordInfo objWord : list) {
            GlobalDataManager.getInstance().getSentenceAsRectList().add(new Pair<Long, RectF>((long)
                    pageID, objWord.rectWord));
        }
        GlobalDataManager.getInstance().sentenceCurrAudioSyncRect(GlobalDataManager.getInstance().getSentenceAsRectList());*/
    }

    private HashMap computeWordsGroupID(ArrayList<AudioSyncWordInfo> list) {

        HashMap hashMap = new HashMap();

        if (list != null && list.size() > 0) {

            for (AudioSyncWordInfo audioSyncWordInfo : list) {
                if (audioSyncWordInfo.groupId > 0) {
                    if (hashMap.get(audioSyncWordInfo.groupId) != null) {
                        ArrayList repeatedList = ((ArrayList) hashMap.get(audioSyncWordInfo.groupId));
                        repeatedList.add(audioSyncWordInfo);
                        hashMap.put(audioSyncWordInfo.groupId, repeatedList);
                    } else {
                        ArrayList arrayList = new ArrayList();
                        arrayList.add(audioSyncWordInfo);
                        hashMap.put(audioSyncWordInfo.groupId, arrayList);
                    }
                }
            }
        }

        return hashMap;
    }

    private void setGroupListRect(int groupId, int pageID, HashMap wordGroupIdMap) {

        if (wordGroupIdMap != null && wordGroupIdMap.size() > 0) {
            ArrayList<AudioSyncWordInfo> list = (ArrayList<AudioSyncWordInfo>) wordGroupIdMap.get(groupId);

            if (com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList() != null)
                com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList().clear();

            if (list != null && list.size() > 0) {
                for (AudioSyncWordInfo objWord : list) {
                    com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList().add(new Pair<Long, RectF>((long)
                            pageID, objWord.rectWord));
                }
            }

            com.hurix.commons.notifier.GlobalDataManager.getInstance().sentenceCurrAudioSyncRect(com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList());
        }

    }


    private void parsePrintablePagesinFixedEpub(String fixedepubPrintPagelist) {


        List<String> items = Arrays.asList(fixedepubPrintPagelist.split("\\s*,\\s*"));

        printablePagelist = new ArrayList<>();

        for (int i = 0; i < SDKManager.getInstance().getThumnailPage().size(); i++) {

            for (int j = 0; j < items.size(); j++) {

                if (items.get(j).equalsIgnoreCase(SDKManager.getInstance().getThumnailPage().get(i).getText())) {
                    printablePagelist.add(SDKManager.getInstance().getThumnailPage().get(i).getSrc());
                }

            }

        }

    }

    private String getAudioBookType(String bookXML) {
        String type = "";
        Document doc = null;
        doc = Utils.createDocumentFromFilePath(bookXML, doc);
        if (doc != null) {
            NodeList flowList = doc.getElementsByTagName("eBook");
            Element elementEbook = (Element) flowList.item(0);
            type = Utils.getTextValue(elementEbook, "BookType");
            //Log.d("BOOKTYPE", "type : " + type);
        }
        return type;
    }

    private void helpScreenViewsLandscape() {

        if (_collOfHelp_1 != null)
            _collOfHelp_1.clear();
        if (_collOfHelp_2 != null)
            _collOfHelp_2.clear();


        if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
            if (tokenType.equalsIgnoreCase("GenericAccount")) {

                View home = topActionbar.getItem(R.id.action_home);
                if (home != null) {
                    int[] locationhome = new int[2];
                    home.getLocationOnScreen(locationhome);
                    _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0] - notificationBarHeight, locationhome[1], home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
                }
                View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
                if (profilePicIcon != null) {
                    int[] locationprofile = new int[2];
                    profilePicIcon.getLocationOnScreen(locationprofile);
                    _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0] - notificationBarHeight, locationprofile[1], profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
                }
                View toc = bottomActionbar.getItem(R.id.action_toc);
                if (toc != null) {
                    int[] locationtoc = new int[2];
                    toc.getLocationOnScreen(locationtoc);
                    _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0] - notificationBarHeight, locationtoc[1], toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
                }
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0] - notificationBarHeight, locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
                View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
                if (fontsize != null) {
                    int[] locationfontsetting = new int[2];
                    fontsize.getLocationOnScreen(locationfontsetting);
                    _collOfHelp_1.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0] - notificationBarHeight, locationfontsetting[1], fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
                }

            } else {

                View home = topActionbar.getItem(R.id.action_home);
                if (home != null) {
                    int[] locationhome = new int[2];
                    home.getLocationOnScreen(locationhome);
                    _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0] - notificationBarHeight, locationhome[1], home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
                }
                View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
                if (profilePicIcon != null) {
                    int[] locationprofile = new int[2];
                    profilePicIcon.getLocationOnScreen(locationprofile);
                    _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0] - notificationBarHeight, locationprofile[1], profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
                }
                View toc = bottomActionbar.getItem(R.id.action_toc);
                if (toc != null) {
                    int[] locationtoc = new int[2];
                    toc.getLocationOnScreen(locationtoc);
                    _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0] - notificationBarHeight, locationtoc[1], toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
                }
                View myData = bottomActionbar.getItem(R.id.action_my_data);
                if (myData != null) {
                    int[] locationmyData = new int[2];
                    myData.getLocationOnScreen(locationmyData);
                    _collOfHelp_1.add(new HelpVo(R.string.my_data, myData.getPivotX(), myData.getPivotY(), locationmyData[0] - notificationBarHeight, locationmyData[1], myData.getMinimumWidth(), myData.getMinimumHeight(), CustomPlayerUIConstants.ACTION_MYDATA_TEXT, actionbartextSize, true, false));
                }
                View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
                if (fontsize != null) {
                    int[] locationfontsetting = new int[2];
                    fontsize.getLocationOnScreen(locationfontsetting);
                    _collOfHelp_2.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0] - notificationBarHeight, locationfontsetting[1], fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
                }

                if (mReaderType == EBookType.REFLOWEPUB) {
                    View search = bottomActionbar.getItem(R.id.action_search);
                    if (search != null) {
                        int[] locationsearch = new int[2];
                        search.getLocationOnScreen(locationsearch);
                        _collOfHelp_2.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0] - notificationBarHeight, locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                    }
                } else {
                    View search = bottomActionbar.getItem(R.id.action_search);
                    if (search != null) {
                        int[] locationsearch = new int[2];
                        search.getLocationOnScreen(locationsearch);
                        _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0] - notificationBarHeight, locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                    }
                }
                View pen = bottomActionbar.getItem(R.id.action_pen);
                if (pen != null) {
                    int[] locationpen = new int[2];
                    pen.getLocationOnScreen(locationpen);
                    _collOfHelp_1.add(new HelpVo(R.string.pen, pen.getPivotX(), pen.getPivotY(), locationpen[0] - notificationBarHeight, locationpen[1], pen.getMinimumWidth(), pen.getMinimumHeight(), CustomPlayerUIConstants.ACTION_PEN_TEXT, actionbartextSize, true, false));
                }

                if (isMobile) {
                    View bookmark = topActionbar.getItem(R.id.action_profile_image);
                    if (bookmark != null) {
                        int[] locationbookMark = new int[2];
                        bookmark.getLocationOnScreen(locationbookMark);
                        if (_collOfHelp_2 != null) {
                            _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) (bookmark.getX() + 10) - notificationBarHeight, topActionbar.getHeight(), bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                        }
                    }
                } else {

                    View bookmark = topActionbar.getItem(R.id.action_profile_image);
                    if (bookmark != null) {
                        int[] locationbookMark = new int[2];
                        bookmark.getLocationOnScreen(locationbookMark);
                        if (_collOfHelp_2 != null) {
                            _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) ((bookmark.getX()) - topActionbar.getHeight() / 2) - notificationBarHeight, (int) topActionbar.getPivotY(), bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                        }
                    }
                }

                if (getResources().getBoolean(R.bool.show_data_submit)) {
                    if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                        if (accountType.equals(Constants.TEACHER)) {
                            //   if (bookVo.IsClassAssociated()) {
                            View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                            if (teacherreview != null) {
                                int[] locationteacherreview = new int[2];
                                teacherreview.getLocationOnScreen(locationteacherreview);
                                _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0] - notificationBarHeight, locationteacherreview[1], teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_TEACHER_IC_TEXT, actionbartextSize, true, false));
                            }
                        } else {
                            View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                            if (teacherreview != null) {
                                int[] locationteacherreview = new int[2];
                                teacherreview.getLocationOnScreen(locationteacherreview);
                                _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0] - notificationBarHeight, locationteacherreview[1], teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_STUDENT_IC_TEXT, actionbartextSize, true, false));
                            }
                        }
                    }
                }
                View thumbnail = bottomActionbar.getItem(R.id.action_thumbnail);
                if (thumbnail != null) {
                    int[] locationthumbnail = new int[2];
                    thumbnail.getLocationOnScreen(locationthumbnail);
                    _collOfHelp_2.add(new HelpVo(R.string.thumbnail, thumbnail.getPivotX(), thumbnail.getPivotY(), locationthumbnail[0] - notificationBarHeight, locationthumbnail[1], thumbnail.getMinimumWidth(), thumbnail.getMinimumHeight(), CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, actionbartextSize, true, false));
                }

                View addnote = bottomActionbar.getItem(R.id.action_sticky_note);
                if (addnote != null) {
                    int[] locationaddnote = new int[2];
                    addnote.getLocationOnScreen(locationaddnote);
                    _collOfHelp_2.add(new HelpVo(R.string.addnote, addnote.getPivotX(), addnote.getPivotY(), locationaddnote[0] - notificationBarHeight, locationaddnote[1], addnote.getMinimumWidth(), addnote.getMinimumHeight(), CustomPlayerUIConstants.NOTE_ICON_TEXT, actionbartextSize, true, false));
                }

            }
        } else if (getResources().getBoolean(R.bool.is_it_worldbook)) {

            View home = topActionbar.getItem(R.id.action_home);
            if (home != null) {
                int[] locationhome = new int[2];
                home.getLocationOnScreen(locationhome);
                _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0] - notificationBarHeight, locationhome[1], home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
            }
            View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
            if (profilePicIcon != null) {
                int[] locationprofile = new int[2];
                profilePicIcon.getLocationOnScreen(locationprofile);
                _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0] - notificationBarHeight, locationprofile[1], profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
            }
            View toc
                    = bottomActionbar.getItem(R.id.action_toc);
            if (toc != null) {
                int[] locationtoc = new int[2];
                toc.getLocationOnScreen(locationtoc);
                _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0] - notificationBarHeight, locationtoc[1], toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
            }
            View myData = bottomActionbar.getItem(R.id.action_my_data);
            if (myData != null) {
                int[] locationmyData = new int[2];
                myData.getLocationOnScreen(locationmyData);
                _collOfHelp_1.add(new HelpVo(R.string.my_data, myData.getPivotX(), myData.getPivotY(), locationmyData[0] - notificationBarHeight, locationmyData[1], myData.getMinimumWidth(), myData.getMinimumHeight(), CustomPlayerUIConstants.ACTION_MYDATA_TEXT, actionbartextSize, true, false));
            }

            if (mReaderType == EBookType.REFLOWEPUB) {
                View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
                if (fontsize != null) {
                    int[] locationfontsetting = new int[2];
                    fontsize.getLocationOnScreen(locationfontsetting);
                    _collOfHelp_2.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0] - notificationBarHeight, locationfontsetting[1], fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
                }

                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_2.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0] - notificationBarHeight, locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            } else {
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0] - notificationBarHeight, locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            }

            View pen = bottomActionbar.getItem(R.id.action_pen);
            if (pen != null) {
                int[] locationpen = new int[2];
                pen.getLocationOnScreen(locationpen);
                _collOfHelp_1.add(new HelpVo(R.string.pen, pen.getPivotX(), pen.getPivotY(), locationpen[0] - notificationBarHeight, locationpen[1], pen.getMinimumWidth(), pen.getMinimumHeight(), CustomPlayerUIConstants.ACTION_PEN_TEXT, actionbartextSize, true, false));
            }

            if (isMobile) {
                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) (bookmark.getX() + 10) - notificationBarHeight, topActionbar.getHeight(), bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                    }
                }
            } else {

                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) ((bookmark.getX()) - topActionbar.getHeight() / 2) - notificationBarHeight, (int) topActionbar.getPivotY(), bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                    }
                }
            }

            View thumbnail = bottomActionbar.getItem(R.id.action_thumbnail);
            if (thumbnail != null) {
                int[] locationthumbnail = new int[2];
                thumbnail.getLocationOnScreen(locationthumbnail);
                _collOfHelp_2.add(new HelpVo(R.string.thumbnail, thumbnail.getPivotX(), thumbnail.getPivotY(), locationthumbnail[0] - notificationBarHeight, locationthumbnail[1], thumbnail.getMinimumWidth(), thumbnail.getMinimumHeight(), CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, actionbartextSize, true, false));
            }

            View addnote = bottomActionbar.getItem(R.id.action_sticky_note);
            if (addnote != null) {
                int[] locationaddnote = new int[2];
                addnote.getLocationOnScreen(locationaddnote);
                _collOfHelp_2.add(new HelpVo(R.string.addnote, addnote.getPivotX(), addnote.getPivotY(), locationaddnote[0] - notificationBarHeight, locationaddnote[1], addnote.getMinimumWidth(), addnote.getMinimumHeight(), CustomPlayerUIConstants.NOTE_ICON_TEXT, actionbartextSize, true, false));
            }
        } else {

            View home = topActionbar.getItem(R.id.action_home);
            if (home != null) {
                int[] locationhome = new int[2];
                home.getLocationOnScreen(locationhome);
                _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0] - notificationBarHeight, locationhome[1], home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
            }

            View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
            if (profilePicIcon != null) {
                int[] locationprofile = new int[2];
                profilePicIcon.getLocationOnScreen(locationprofile);
                _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0] - notificationBarHeight, locationprofile[1], profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
            }

            View toc = bottomActionbar.getItem(R.id.action_toc);
            if (toc != null) {
                int[] locationtoc = new int[2];
                toc.getLocationOnScreen(locationtoc);
                _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0] - notificationBarHeight, locationtoc[1], toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
            }

            View myData = bottomActionbar.getItem(R.id.action_my_data);
            if (myData != null) {
                int[] locationmyData = new int[2];
                myData.getLocationOnScreen(locationmyData);
                _collOfHelp_1.add(new HelpVo(R.string.my_data, myData.getPivotX(), myData.getPivotY(), locationmyData[0] - notificationBarHeight, locationmyData[1], myData.getMinimumWidth(), myData.getMinimumHeight(), CustomPlayerUIConstants.ACTION_MYDATA_TEXT, actionbartextSize, true, false));
            }

        /*    View search = (View) bottomActionbar.getItem(R.id.action_search);
            if (search != null) {
                int[] locationsearch = new int[2];
                search.getLocationOnScreen(locationsearch);
                _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
            }

            View fontsize = (View) bottomActionbar.getItem(R.id.action_font_settings);
            if (fontsize != null) {
                int[] locationfontsetting = new int[2];
                fontsize.getLocationOnScreen(locationfontsetting);
                _collOfHelp_1.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0], locationfontsetting[1], fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
            }
          */

            View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
            if (fontsize != null) {
                int[] locationfontsetting = new int[2];
                fontsize.getLocationOnScreen(locationfontsetting);
                _collOfHelp_2.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0] - notificationBarHeight, locationfontsetting[1], fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
            }

            if (mReaderType == EBookType.REFLOWEPUB) {
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_2.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0] - notificationBarHeight, locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            } else {
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0] - notificationBarHeight, locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            }

            View pen = bottomActionbar.getItem(R.id.action_pen);
            if (pen != null) {
                int[] locationpen = new int[2];
                pen.getLocationOnScreen(locationpen);
                _collOfHelp_1.add(new HelpVo(R.string.pen, pen.getPivotX(), pen.getPivotY(), locationpen[0] - notificationBarHeight, locationpen[1], pen.getMinimumWidth(), pen.getMinimumHeight(), CustomPlayerUIConstants.ACTION_PEN_TEXT, actionbartextSize, true, false));
            }

            if (isMobile) {

                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        if (mReaderType == EBookType.FIXEDKITABOO) {
                            if (getResources().getBoolean(R.bool.show_data_submit) && (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled())) {
                                _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) bottomActionbar.getItem(R.id.topbar_review).getX() - notificationBarHeight, topActionbar.getHeight(), bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                            } else {
                                _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) bottomActionbar.getItem(R.id.action_thumbnail).getX() + notificationBarHeight * 3, topActionbar.getHeight() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                            }
                        } else {
                            _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) (bookmark.getX() + 10), topActionbar.getHeight() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                        }

                    }
                }
            } else {

                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)
                            _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) ((bookmark.getX()) - topActionbar.getHeight() / 2), (int) topActionbar.getPivotY() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                        else
                            _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) ((bookmark.getX()) - topActionbar.getHeight()) - 30 - notificationBarHeight, (int) topActionbar.getPivotY() * 2, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                    }
                }
            }

            if (getResources().getBoolean(R.bool.show_data_submit)) {
                if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                    if (accountType.equals(Constants.TEACHER)) {
                        //  if (bookVo.IsClassAssociated()) {
                        View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                        if (teacherreview != null) {
                            int[] locationteacherreview = new int[2];
                            teacherreview.getLocationOnScreen(locationteacherreview);
                            _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0] - notificationBarHeight, locationteacherreview[1], teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_TEACHER_IC_TEXT, actionbartextSize, true, false));
                        }
                    } else {
                        View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                        if (teacherreview != null) {
                            int[] locationteacherreview = new int[2];
                            teacherreview.getLocationOnScreen(locationteacherreview);
                            _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0] - notificationBarHeight, locationteacherreview[1], teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_STUDENT_IC_TEXT, actionbartextSize, true, false));
                        }
                    }
                }
            }

            if (mReaderType == EBookType.FIXEDKITABOO) {
                View clearAll = bottomActionbar.getItem(R.id.teacher_review_clear_all);
                if (clearAll != null) {
                    int[] locationaddnote = new int[2];
                    clearAll.getLocationOnScreen(locationaddnote);
                    _collOfHelp_2.add(new HelpVo(R.string.clearall, clearAll.getPivotX(), clearAll.getPivotY(), locationaddnote[0], locationaddnote[1] - notificationBarHeight, clearAll.getMinimumWidth(), clearAll.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, actionbartextSize, true, false));
                }
            }
            View thumbnail = bottomActionbar.getItem(R.id.action_thumbnail);
            if (thumbnail != null) {
                int[] locationthumbnail = new int[2];
                thumbnail.getLocationOnScreen(locationthumbnail);
                _collOfHelp_2.add(new HelpVo(R.string.thumbnail, thumbnail.getPivotX(), thumbnail.getPivotY(), locationthumbnail[0] - notificationBarHeight, locationthumbnail[1], thumbnail.getMinimumWidth(), thumbnail.getMinimumHeight(), CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, actionbartextSize, true, false));
            }

            View addnote = bottomActionbar.getItem(R.id.action_sticky_note);
            if (addnote != null) {
                int[] locationaddnote = new int[2];
                addnote.getLocationOnScreen(locationaddnote);
                _collOfHelp_2.add(new HelpVo(R.string.addnote, addnote.getPivotX(), addnote.getPivotY(), locationaddnote[0] - notificationBarHeight, locationaddnote[1], addnote.getMinimumWidth(), addnote.getMinimumHeight(), CustomPlayerUIConstants.NOTE_ICON_TEXT, actionbartextSize, true, false));
            }


        }


        if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
            if (tokenType.equalsIgnoreCase("GenericAccount")) {
                if (_collOfHelp_2 != null) {
                    _collOfHelp_2 = null;
                }
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.FIXEDEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 5)
                        startHelpScreenActivity(READER);
                }
            } else {
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.FIXEDEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 2)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                        startHelpScreenActivity(READER);
                }
            }
        } else if (getResources().getBoolean(R.bool.is_it_worldbook)) {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                    startHelpScreenActivity(READER);
            } else if (mReaderType == EBookType.FIXEDEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 2)
                    startHelpScreenActivity(READER);
            } else if (mReaderType == EBookType.REFLOWEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                    startHelpScreenActivity(READER);
            }
        } else {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 4)
                        ;
                } else {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                        ;
                }
                startHelpScreenActivity(READER);

            } else if (mReaderType == EBookType.FIXEDEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 2)
                    startHelpScreenActivity(READER);
            } else if (mReaderType == EBookType.REFLOWEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                    startHelpScreenActivity(READER);
            }

        }

        Utils.insertSharedPreferenceBooleanValue(this, Constants.HELPSCREEN_REQUIRED_REVIEW, true);
    }


    private void helpScreenViews() {
        if (_collOfHelp_1 != null)
            _collOfHelp_1.clear();
        if (_collOfHelp_2 != null)
            _collOfHelp_2.clear();

        if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
            if (tokenType.equalsIgnoreCase("GenericAccount")) {

                View home = topActionbar.getItem(R.id.action_home);
                if (home != null) {
                    int[] locationhome = new int[2];
                    home.getLocationOnScreen(locationhome);
                    _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0], locationhome[1] - notificationBarHeight, home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
                }
                View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
                if (profilePicIcon != null) {
                    int[] locationprofile = new int[2];
                    profilePicIcon.getLocationOnScreen(locationprofile);
                    _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0], locationprofile[1] - notificationBarHeight, profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
                }
                View toc = bottomActionbar.getItem(R.id.action_toc);
                if (toc != null) {
                    int[] locationtoc = new int[2];
                    toc.getLocationOnScreen(locationtoc);
                    _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0], locationtoc[1] - notificationBarHeight, toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
                }
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1] - notificationBarHeight, search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
                View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
                if (fontsize != null) {
                    int[] locationfontsetting = new int[2];
                    fontsize.getLocationOnScreen(locationfontsetting);
                    _collOfHelp_1.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0], locationfontsetting[1] - notificationBarHeight, fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
                }

            } else {

                View home = topActionbar.getItem(R.id.action_home);
                if (home != null) {
                    int[] locationhome = new int[2];
                    home.getLocationOnScreen(locationhome);
                    _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0], locationhome[1] - notificationBarHeight, home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
                }
                View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
                if (profilePicIcon != null) {
                    int[] locationprofile = new int[2];
                    profilePicIcon.getLocationOnScreen(locationprofile);
                    _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0], locationprofile[1] - notificationBarHeight, profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
                }
                View toc = bottomActionbar.getItem(R.id.action_toc);
                if (toc != null) {
                    int[] locationtoc = new int[2];
                    toc.getLocationOnScreen(locationtoc);
                    _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0], locationtoc[1] - notificationBarHeight, toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
                }
                View myData = bottomActionbar.getItem(R.id.action_my_data);
                if (myData != null) {
                    int[] locationmyData = new int[2];
                    myData.getLocationOnScreen(locationmyData);
                    _collOfHelp_1.add(new HelpVo(R.string.my_data, myData.getPivotX(), myData.getPivotY(), locationmyData[0], locationmyData[1] - notificationBarHeight, myData.getMinimumWidth(), myData.getMinimumHeight(), CustomPlayerUIConstants.ACTION_MYDATA_TEXT, actionbartextSize, true, false));
                }
                View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
                if (fontsize != null) {
                    int[] locationfontsetting = new int[2];
                    fontsize.getLocationOnScreen(locationfontsetting);
                    _collOfHelp_2.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0], locationfontsetting[1] - notificationBarHeight, fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
                }

                if (mReaderType == EBookType.REFLOWEPUB) {
                    View search = bottomActionbar.getItem(R.id.action_search);
                    if (search != null) {
                        int[] locationsearch = new int[2];
                        search.getLocationOnScreen(locationsearch);
                        _collOfHelp_2.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1] - notificationBarHeight, search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                    }
                } else {
                    View search = bottomActionbar.getItem(R.id.action_search);
                    if (search != null) {
                        int[] locationsearch = new int[2];
                        search.getLocationOnScreen(locationsearch);
                        _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1] - notificationBarHeight, search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                    }
                }
                View pen = bottomActionbar.getItem(R.id.action_pen);
                if (pen != null) {
                    int[] locationpen = new int[2];
                    pen.getLocationOnScreen(locationpen);
                    _collOfHelp_1.add(new HelpVo(R.string.pen, pen.getPivotX(), pen.getPivotY(), locationpen[0], locationpen[1] - notificationBarHeight, pen.getMinimumWidth(), pen.getMinimumHeight(), CustomPlayerUIConstants.ACTION_PEN_TEXT, actionbartextSize, true, false));
                }

                if (isMobile) {
                    View bookmark = topActionbar.getItem(R.id.action_profile_image);
                    if (bookmark != null) {
                        int[] locationbookMark = new int[2];
                        bookmark.getLocationOnScreen(locationbookMark);
                        if (_collOfHelp_2 != null) {
                            _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) (bookmark.getX() + 10), topActionbar.getHeight() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                        }
                    }
                } else {

                    View bookmark = topActionbar.getItem(R.id.action_profile_image);
                    if (bookmark != null) {
                        int[] locationbookMark = new int[2];
                        bookmark.getLocationOnScreen(locationbookMark);
                        if (_collOfHelp_2 != null) {
                            _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) ((bookmark.getX()) - topActionbar.getHeight() / 2), (int) topActionbar.getPivotY() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                        }
                    }
                }

                if (getResources().getBoolean(R.bool.show_data_submit)) {
                    if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                        if (accountType.equals(Constants.TEACHER)) {
                            //   if (bookVo.IsClassAssociated()) {
                            View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                            if (teacherreview != null) {
                                int[] locationteacherreview = new int[2];
                                teacherreview.getLocationOnScreen(locationteacherreview);
                                _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0], locationteacherreview[1] - notificationBarHeight, teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_TEACHER_IC_TEXT, actionbartextSize, true, false));
                            }
                        } else {
                            View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                            if (teacherreview != null) {
                                int[] locationteacherreview = new int[2];
                                teacherreview.getLocationOnScreen(locationteacherreview);
                                _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0], locationteacherreview[1] - notificationBarHeight, teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_STUDENT_IC_TEXT, actionbartextSize, true, false));
                            }
                        }
                    }
                }
                View thumbnail = bottomActionbar.getItem(R.id.action_thumbnail);
                if (thumbnail != null) {
                    int[] locationthumbnail = new int[2];
                    thumbnail.getLocationOnScreen(locationthumbnail);
                    _collOfHelp_2.add(new HelpVo(R.string.thumbnail, thumbnail.getPivotX(), thumbnail.getPivotY(), locationthumbnail[0], locationthumbnail[1] - notificationBarHeight, thumbnail.getMinimumWidth(), thumbnail.getMinimumHeight(), CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, actionbartextSize, true, false));
                }

                View addnote = bottomActionbar.getItem(R.id.action_sticky_note);
                if (addnote != null) {
                    int[] locationaddnote = new int[2];
                    addnote.getLocationOnScreen(locationaddnote);
                    _collOfHelp_2.add(new HelpVo(R.string.addnote, addnote.getPivotX(), addnote.getPivotY(), locationaddnote[0], locationaddnote[1] - notificationBarHeight, addnote.getMinimumWidth(), addnote.getMinimumHeight(), CustomPlayerUIConstants.NOTE_ICON_TEXT, actionbartextSize, true, false));
                }

            }
        } else if (getResources().getBoolean(R.bool.is_it_worldbook)) {

            View home = topActionbar.getItem(R.id.action_home);
            if (home != null) {
                int[] locationhome = new int[2];
                home.getLocationOnScreen(locationhome);
                _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0], locationhome[1] - notificationBarHeight, home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
            }
            View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
            if (profilePicIcon != null) {
                int[] locationprofile = new int[2];
                profilePicIcon.getLocationOnScreen(locationprofile);
                _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0], locationprofile[1] - notificationBarHeight, profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
            }
            View toc
                    = bottomActionbar.getItem(R.id.action_toc);
            if (toc != null) {
                int[] locationtoc = new int[2];
                toc.getLocationOnScreen(locationtoc);
                _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0], locationtoc[1] - notificationBarHeight, toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
            }
            View myData = bottomActionbar.getItem(R.id.action_my_data);
            if (myData != null) {
                int[] locationmyData = new int[2];
                myData.getLocationOnScreen(locationmyData);
                _collOfHelp_1.add(new HelpVo(R.string.my_data, myData.getPivotX(), myData.getPivotY(), locationmyData[0], locationmyData[1] - notificationBarHeight, myData.getMinimumWidth(), myData.getMinimumHeight(), CustomPlayerUIConstants.ACTION_MYDATA_TEXT, actionbartextSize, true, false));
            }

            if (mReaderType == EBookType.REFLOWEPUB) {
                View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
                if (fontsize != null) {
                    int[] locationfontsetting = new int[2];
                    fontsize.getLocationOnScreen(locationfontsetting);
                    _collOfHelp_2.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0], locationfontsetting[1] - notificationBarHeight, fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
                }

                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_2.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1] - notificationBarHeight, search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            } else {
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1] - notificationBarHeight, search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            }

            View pen = bottomActionbar.getItem(R.id.action_pen);
            if (pen != null) {
                int[] locationpen = new int[2];
                pen.getLocationOnScreen(locationpen);
                _collOfHelp_1.add(new HelpVo(R.string.pen, pen.getPivotX(), pen.getPivotY(), locationpen[0], locationpen[1] - notificationBarHeight, pen.getMinimumWidth(), pen.getMinimumHeight(), CustomPlayerUIConstants.ACTION_PEN_TEXT, actionbartextSize, true, false));
            }

            if (isMobile) {
                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) (bookmark.getX() + 10), topActionbar.getHeight() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                    }
                }
            } else {

                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) ((bookmark.getX()) - topActionbar.getHeight() / 2), (int) topActionbar.getPivotY() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                    }
                }
            }

            View thumbnail = bottomActionbar.getItem(R.id.action_thumbnail);
            if (thumbnail != null) {
                int[] locationthumbnail = new int[2];
                thumbnail.getLocationOnScreen(locationthumbnail);
                _collOfHelp_2.add(new HelpVo(R.string.thumbnail, thumbnail.getPivotX(), thumbnail.getPivotY(), locationthumbnail[0], locationthumbnail[1] - notificationBarHeight, thumbnail.getMinimumWidth(), thumbnail.getMinimumHeight(), CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, actionbartextSize, true, false));
            }

            View addnote = bottomActionbar.getItem(R.id.action_sticky_note);
            if (addnote != null) {
                int[] locationaddnote = new int[2];
                addnote.getLocationOnScreen(locationaddnote);
                _collOfHelp_2.add(new HelpVo(R.string.addnote, addnote.getPivotX(), addnote.getPivotY(), locationaddnote[0], locationaddnote[1] - notificationBarHeight, addnote.getMinimumWidth(), addnote.getMinimumHeight(), CustomPlayerUIConstants.NOTE_ICON_TEXT, actionbartextSize, true, false));
            }

        } else {

            View home = topActionbar.getItem(R.id.action_home);
            if (home != null) {
                int[] locationhome = new int[2];
                home.getLocationOnScreen(locationhome);
                _collOfHelp_1.add(new HelpVo(R.string.home, home.getPivotX(), home.getPivotY(), locationhome[0], locationhome[1] - notificationBarHeight, home.getMinimumWidth(), home.getMinimumHeight(), CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, actionbartextSize, false, false));
            }
            View profilePicIcon = topActionbar.getItem(R.id.action_profile_image);
            if (profilePicIcon != null) {
                int[] locationprofile = new int[2];
                profilePicIcon.getLocationOnScreen(locationprofile);
                _collOfHelp_1.add(new HelpVo(R.string.profile, profilePicIcon.getPivotX(), profilePicIcon.getPivotY(), locationprofile[0], locationprofile[1] - notificationBarHeight, profilePicIcon.getMinimumWidth(), profilePicIcon.getMinimumHeight(), "", actionbartextSize, false, false));
            }
            View toc
                    = bottomActionbar.getItem(R.id.action_toc);
            if (toc != null) {
                int[] locationtoc = new int[2];
                toc.getLocationOnScreen(locationtoc);
                _collOfHelp_1.add(new HelpVo(R.string.toc, toc.getPivotX(), toc.getPivotY(), locationtoc[0], locationtoc[1] - notificationBarHeight, toc.getMinimumWidth(), toc.getMinimumHeight(), CustomPlayerUIConstants.ACTION_TOC_TEXT, actionbartextSize, true, false));
            }
            View myData = bottomActionbar.getItem(R.id.action_my_data);
            if (myData != null) {
                int[] locationmyData = new int[2];
                myData.getLocationOnScreen(locationmyData);
                _collOfHelp_1.add(new HelpVo(R.string.my_data, myData.getPivotX(), myData.getPivotY(), locationmyData[0], locationmyData[1] - notificationBarHeight, myData.getMinimumWidth(), myData.getMinimumHeight(), CustomPlayerUIConstants.ACTION_MYDATA_TEXT, actionbartextSize, true, false));
            }
           /* View search = (View) bottomActionbar.getItem(R.id.action_search);
            if(search != null) {
                int[] locationsearch = new int[2];
                search.getLocationOnScreen(locationsearch);
                _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1], search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
            }
            View fontsize = (View) bottomActionbar.getItem(R.id.action_font_settings);
            if(fontsize != null) {
                int[] locationfontsetting = new int[2];
                fontsize.getLocationOnScreen(locationfontsetting);
                _collOfHelp_1.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0], locationfontsetting[1], fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
            }
*/
            View fontsize = bottomActionbar.getItem(R.id.action_font_settings);
            if (fontsize != null) {
                int[] locationfontsetting = new int[2];
                fontsize.getLocationOnScreen(locationfontsetting);
                _collOfHelp_2.add(new HelpVo(R.string.font_setting, fontsize.getPivotX(), fontsize.getPivotY(), locationfontsetting[0], locationfontsetting[1] - notificationBarHeight, fontsize.getMinimumWidth(), fontsize.getMinimumHeight(), CustomPlayerUIConstants.ACTION_FONT_SETTING, actionbartextSize, true, false));
            }

            if (mReaderType == EBookType.REFLOWEPUB) {
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_2.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1] - notificationBarHeight, search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            } else {
                View search = bottomActionbar.getItem(R.id.action_search);
                if (search != null) {
                    int[] locationsearch = new int[2];
                    search.getLocationOnScreen(locationsearch);
                    _collOfHelp_1.add(new HelpVo(R.string.search, search.getPivotX(), search.getPivotY(), locationsearch[0], locationsearch[1] - notificationBarHeight, search.getMinimumWidth(), search.getMinimumHeight(), CustomPlayerUIConstants.ACTION_SEARCH_TEXT, actionbartextSize, true, false));
                }
            }

            View pen = bottomActionbar.getItem(R.id.action_pen);
            if (pen != null) {
                int[] locationpen = new int[2];
                pen.getLocationOnScreen(locationpen);
                _collOfHelp_1.add(new HelpVo(R.string.pen, pen.getPivotX(), pen.getPivotY(), locationpen[0], locationpen[1] - notificationBarHeight, pen.getMinimumWidth(), pen.getMinimumHeight(), CustomPlayerUIConstants.ACTION_PEN_TEXT, actionbartextSize, true, false));
            }

            if (isMobile) {
                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) (bookmark.getX() + 10), topActionbar.getHeight() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                    }
                }
            } else {

                View bookmark = topActionbar.getItem(R.id.action_profile_image);
                if (bookmark != null) {
                    int[] locationbookMark = new int[2];
                    bookmark.getLocationOnScreen(locationbookMark);
                    if (_collOfHelp_2 != null) {
                        _collOfHelp_2.add(new HelpVo(R.string.bookMark, locationbookMark[0], 0, (int) ((bookmark.getX()) - topActionbar.getHeight() / 2), (int) topActionbar.getPivotY() - notificationBarHeight, bookmark.getMinimumWidth(), bookmark.getMinimumHeight(), "", actionbartextSize, false, false));
                    }
                }
            }

            if (getResources().getBoolean(R.bool.show_data_submit)) {
                if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                    if (accountType.equals(Constants.TEACHER)) {
                        //   if (bookVo.IsClassAssociated()) {
                        View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                        if (teacherreview != null) {
                            int[] locationteacherreview = new int[2];
                            teacherreview.getLocationOnScreen(locationteacherreview);
                            _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0], locationteacherreview[1] - notificationBarHeight, teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_TEACHER_IC_TEXT, actionbartextSize, true, false));
                        }
                    } else {
                        View teacherreview = bottomActionbar.getItem(R.id.topbar_review);
                        if (teacherreview != null) {
                            int[] locationteacherreview = new int[2];
                            teacherreview.getLocationOnScreen(locationteacherreview);
                            _collOfHelp_2.add(new HelpVo(R.string.settings, teacherreview.getPivotX(), teacherreview.getPivotY(), locationteacherreview[0], locationteacherreview[1] - notificationBarHeight, teacherreview.getMinimumWidth(), teacherreview.getMinimumHeight(), PlayerUIConstants.TB_STUDENT_IC_TEXT, actionbartextSize, true, false));
                        }
                    }
                }
            }

            if (mReaderType == EBookType.FIXEDKITABOO) {
                View clearAll = bottomActionbar.getItem(R.id.teacher_review_clear_all);
                if (clearAll != null) {
                    int[] locationclearall = new int[2];
                    clearAll.getLocationOnScreen(locationclearall);
                    _collOfHelp_2.add(new HelpVo(R.string.clearall, clearAll.getPivotX(), clearAll.getPivotY(), locationclearall[0], locationclearall[1] - notificationBarHeight, clearAll.getMinimumWidth(), clearAll.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, actionbartextSize, true, false));
                }
            }


            View thumbnail = bottomActionbar.getItem(R.id.action_thumbnail);
            if (thumbnail != null) {
                int[] locationthumbnail = new int[2];
                thumbnail.getLocationOnScreen(locationthumbnail);
                _collOfHelp_2.add(new HelpVo(R.string.thumbnail, thumbnail.getPivotX(), thumbnail.getPivotY(), locationthumbnail[0], locationthumbnail[1] - notificationBarHeight, thumbnail.getMinimumWidth(), thumbnail.getMinimumHeight(), CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, actionbartextSize, true, false));
            }

            View addnote = bottomActionbar.getItem(R.id.action_sticky_note);
            if (addnote != null) {
                int[] locationaddnote = new int[2];
                addnote.getLocationOnScreen(locationaddnote);
                _collOfHelp_2.add(new HelpVo(R.string.addnote, addnote.getPivotX(), addnote.getPivotY(), locationaddnote[0], locationaddnote[1] - notificationBarHeight, addnote.getMinimumWidth(), addnote.getMinimumHeight(), CustomPlayerUIConstants.NOTE_ICON_TEXT, actionbartextSize, true, false));
            }

        }


        if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
            if (tokenType.equalsIgnoreCase("GenericAccount")) {
                if (_collOfHelp_2 != null) {
                    _collOfHelp_2 = null;
                }
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.FIXEDEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 5)
                        startHelpScreenActivity(READER);
                }

            } else {
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.FIXEDEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 2)
                        startHelpScreenActivity(READER);
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                        startHelpScreenActivity(READER);
                }
            }
        } else if (getResources().getBoolean(R.bool.is_it_worldbook)) {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                    startHelpScreenActivity(READER);
            } else if (mReaderType == EBookType.FIXEDEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 2)
                    startHelpScreenActivity(READER);
            } else if (mReaderType == EBookType.REFLOWEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                    startHelpScreenActivity(READER);
            }
        } else {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 4)
                        ;
                } else {
                    if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                        ;
                }
                startHelpScreenActivity(READER);
            } else if (mReaderType == EBookType.FIXEDEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 6 && _collOfHelp_2 != null && _collOfHelp_2.size() == 2)
                    startHelpScreenActivity(READER);
            } else if (mReaderType == EBookType.REFLOWEPUB) {
                if (_collOfHelp_1 != null && _collOfHelp_1.size() == 4 && _collOfHelp_2 != null && _collOfHelp_2.size() == 3)
                    startHelpScreenActivity(READER);
            }
        }

        Utils.insertSharedPreferenceBooleanValue(this, Constants.HELPSCREEN_REQUIRED_REVIEW, true);
    }

    private synchronized void startHelpScreenActivity(String type) {
        Intent i = new Intent(this, HelpScreenActivity.class);
        //i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK );
        HashMap<Integer, ArrayList<HelpVo>> hashMap = new HashMap<Integer, ArrayList<HelpVo>>();
        if (_collOfHelp_1 != null && _collOfHelp_1.size() > 0) {
            hashMap.put(0, _collOfHelp_1);
        }
        if (_collOfHelp_2 != null && _collOfHelp_2.size() > 0) {
            hashMap.put(1, _collOfHelp_2);
        }
        Bundle extras = new Bundle();
        extras.putSerializable("coll", hashMap);
        i.putExtra(HELPSCREEN_TYPE, type);
        i.putExtras(extras);
        startActivityForResult(i, Constants.HELPSCREEN_CLOSE_REQUESTCODE);
    }

    private void helpScreenViewsReview() {
       /* if(_collOfHelpTeacher_1!=null)
            _collOfHelpTeacher_1.clear();
        else if(_collOfHelpTeacher_2!=null)
            _collOfHelpTeacher_2.clear();*/

        if (isMobile) {

            View studentprofile = topActionbar.getItem(R.id.teacher_review_profile_image);
            if (studentprofile != null) {
                int[] locationprofile = new int[2];
                studentprofile.getLocationOnScreen(locationprofile);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.student_profile, studentprofile.getPivotX(), studentprofile.getPivotY(), locationprofile[0], locationprofile[1], studentprofile.getMinimumWidth(), studentprofile.getMinimumHeight(), "", actionbartextSize, false, false));
            }

            View marker_1 = bottomActionbar.getItem(R.id.teacher_review_green);
            if (marker_1 != null) {
                int[] locationmarker1 = new int[2];
                marker_1.getLocationOnScreen(locationmarker1);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_1, marker_1.getPivotX(), marker_1.getPivotY(), locationmarker1[0], locationmarker1[1], marker_1.getMinimumWidth(), marker_1.getMinimumHeight(), CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, true, false));
            }

            View marker_2 = bottomActionbar.getItem(R.id.teacher_review_red);
            if (marker_2 != null) {
                int[] locationmarker2 = new int[2];
                marker_2.getLocationOnScreen(locationmarker2);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_2, marker_2.getPivotX(), marker_2.getPivotY(), locationmarker2[0], locationmarker2[1], marker_2.getMinimumWidth(), marker_2.getMinimumHeight(), CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, true, false));
            }

            View eraser = bottomActionbar.getItem(R.id.teacher_review_eraser);
            if (eraser != null) {
                int[] locationeraser = new int[2];
                eraser.getLocationOnScreen(locationeraser);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.eraser, eraser.getPivotX(), eraser.getPivotY(), locationeraser[0], locationeraser[1], eraser.getMinimumWidth(), eraser.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_ERASER, actionbartextSize, true, false));
            }

            View undo = bottomActionbar.getItem(R.id.teacher_review_undo);
            if (undo != null) {
                int[] locationundo = new int[2];
                undo.getLocationOnScreen(locationundo);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.undo, undo.getPivotX(), undo.getPivotY(), locationundo[0], locationundo[1], undo.getMinimumWidth(), undo.getMinimumHeight(), "<", actionbartextSize, true, false));
            }

            View arrow_1 = topActionbar.getItem(R.id.teacher_review_previous);
            if (arrow_1 != null) {
                int[] locationarrow1 = new int[2];
                arrow_1.getLocationOnScreen(locationarrow1);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.arrow1, arrow_1.getPivotX(), arrow_1.getPivotY(), locationarrow1[0], locationarrow1[1], arrow_1.getMinimumWidth(), arrow_1.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_PREVIOUS, actionbartextSize, false, false));
            }

            View arrow_2 = topActionbar.getItem(R.id.teacher_review_next);
            if (arrow_2 != null) {
                int[] locationarrow2 = new int[2];
                arrow_2.getLocationOnScreen(locationarrow2);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.arrow2, arrow_2.getPivotX(), arrow_2.getPivotY(), locationarrow2[0], locationarrow2[1], arrow_2.getMinimumWidth(), arrow_2.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_NEXT, actionbartextSize, false, false));
            }

            View done = bottomActionbar.getItem(R.id.teacher_review_done);
            if (done != null) {
                int[] locationdone = new int[2];
                done.getLocationOnScreen(locationdone);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.done, done.getPivotX(), done.getPivotY(), locationdone[0], locationdone[1], done.getMinimumWidth(), done.getMinimumHeight(), "", 16, true, false));
            }

            if (_collOfHelpTeacher_1 != null && _collOfHelpTeacher_1.size() == 5 && _collOfHelpTeacher_2 != null && _collOfHelpTeacher_2.size() == 3)
                startHelpScreenNextActivity(REVIEW);

        } else {

            View studentprofile = topActionbar.getItem(R.id.teacher_review_profile_image);
            if (studentprofile != null) {
                int[] locationprofile = new int[2];
                studentprofile.getLocationOnScreen(locationprofile);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.student_profile, studentprofile.getPivotX(), studentprofile.getPivotY(), locationprofile[0], locationprofile[1], studentprofile.getMinimumWidth(), studentprofile.getMinimumHeight(), "", actionbartextSize, false, false));
            }

            View marker_1 = mTeacherReviewGreen;
            if (marker_1 != null) {
                int[] locationmarker_1 = new int[2];
                marker_1.getLocationOnScreen(locationmarker_1);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_1, marker_1.getPivotX(), marker_1.getPivotY(), locationmarker_1[0] - 3, locationmarker_1[1] + 6, marker_1.getMinimumWidth() + 3, marker_1.getMinimumHeight() + 3, CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, false, false));
            }

            View marker_2 = topActionbar.getItem(R.id.teacher_review_red);
            if (marker_2 != null) {
                int[] locationmarker_2 = new int[2];
                marker_2.getLocationOnScreen(locationmarker_2);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_2, marker_2.getPivotX(), marker_2.getPivotY(), locationmarker_2[0] - 3, locationmarker_2[1] + 6, marker_2.getMinimumWidth() + 3, marker_2.getMinimumHeight() + 3, CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, false, false));
            }

            View arrow_1 = topActionbar.getItem(R.id.teacher_review_previous);
            if (arrow_1 != null) {
                int[] locationarrow1 = new int[2];
                arrow_1.getLocationOnScreen(locationarrow1);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.arrow1, arrow_1.getPivotX(), arrow_1.getPivotY(), locationarrow1[0], locationarrow1[1], arrow_1.getMinimumWidth(), arrow_1.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_PREVIOUS, actionbartextSize, false, false));
            }
            View arrow_2 = topActionbar.getItem(R.id.teacher_review_next);
            if (arrow_2 != null) {
                int[] locationarrow2 = new int[2];
                arrow_2.getLocationOnScreen(locationarrow2);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.arrow2, arrow_2.getPivotX(), arrow_2.getPivotY(), locationarrow2[0], locationarrow2[1], arrow_2.getMinimumWidth(), arrow_2.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_NEXT, actionbartextSize, false, false));
            }

            View eraser = topActionbar.getItem(R.id.teacher_review_eraser);
            if (eraser != null) {
                int[] locationeraser = new int[2];
                eraser.getLocationOnScreen(locationeraser);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.eraser, eraser.getPivotX(), eraser.getPivotY(), locationeraser[0], locationeraser[1], eraser.getMinimumWidth(), eraser.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_ERASER, actionbartextSize, false, false));
            }

            View done = topActionbar.getItem(R.id.teacher_review_done);
            if (done != null) {
                int[] locationdone = new int[2];
                done.getLocationOnScreen(locationdone);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.done, done.getPivotX(), done.getPivotY(), locationdone[0], locationdone[1], done.getMinimumWidth(), done.getMinimumHeight(), "", actionbartextSize, false, false));
            }
            if (!getResources().getBoolean(R.bool.is_ADA_Client)) {
                View clearall = topActionbar.getItem(R.id.teacher_review_clear_all);
                if (clearall != null) {
                    int[] locationclearall = new int[2];
                    clearall.getLocationOnScreen(locationclearall);
                    _collOfHelpTeacher_2.add(new HelpVo(R.string.clear_All, clearall.getPivotX(), clearall.getPivotY(), locationclearall[0], locationclearall[1], clearall.getMinimumWidth(), clearall.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, actionbartextSize, false, false));
                }
            }
            View undo = topActionbar.getItem(R.id.teacher_review_undo);
            if (undo != null) {
                int[] locationundo = new int[2];
                undo.getLocationOnScreen(locationundo);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.undo, undo.getPivotX(), undo.getPivotY(), locationundo[0], locationundo[1], undo.getMinimumWidth(), undo.getMinimumHeight(), "<", actionbartextSize, false, false));
            }

            if (_collOfHelpTeacher_1 != null && _collOfHelpTeacher_1.size() >= 5 && _collOfHelpTeacher_2 != null && _collOfHelpTeacher_2.size() == 4)
                startHelpScreenNextActivity(REVIEW);
        }
    }

    private void helpScreenViewsReviewLandscape() {
       /* if(_collOfHelpTeacher_1!=null)
            _collOfHelpTeacher_1.clear();
        else if(_collOfHelpTeacher_2!=null)
            _collOfHelpTeacher_2.clear();*/

        if (isMobile) {

            View studentprofile = topActionbar.getItem(R.id.teacher_review_profile_image);
            if (studentprofile != null) {
                int[] locationprofile = new int[2];
                studentprofile.getLocationOnScreen(locationprofile);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.student_profile, studentprofile.getPivotX(), studentprofile.getPivotY(), locationprofile[0], locationprofile[1], studentprofile.getMinimumWidth(), studentprofile.getMinimumHeight(), "", actionbartextSize, false, false));
            }

            View marker_1 = bottomActionbar.getItem(R.id.teacher_review_green);
            if (marker_1 != null) {
                int[] locationmarker1 = new int[2];
                marker_1.getLocationOnScreen(locationmarker1);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_1, marker_1.getPivotX(), marker_1.getPivotY(), locationmarker1[0], locationmarker1[1], marker_1.getMinimumWidth(), marker_1.getMinimumHeight(), CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, true, false));
            }

            View marker_2 = bottomActionbar.getItem(R.id.teacher_review_red);
            if (marker_2 != null) {
                int[] locationmarker2 = new int[2];
                marker_2.getLocationOnScreen(locationmarker2);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_2, marker_2.getPivotX(), marker_2.getPivotY(), locationmarker2[0], locationmarker2[1], marker_2.getMinimumWidth(), marker_2.getMinimumHeight(), CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, true, false));
            }

            View eraser = bottomActionbar.getItem(R.id.teacher_review_eraser);
            if (eraser != null) {
                int[] locationeraser = new int[2];
                eraser.getLocationOnScreen(locationeraser);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.eraser, eraser.getPivotX(), eraser.getPivotY(), locationeraser[0], locationeraser[1], eraser.getMinimumWidth(), eraser.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_ERASER, actionbartextSize, true, false));
            }

            View undo = bottomActionbar.getItem(R.id.teacher_review_undo);
            if (undo != null) {
                int[] locationundo = new int[2];
                undo.getLocationOnScreen(locationundo);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.undo, undo.getPivotX(), undo.getPivotY(), locationundo[0], locationundo[1], undo.getMinimumWidth(), undo.getMinimumHeight(), "<", actionbartextSize, true, false));
            }

            View arrow_1 = topActionbar.getItem(R.id.teacher_review_previous);
            if (arrow_1 != null) {
                int[] locationarrow1 = new int[2];
                arrow_1.getLocationOnScreen(locationarrow1);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.arrow1, arrow_1.getPivotX(), arrow_1.getPivotY(), locationarrow1[0], locationarrow1[1], arrow_1.getMinimumWidth(), arrow_1.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_PREVIOUS, actionbartextSize, false, false));
            }

            View arrow_2 = topActionbar.getItem(R.id.teacher_review_next);
            if (arrow_2 != null) {
                int[] locationarrow2 = new int[2];
                arrow_2.getLocationOnScreen(locationarrow2);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.arrow2, arrow_2.getPivotX(), arrow_2.getPivotY(), locationarrow2[0], locationarrow2[1], arrow_2.getMinimumWidth(), arrow_2.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_NEXT, actionbartextSize, false, false));
            }

            View done = bottomActionbar.getItem(R.id.teacher_review_done);
            if (done != null) {
                int[] locationdone = new int[2];
                done.getLocationOnScreen(locationdone);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.done, done.getPivotX(), done.getPivotY(), locationdone[0], locationdone[1], done.getMinimumWidth(), done.getMinimumHeight(), "", 16, true, false));
            }

            if (_collOfHelpTeacher_1 != null && _collOfHelpTeacher_1.size() == 5 && _collOfHelpTeacher_2 != null && _collOfHelpTeacher_2.size() == 3)
                startHelpScreenNextActivity(REVIEW);

        } else {
            View studentprofile = topActionbar.getItem(R.id.teacher_review_profile_image);
            if (studentprofile != null) {
                int[] locationprofile = new int[2];
                studentprofile.getLocationOnScreen(locationprofile);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.student_profile, studentprofile.getPivotX(), studentprofile.getPivotY(), locationprofile[0], locationprofile[1], studentprofile.getMinimumWidth(), studentprofile.getMinimumHeight(), "", actionbartextSize, false, false));
            }

            View marker_1 = topActionbar.getItem(R.id.teacher_review_green);
            if (marker_1 != null) {
                int[] locationmarker_1 = new int[2];
                marker_1.getLocationOnScreen(locationmarker_1);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_1, marker_1.getPivotX(), marker_1.getPivotY(), locationmarker_1[0] - 4, (locationmarker_1[1] + 7), marker_1.getMinimumWidth() + 3, marker_1.getMinimumHeight() + 3, CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, false, false));
            }

            View marker_2 = topActionbar.getItem(R.id.teacher_review_red);
            if (marker_2 != null) {
                int[] locationmarker_2 = new int[2];
                marker_2.getLocationOnScreen(locationmarker_2);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.marker_2, marker_2.getPivotX(), marker_2.getPivotY(), locationmarker_2[0] - 4, (locationmarker_2[1] + 7), marker_2.getMinimumWidth() + 3, marker_2.getMinimumHeight() + 3, CustomPlayerUIConstants.PT_COLOR_IC_TEXT, actionbartextSize, false, false));
            }

            View arrow_1 = topActionbar.getItem(R.id.teacher_review_previous);
            if (arrow_1 != null) {
                int[] locationarrow1 = new int[2];
                arrow_1.getLocationOnScreen(locationarrow1);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.arrow1, arrow_1.getPivotX(), arrow_1.getPivotY(), locationarrow1[0], locationarrow1[1], arrow_1.getMinimumWidth(), arrow_1.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_PREVIOUS, actionbartextSize, false, false));
            }

            View arrow_2 = topActionbar.getItem(R.id.teacher_review_next);
            if (arrow_2 != null) {
                int[] locationarrow2 = new int[2];
                arrow_2.getLocationOnScreen(locationarrow2);
                _collOfHelpTeacher_1.add(new HelpVo(R.string.arrow2, arrow_2.getPivotX(), arrow_2.getPivotY(), locationarrow2[0], locationarrow2[1], arrow_2.getMinimumWidth(), arrow_2.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_NEXT, actionbartextSize, false, false));
            }

            View eraser = topActionbar.getItem(R.id.teacher_review_eraser);
            if (eraser != null) {
                int[] locationeraser = new int[2];
                eraser.getLocationOnScreen(locationeraser);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.eraser, eraser.getPivotX(), eraser.getPivotY(), locationeraser[0], locationeraser[1], eraser.getMinimumWidth(), eraser.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_ERASER, actionbartextSize, false, false));
            }

            View done = topActionbar.getItem(R.id.teacher_review_done);
            if (done != null) {
                int[] locationdone = new int[2];
                done.getLocationOnScreen(locationdone);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.done, done.getPivotX(), done.getPivotY(), locationdone[0], locationdone[1], done.getMinimumWidth(), done.getMinimumHeight(), "", actionbartextSize, false, false));
            }

            View clearall = topActionbar.getItem(R.id.teacher_review_clear_all);
            if (clearall != null) {
                int[] locationclearall = new int[2];
                clearall.getLocationOnScreen(locationclearall);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.clear_All, clearall.getPivotX(), clearall.getPivotY(), locationclearall[0], locationclearall[1], clearall.getMinimumWidth(), clearall.getMinimumHeight(), CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, actionbartextSize, false, false));
            }

            View undo = topActionbar.getItem(R.id.teacher_review_undo);
            if (undo != null) {
                int[] locationundo = new int[2];
                undo.getLocationOnScreen(locationundo);
                _collOfHelpTeacher_2.add(new HelpVo(R.string.undo, undo.getPivotX(), undo.getPivotY(), locationundo[0], locationundo[1], undo.getMinimumWidth(), undo.getMinimumHeight(), "<", actionbartextSize, false, false));
            }

            if (_collOfHelpTeacher_1 != null && _collOfHelpTeacher_1.size() == 5 && _collOfHelpTeacher_2 != null && _collOfHelpTeacher_2.size() == 4)
                startHelpScreenNextActivity(REVIEW);
        }
    }

    private void startHelpScreenNextActivity(String type) {
        Intent i = new Intent(this, HelpScreenActivity.class);
        //i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK );
        HashMap<Integer, ArrayList<HelpVo>> hashMap = new HashMap<Integer, ArrayList<HelpVo>>();
        hashMap.put(0, _collOfHelpTeacher_1);
        hashMap.put(1, _collOfHelpTeacher_2);
        Bundle extras = new Bundle();
        extras.putSerializable("coll", hashMap);
        i.putExtra(HELPSCREEN_TYPE, type);
        i.putExtras(extras);
        startActivityForResult(i, Constants.HELPSCREEN_CLOSE_REQUESTCODE);
    }

    /**
     * Callback on single tap on bookplayer
     */

    @Override
    public void onTapofBookRenderer() {
        if (isThumbnailVisible) {
            hideThumbanilPanel();
        }

        // hiding dialog and open/close thumbnail
        hideDialog();
        if (isActionBarVisible) {
            toggleProgressSeekBar(false);
            hideActionBar();

            /*RelativeLayout.LayoutParams params= new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
            params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
            params.addRule(RelativeLayout.CENTER_HORIZONTAL);
            mTimeLeftLayout.setLayoutParams(params);*/
            if (isThumbnailVisible) {
                hideThumbanilPanel();
            }
        } else {
            toggleProgressSeekBar(true);
            showActionBar();

            /*RelativeLayout.LayoutParams params= new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
            params.addRule(RelativeLayout.ABOVE, bottomActionbar.getId());
            params.addRule(RelativeLayout.CENTER_HORIZONTAL);
            mTimeLeftLayout.setLayoutParams(params);*/

        }
        if (mBottomBookmarkFragment != null) {
            mBottomBookmarkFragment.dismiss();
            //showActionBar();
        }
        renderView.closeHighLight();
        //isHighlightActive = false;

        if (mReaderType == EBookType.FIXEDKITABOO) {
            if (mReadAloudIcon != null && !mReadAloudIcon.isEnabled())
                mReadAloudIcon.setEnabled(true);
        }
    }


    @Override
    public void onImageTablePopupEvent(Boolean isModalPopupOpened) {
        if (isModalPopupOpened) {
            hideBottomBar();
            hideActionBar();
            if (SDKManager.getInstance().isPageScrollFeatureOn() && parentpageScrollSeekbarView != null && mReaderType == EBookType.REFLOWEPUB) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        hideProgressSeekBar();
                    }
                });

            }
        } else {
            showBottomBar();
            showActionBar();
            if (SDKManager.getInstance().isPageScrollFeatureOn() && parentpageScrollSeekbarView != null && mReaderType == EBookType.REFLOWEPUB) {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        showProgressSeekBar();
                    }
                });

            }
        }

    }


    /**
     * Callback when Pen-Draw completed
     *
     * @param PentoolVO Current session pentool object
     */

    @Override
    public void onPenDrawCompleted(PentoolVO PentoolVO) {
        if (!SDKManager.getInstance().isReviewMode()) {
            if (PentoolVO != null && PentoolVO.getLocalID() == -1) {
                PentoolVO.setDateTime(Utils.getDateTime());
                PentoolVO.setMode(com.hurix.database.dbutility.Constants.UGC_ITEM_MODE_NEW);
                long penMarkerID = DatabaseManager.getInstance(this).addPenMarkers(PentoolVO,
                        bookId,
                        userID, colorWithHash);
                PentoolVO.setLocalID((int) penMarkerID);
                //set pageVO with updated highlight data
            } else {
                PentoolVO.setDateTime(Utils.getDateTime());
                PentoolVO.setSyncStatus(false);
                if (PentoolVO.getLocalID() > 0) {
                    PentoolVO.setMode(EpubConstants.UGC_ITEM_MODE_MODIFIED);
                }
                DatabaseManager.getInstance(this).updatePenMarkers(PentoolVO, userID, bookId, colorWithHash);
            }
        } else {
            SDKManager.getInstance().setNewlyAddedPenMarkersList(GlobalDataManager.getInstance().getLocalBookData().getCurrentTeacherAssesment(), PentoolVO);
            SDKManager.getInstance().setTeacherReviewNewlyAddedPentoolVos(PentoolVO);
        }
    }

    /**
     * Callback when Pen-Undo completed
     *
     * @param vo Current session pentool object
     */

    @Override
    public void onPenUndoCompleted(PentoolVO vo) {
        if (!SDKManager.getInstance().isNewTeacherReviewModeOn()) {
            if (mReaderType == EBookType.FIXEDKITABOO)
                renderView.loadAsset(AssetType.HighlightNote, vo.getFolioID());
            else
                renderView.loadAsset(AssetType.RefreshCanvas, vo.getFolioID());
        } else {
            if (mReaderType == EBookType.FIXEDEPUB) {
                //to refresh canvas for pentool Epub
                if (!SDKManager.getInstance().isClearAllClicked())
                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, vo.getFolioID());
            } else {
                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, vo.getFolioID());
            }

            new Handler(getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (SDKManager.getInstance().isReviewMode() || SDKManager.getInstance().isNewTeacherReviewModeOn()) {
                        SDKManager.getInstance().refreshReviewPage();
                    }
                }
            }, 500);
        }
    }

    /**
     * Callback when current pentool object is selected for deletion
     *
     * @param vo Current session pentool object
     */
    @Override
    public void onPenSelectedForDeletion(PentoolVO vo) {
        if (SDKManager.getInstance().isNewTeacherReviewModeOn())
            deletePenMarkForReviewAndRefreshPage(vo, mCurrentAnnotationpage);
        else
            deletePenMarkAndRefreshPage(vo);
    }

    private void deletePenMarkAndRefreshPage(PentoolVO vo) {
        PentoolVO tmpItem = vo;
        tmpItem.setMode(Constants.UGC_ITEM_MODE_DELETED);
        tmpItem.setSyncStatus(false);
        tmpItem.setIsSubmitted(false);
        tmpItem.setDateTime(Utils.getDateTime());
        if (tmpItem.getUGCID() > 0 && tmpItem.getFolioID() != null) {
            DatabaseManager.getInstance(PlayerActivity.this).updatePenMarkers(tmpItem, userID, bookId, colorWithHash);
            penHelper.setDeletedPenMarkerVO(tmpItem);
            SDKManager.getInstance().setAllPenMarkerVO(vo.getFolioID(), DatabaseManager.getInstance(PlayerActivity.this).getAllPenMarkersByPage(userID, vo.getFolioID(), bookId));
        } else {
            if (DatabaseManager.getInstance(PlayerActivity.this).deletePenMarkers(tmpItem, userID)) {
                penHelper.setDeletedPenMarkerVO(tmpItem);
                SDKManager.getInstance().setAllPenMarkerVO(vo.getFolioID(), DatabaseManager.getInstance(PlayerActivity.this).getAllPenMarkersByPage(userID, vo.getFolioID(), bookId));
            }
        }
        penHelper.setEraserMode(penHelper.isInPenDeleteMode(), userID, currentFoliId, bookId);

        if (mReaderType == EBookType.FIXEDEPUB) {
            /*//to refresh canvas for pentool Epub
            if (!SDKManager.getInstance().isClearAllClicked())
                renderView.loadAsset(AssetType.PentoolUndoAndDelete, vo.getFolioID());
        } else {
            renderView.loadAsset(AssetType.HighlightNote, vo.getFolioID());*/

            //renderView.loadAsset(AssetType.PentoolUndoAndDelete, vo.getFolioID());
        }
    }

    private void deletePenMarkForReviewAndRefreshPage(PentoolVO vo, UserPageVO pageVO) {
        if (pageVO != null) {
            PentoolVO tmpItem = vo;
            tmpItem.setMode(Constants.UGC_ITEM_MODE_DELETED);
            tmpItem.setSyncStatus(false);
            tmpItem.setIsSubmitted(true);
            tmpItem.setDateTime(Utils.getDateTime());
            if (tmpItem.getUGCID() > 0) {
                if (!SDKManager.getInstance().isNewTeacherReviewModeOn())
                    DatabaseManager.getInstance(PlayerActivity.this).updatePenMarkers(tmpItem, userID, bookId, colorWithHash);
                penHelper.setDeletedPenMarkerVO(tmpItem);
                SDKManager.getInstance().setAllPenMarkerVO(pageVO.getFolioID(), pageVO.getPenColl());
            } else {
                if (!SDKManager.getInstance().isNewTeacherReviewModeOn() && DatabaseManager.getInstance(PlayerActivity.this).deletePenMarkers(tmpItem, userID)) {
                    penHelper.setDeletedPenMarkerVO(tmpItem);
                    SDKManager.getInstance().setAllPenMarkerVO(pageVO.getFolioID(), pageVO.getPenColl());
                } else {
                    penHelper.setDeletedPenMarkerVO(tmpItem);
                    SDKManager.getInstance().setAllPenMarkerVO(pageVO.getFolioID(), pageVO.getPenColl());
                }

            }
            penHelper.setEraserMode(penHelper.isInPenDeleteMode(), userID, currentFoliId, bookId);

            if (mReaderType == EBookType.FIXEDEPUB) {
                //to refresh canvas for pentool Epub
                if (!SDKManager.getInstance().isClearAllClicked())
                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
            } else {
                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
            }

            new Handler(getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (SDKManager.getInstance().isReviewMode() || SDKManager.getInstance().isNewTeacherReviewModeOn()) {
                        SDKManager.getInstance().refreshReviewPage();
                    }
                }
            }, 1000);
        }

    }

    /**
     * Callback on occurrence of error while book parsing
     *
     * @param ex : Exception
     */
    @Override
    public void onBookLoadingFailed(Exception ex) {
        Toast.makeText(this, "Error occur while initializing the Book :", Toast.LENGTH_SHORT);
    }

    /**
     * Callback on occurrence of error while
     *
     * @param ex : Exception
     */
    @Override
    public void onPageLoadingFailed(Exception ex) {

    }

    /**
     * Callback for setting-Panel actions handling
     *
     * @param nightSwitchCompat       :To handle Day/Night mode
     * @param pageScrollSwitchCompact :To handle Vertical/Horizontal page mode
     * @param setFontSize             :To handle fontsize of page
     */
    @Override
    public void settingPanelComponentHandling(SwitchCompat nightSwitchCompat, SwitchCompat pageScrollSwitchCompact, SeekBar setFontSize) {
        // EpubSettingPanelAction epubSettingPanelAction=new EpubSettingPanelAction(getBaseContext());
        // epubSettingPanelAction.handleActions(nightSwitchCompat,pageScrollSwitchCompact,setFontSize);
    }

    private void setHighlightArray() {
        mHighlightColorCollection = new HashMap<>();
        mHighlightColorCollection.put("#D17D00", ACTION_ID_HIGHLIGHT_ORANGE);
        mHighlightColorCollection.put("#fcf9a3", ACTION_ID_HIGHLIGHT_YELLOW);
        mHighlightColorCollection.put("#F4D631", ACTION_ID_HIGHLIGHT_YELLOW);
        mHighlightColorCollection.put("#FFFF00", ACTION_ID_HIGHLIGHT_YELLOW);
        mHighlightColorCollection.put("#cd3a3a", ACTION_ID_HIGHLIGHT_RED);
        mHighlightColorCollection.put("#8E44AD", ACTION_ID_HIGHLIGHT_PURPLE);
        mHighlightColorCollection.put("#99cc00", ACTION_ID_HIGHLIGHT_GREEN);
        mHighlightColorCollection.put("#33E5B5", ACTION_ID_HIGHLIGHT_BLUE);

        mHighlightColorCollection.put(getResources().getString(R.string.note_lightyellow_color), ACTION_ID_HIGHLIGHT_YELLOW);
        mHighlightColorCollection.put(getResources().getString(R.string.note_yellow_color), ACTION_ID_HIGHLIGHT_YELLOW);
        mHighlightColorCollection.put(getResources().getString(R.string.note_red_color), ACTION_ID_HIGHLIGHT_RED);
        mHighlightColorCollection.put(getResources().getString(R.string.note_purple_color), ACTION_ID_HIGHLIGHT_PURPLE);
        mHighlightColorCollection.put(getResources().getString(R.string.note_lightgreen_color), ACTION_ID_HIGHLIGHT_GREEN);
        mHighlightColorCollection.put(getResources().getString(R.string.note_skyblue_color), ACTION_ID_HIGHLIGHT_BLUE);

        mHighlightColorCollection.put(getResources().getString(R.string.note_orange_color), ACTION_ID_HIGHLIGHT_ORANGE);
        mHighlightColorCollection.put(getResources().getString(R.string.note_pink_color), ACTION_ID_HIGHLIGHT_PINK);
        mHighlightColorCollection.put(getResources().getString(R.string.note_new_purple_color), ACTION_ID_HIGHLIGHT_PURPLE);
        mHighlightColorCollection.put(getResources().getString(R.string.note_green_color), ACTION_ID_HIGHLIGHT_GREEN);
        mHighlightColorCollection.put(getResources().getString(R.string.note_blue_color), ACTION_ID_HIGHLIGHT_BLUE);


        mHighlightIdCollection = new ArrayList<>();
        mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_ORANGE);
        mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_PINK);
        mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_PURPLE);
        mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_GREEN);
        mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_BLUE);
    }

    /**
     * Create customise highlight popup with different icon , color , background
     */
    private void initHighlightPopup() {

        if (actionView == null) {

            /*mHighlightColorCollection = new HashMap<>();
            mHighlightColorCollection.put("#fcf9a3", ACTION_ID_HIGHLIGHT_YELLOW);
            mHighlightColorCollection.put("#F4D631", ACTION_ID_HIGHLIGHT_YELLOW);
            mHighlightColorCollection.put("#cd3a3a", ACTION_ID_HIGHLIGHT_RED);
            mHighlightColorCollection.put("#8E44AD", ACTION_ID_HIGHLIGHT_PURPLE);
            mHighlightColorCollection.put("#99cc00", ACTION_ID_HIGHLIGHT_GREEN);
            mHighlightColorCollection.put("#33E5B5", ACTION_ID_HIGHLIGHT_BLUE);


            mHighlightIdCollection = new ArrayList<>();
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_YELLOW);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_RED);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_PURPLE);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_GREEN);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_BLUE);*/


            //create Kitaboo SDK highlight popview instance
            actionView = new HighlightActionView(this, HighlightActionView.HORIZONTAL);
            //get Rootview to customize
            actionView.getRootView().setBackgroundColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getPopup().getBackground()));

            //add the items wants to be in customize highlight popup
            // actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_GREEN, getResources().getDrawable(R.drawable.green), true));

            //add the graphilcale view by using icon/text/image and pass to Highlight

            IconDrawable orangeHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            orangeHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.note_orange_color)));

            IconDrawable pinkHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            pinkHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.note_pink_color)));

            IconDrawable purpleHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            purpleHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.note_new_purple_color)));

            IconDrawable greenHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            greenHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.note_green_color)));

            IconDrawable blueHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            blueHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.note_blue_color)));

            IconDrawable noteDrawable = new IconDrawable(getApplicationContext(),
                    PlayerUIConstants.HC_NOTE_IC_TEXT, com.hurix.commons.utils.Utils.getFontFilePath());
            noteDrawable.sizeDp(29).color(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getIconColor()));

            IconDrawable searchDrawable = new IconDrawable(getApplicationContext(),
                    PlayerUIConstants.HC_SEARCH_IC_TEXT, com.hurix.commons.utils.Utils.getFontFilePath());
            searchDrawable.sizeDp(29).color(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getIconColor()));

            IconDrawable deleteDrawable = new IconDrawable(getApplicationContext(),
                    PlayerUIConstants.HC_DELETE_IC_TEXT, com.hurix.commons.utils.Utils.getFontFilePath());
            deleteDrawable.sizeDp(29).color(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getIconColor()));

            //add the items wants to be in customize highlight popup


            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_ORANGE, orangeHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_PINK, pinkHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_PURPLE, purpleHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_GREEN, greenHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_BLUE, blueHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_NOTE, noteDrawable, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_SEARCH, searchDrawable, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_DELETE, deleteDrawable, true));


            //initialize and add the click listener for the customized popup
            actionView.addOnActionItemClickListener(new HighlightActionView.OnActionItemClickListener() {


                @Override
                public void onItemClick(HighlightActionView highlightAction, int pos, int actionId, HighlightVO obj, View view) {

                    handleHighlightItemClick(highlightAction, actionId, obj, view);

                    if (mReaderType != EBookType.REFLOWEPUB) {
                        highlightAction.dismiss();

                    }

                }

            });

            actionView.addOnHighlightPopupDismissListener(new HighlightActionView.OnDismissListener() {
                @Override
                public void onDismiss() {
                }
            });


            actionView.setStartStcik(getResources().getDrawable(R.drawable.start));
            actionView.setEndStick(getResources().getDrawable(R.drawable.end));
            renderView.setHighlightActionView(actionView); // add the customized highlight popview instance to SDK renderer

        }
    }

    private void initHighlightPopupNavneet() {

        if (actionView == null) {

            /*mHighlightColorCollection = new HashMap<>();
            mHighlightColorCollection.put("#fcf9a3", ACTION_ID_HIGHLIGHT_YELLOW);
            mHighlightColorCollection.put("#F4D631", ACTION_ID_HIGHLIGHT_YELLOW);
            mHighlightColorCollection.put("#cd3a3a", ACTION_ID_HIGHLIGHT_RED);
            mHighlightColorCollection.put("#8E44AD", ACTION_ID_HIGHLIGHT_PURPLE);
            mHighlightColorCollection.put("#99cc00", ACTION_ID_HIGHLIGHT_GREEN);
            mHighlightColorCollection.put("#33E5B5", ACTION_ID_HIGHLIGHT_BLUE);


            mHighlightIdCollection = new ArrayList<>();
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_YELLOW);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_RED);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_PURPLE);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_GREEN);
            mHighlightIdCollection.add(ACTION_ID_HIGHLIGHT_BLUE);*/


            //create Kitaboo SDK highlight popview instance
            actionView = new HighlightActionView(this, HighlightActionView.HORIZONTAL);
            //get Rootview to customize
            actionView.getRootView().setBackgroundColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getPopup().getBackground()));

            //add the items wants to be in customize highlight popup
            // actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_GREEN, getResources().getDrawable(R.drawable.green), true));

            //add the graphilcale view by using icon/text/image and pass to Highlight
            IconDrawable orangeHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            orangeHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.nv_note_yellow_color)));

            IconDrawable pinkHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            pinkHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.nv_note_red_color)));

            IconDrawable purpleHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            purpleHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.nv_note_voilet_color)));

            IconDrawable greenHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            greenHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.nv_note_green_color)));

            IconDrawable blueHighlightBtn = new IconDrawable(getApplicationContext(),
                    CustomPlayerUIConstants.HIGHLIGHT_POPUP_COLOR_ICON, com.hurix.commons.utils.Utils.getFontFilePath());
            blueHighlightBtn.sizeDp(29).color(Color.parseColor(getResources().getString(R.string.nv_note_blue_color)));

            IconDrawable noteDrawable = new IconDrawable(getApplicationContext(),
                    PlayerUIConstants.HC_NOTE_IC_TEXT, com.hurix.commons.utils.Utils.getFontFilePath());
            noteDrawable.sizeDp(29).color(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getIconColor()));

            IconDrawable searchDrawable = new IconDrawable(getApplicationContext(),
                    PlayerUIConstants.HC_SEARCH_IC_TEXT, com.hurix.commons.utils.Utils.getFontFilePath());
            searchDrawable.sizeDp(29).color(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getIconColor()));

            IconDrawable deleteDrawable = new IconDrawable(getApplicationContext(),
                    PlayerUIConstants.HC_DELETE_IC_TEXT, com.hurix.commons.utils.Utils.getFontFilePath());
            deleteDrawable.sizeDp(29).color(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getHighlight().getIconColor()));

            //add the items wants to be in customize highlight popup


            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_ORANGE, orangeHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_PINK, pinkHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_PURPLE, purpleHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_GREEN, greenHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_HIGHLIGHT_BLUE, blueHighlightBtn, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_NOTE, noteDrawable, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_SEARCH, searchDrawable, true));
            actionView.addHighlightActionItem(new HighlightActionItem(ACTION_ID_DELETE, deleteDrawable, true));


            //initialize and add the click listener for the customized popup
            actionView.addOnActionItemClickListener(new HighlightActionView.OnActionItemClickListener() {


                @Override
                public void onItemClick(HighlightActionView highlightAction, int pos, int actionId, HighlightVO obj, View view) {

                    handleHighlightItemClick(highlightAction, actionId, obj, view);

                    if (mReaderType != EBookType.REFLOWEPUB) {
                        highlightAction.dismiss();

                    }

                }

            });

            actionView.addOnHighlightPopupDismissListener(new HighlightActionView.OnDismissListener() {
                @Override
                public void onDismiss() {
                }
            });


            actionView.setStartStcik(getResources().getDrawable(R.drawable.start));
            actionView.setEndStick(getResources().getDrawable(R.drawable.end));
            renderView.setHighlightActionView(actionView); // add the customized highlight popview instance to SDK renderer

        }
    }

    /**
     * Responsible to handle the click event of customized highlight popup buttons
     *
     * @param highlightAction : highlight contextual popup
     * @param actionId        : id of clicked button
     * @param highlightObj    : Highlight object
     * @param view            : clicked item view
     */
    private void handleHighlightItemClick(HighlightActionView highlightAction, int actionId, final HighlightVO highlightObj, View view) {
        HighlightVO vo;
        switch (actionId) {
            case ACTION_ID_HIGHLIGHT_GREEN:
                vo = highlightAction.getHighlightObj();
                vo.setImportant(false);
                vo.setColor(getResources().getString(R.string.note_green_color));
                vo.setTextColor("#ffffff");
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_HIGHLIGHT_BLUE:
                vo = highlightAction.getHighlightObj();
                vo.setImportant(false);
                vo.setColor(getResources().getString(R.string.note_blue_color));
                vo.setTextColor("#ffffff");
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_HIGHLIGHT_PURPLE:
                //renderView.highlightText("#ffffff", "#8E44AD");
                vo = highlightAction.getHighlightObj();
                vo.setImportant(false);
                vo.setColor(getResources().getString(R.string.note_new_purple_color));
                vo.setTextColor("#ffffff");
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            /*case ACTION_ID_HIGHLIGHT_ORANGE:
                renderView.highlightText("#ffffff", "#F39C12");
                renderView.hightlightItemClicked(true);
                break;*/
            case ACTION_ID_HIGHLIGHT_PINK:
                vo = highlightAction.getHighlightObj();
                vo.setColor(getResources().getString(R.string.note_pink_color));
                vo.setTextColor("#ffffff");
                vo.setImportant(true);
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_HIGHLIGHT_ORANGE:
                vo = highlightAction.getHighlightObj();
                vo.setColor(getResources().getString(R.string.note_orange_color));
                vo.setTextColor("#ffffff");
                vo.setImportant(false);
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_SEARCH:
                clickOnSearchiconFromHighlightPopup = true;
                showActionBar();
                mHighlightedText = highlightAction.getHighlightObj().getHighlightedText().trim();
                highlightAction.dismiss();
                renderView.isHighlightActive(false);
                break;
            case ACTION_ID_DELETE:
                DialogUtils.showYesNoAlert(highlightAction.getHighlightObj(), this, getResources()
                                .getString(R.string.delete_note_title),
                        getResources().getString(R.string.alert_highlight_delete_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {
                            @Override
                            public void onPostiveClick(Object obj) {

                                HighlightVO highlightVO = (HighlightVO) obj;
                                if (highlightVO != null) {

                                    if (highlightVO.getLocalID() != -1) {

                                        //perform DB operation and update highlightdata
                                        deleteHighlight(highlightVO);

                                        //send Analytics data
                                        String eventname = EventName.NORMAL_HIGHLIGHT_DELETED.toString();
                                        if (highlightVO.isImportant()) {
                                            eventname = EventName.IMP_HIGLIGHT_DELETED.toString();
                                        }
                                        if (!highlightVO.getNoteData().isEmpty()) {
                                            eventname = EventName.NOTE_DELETED.toString();
                                        }

                                        if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                                            AnalyticsManager.getInstance(PlayerActivity.this).
                                                    TrackEvent(eventname,
                                                            highlightVO.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", "");
                                        } else {
                                            AnalyticsManager.getInstance(PlayerActivity.this).
                                                    TrackEvent(eventname,
                                                            highlightVO.getLocalID() + "", highlightVO.getFolioID() + "", "");
                                        }
                                    }
                                    renderView.deleteHighlight(highlightVO);
                                    highlightVO = null;
                                    //renderView.isHighlightActive(true);
                                }
                            }

                            @Override
                            public void onNegativeClick(Object obj) {

                            }

                        });
                break;
            case ACTION_ID_BOLD:

                renderView.setFontStyle(FONT_STYLE.BOLD);
                break;
            case ACTION_ID_ITALIC:
                renderView.setFontStyle(FONT_STYLE.ITALIC);
                break;
            case ACTION_ID_UNDERLINE:
                renderView.setFontStyle(FONT_STYLE.UNDERLINE);
                break;
            case ACTION_ID_NOTE:
                //show note
                renderView.isHighlightActive(true);
                String color = "";
                boolean defaultcolor = false;
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    defaultcolor = highlightAction.getHighlightObj().getColor().equals(PlayerUIConstants.HIGHLIGHT_DEFAULT_COLOR);
                    if (highlightAction.getHighlightObj().getColor() != null
                            && !highlightAction.getHighlightObj().getColor().isEmpty() && !defaultcolor) {
                        color = highlightAction.getHighlightObj().getColor();
                    } else {
                        if (highlightAction.getHighlightObj().isImportant()) {
                            color = getResources().getString(R.string.note_pink_color);
                        } else {
                            color = getResources().getString(R.string.note_orange_color);
                        }
                    }
                } else {
                    if (highlightAction.getHighlightObj().getColor() != null
                            && !highlightAction.getHighlightObj().getColor().isEmpty() && !defaultcolor) {
                        if (isJson(highlightAction.getHighlightObj().getColor())) {

                            JSONObject jsonColorObject = null;
                            try {
                                jsonColorObject = new JSONObject(highlightAction.getHighlightObj().getColor());
                                color = jsonColorObject.get("backgroundColor").toString();

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        } else {
                            color = highlightAction.getHighlightObj().getColor();
                        }
                    } else {
                        if (highlightAction.getHighlightObj().isImportant()) {
                            color = getResources().getString(R.string.note_pink_color);
                        } else {
                            color = getResources().getString(R.string.note_orange_color);
                        }
                    }

                }
                highlightAction.getHighlightObj().setColor(color);
                //FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.CONTEXTUAL_NOTE_CLICK);
                initStickynote(highlightAction.getHighlightObj(), true);
                //initNotePopup(highlightAction.getHighlightObj().getHighlightedText(), highlightAction.getHighlightObj());
                break;
        }
    }


    private void handleHighlightItemClickNavneet(HighlightActionView highlightAction, int actionId, final HighlightVO highlightObj, View view) {
        HighlightVO vo;
        switch (actionId) {
            case ACTION_ID_HIGHLIGHT_GREEN:
                vo = highlightAction.getHighlightObj();
                vo.setImportant(false);
                vo.setColor(getResources().getString(R.string.nv_note_green_color));
                vo.setTextColor("#ffffff");
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_HIGHLIGHT_BLUE:
                vo = highlightAction.getHighlightObj();
                vo.setImportant(false);
                vo.setColor(getResources().getString(R.string.nv_note_blue_color));
                vo.setTextColor("#ffffff");
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_HIGHLIGHT_PURPLE:
                //renderView.highlightText("#ffffff", "#8E44AD");
                vo = highlightAction.getHighlightObj();
                vo.setImportant(false);
                vo.setColor(getResources().getString(R.string.nv_note_voilet_color));
                vo.setTextColor("#ffffff");
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            /*case ACTION_ID_HIGHLIGHT_ORANGE:
                renderView.highlightText("#ffffff", "#F39C12");
                renderView.hightlightItemClicked(true);
                break;*/
            case ACTION_ID_HIGHLIGHT_PINK:
                vo = highlightAction.getHighlightObj();
                vo.setColor(getResources().getString(R.string.nv_note_red_color));
                vo.setTextColor("#ffffff");
                vo.setImportant(true);
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_HIGHLIGHT_ORANGE:
                vo = highlightAction.getHighlightObj();
                vo.setColor(getResources().getString(R.string.nv_note_yellow_color));
                vo.setTextColor("#ffffff");
                vo.setImportant(false);
                renderView.highlightText(vo);
                //renderView.isHighlightActive(true);
                renderView.hightlightItemClicked(true);
                break;
            case ACTION_ID_SEARCH:
                clickOnSearchiconFromHighlightPopup = true;
                showActionBar();
                mHighlightedText = highlightAction.getHighlightObj().getHighlightedText();
                highlightAction.dismiss();
                renderView.isHighlightActive(false);
                break;
            case ACTION_ID_DELETE:
                DialogUtils.showYesNoAlert(highlightAction.getHighlightObj(), this, getResources()
                                .getString(R.string.delete_note_title),
                        getResources().getString(R.string.alert_highlight_delete_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {
                            @Override
                            public void onPostiveClick(Object obj) {

                                HighlightVO highlightVO = (HighlightVO) obj;
                                if (highlightVO != null) {

                                    if (highlightVO.getLocalID() != -1) {

                                        //perform DB operation and update highlightdata
                                        deleteHighlight(highlightVO);

                                        //send Analytics data
                                        String eventname = EventName.NORMAL_HIGHLIGHT_DELETED.toString();
                                        if (highlightVO.isImportant()) {
                                            eventname = EventName.IMP_HIGLIGHT_DELETED.toString();
                                        }
                                        if (!highlightVO.getNoteData().isEmpty()) {
                                            eventname = EventName.NOTE_DELETED.toString();
                                        }

                                        if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                                            AnalyticsManager.getInstance(PlayerActivity.this).
                                                    TrackEvent(eventname,
                                                            highlightVO.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", "");
                                        } else {
                                            AnalyticsManager.getInstance(PlayerActivity.this).
                                                    TrackEvent(eventname,
                                                            highlightVO.getLocalID() + "", highlightVO.getFolioID() + "", "");
                                        }
                                    }
                                    renderView.deleteHighlight(highlightVO);
                                    highlightVO = null;
                                    //renderView.isHighlightActive(true);
                                }
                            }

                            @Override
                            public void onNegativeClick(Object obj) {

                            }

                        });
                break;
            case ACTION_ID_BOLD:

                renderView.setFontStyle(FONT_STYLE.BOLD);
                break;
            case ACTION_ID_ITALIC:
                renderView.setFontStyle(FONT_STYLE.ITALIC);
                break;
            case ACTION_ID_UNDERLINE:
                renderView.setFontStyle(FONT_STYLE.UNDERLINE);
                break;
            case ACTION_ID_NOTE:
                //show note
                renderView.isHighlightActive(true);
                String color = "";
                boolean defaultcolor = false;
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    defaultcolor = highlightAction.getHighlightObj().getColor().equals(PlayerUIConstants.HIGHLIGHT_DEFAULT_COLOR);
                    if (highlightAction.getHighlightObj().getColor() != null
                            && !highlightAction.getHighlightObj().getColor().isEmpty() && !defaultcolor) {
                        color = highlightAction.getHighlightObj().getColor();
                    } else {
                        if (highlightAction.getHighlightObj().isImportant()) {
                            color = getResources().getString(R.string.nv_note_red_color);
                        } else {
                            color = getResources().getString(R.string.nv_note_yellow_color);
                        }
                    }
                } else {
                    if (highlightAction.getHighlightObj().getColor() != null
                            && !highlightAction.getHighlightObj().getColor().isEmpty() && !defaultcolor) {
                        if (isJson(highlightAction.getHighlightObj().getColor())) {

                            JSONObject jsonColorObject = null;
                            try {
                                jsonColorObject = new JSONObject(highlightAction.getHighlightObj().getColor());
                                color = jsonColorObject.get("backgroundColor").toString();

                            } catch (JSONException e) {
                                e.printStackTrace();
                            }
                        } else {
                            color = highlightAction.getHighlightObj().getColor();
                        }
                    } else {
                        if (highlightAction.getHighlightObj().isImportant()) {
                            color = getResources().getString(R.string.nv_note_red_color);
                        } else {
                            color = getResources().getString(R.string.nv_note_yellow_color);
                        }
                    }

                }
                highlightAction.getHighlightObj().setColor(color);
                initStickynote(highlightAction.getHighlightObj(), true);
                //initNotePopup(highlightAction.getHighlightObj().getHighlightedText(), highlightAction.getHighlightObj());
                break;
        }
    }


    private boolean isJson(String test) {
        try {
            new JSONObject(test);
        } catch (JSONException ex) {
            // edited, to include @Arthur's comment
            // e.g. in case JSONArray is valid as well...
            try {
                new JSONArray(test);
            } catch (JSONException ex1) {
                return false;
            }
        }
        return true;
    }

    /**
     * Callback when StickyNote is dismissed
     */

    @Override
    public void onStickyNoteDismissed() {
        renderView.isStickyNoteActive(false);
        if ((findViewById(R.id.stickynotelayout)) != null && (findViewById(R.id.stickynotelayout)).getVisibility() == VISIBLE) {
            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.STICKYNOTE);
            renderView.isStickyNoteActive(true);
        }

    }

    /**
     * Responsible to handle the click event when comment is added in notes
     *
     * @param comments      User comment
     * @param mHighlightObj Current Highlight\Note object
     */
    @Override
    public void onCommentPostClick(String comments, HighlightVO mHighlightObj) {
        onNoteCommented(comments, mHighlightObj);
        if (tabMyDataFragment != null) {
            tabMyDataFragment.refreshMyDataNoteFragment();
        }
    }

    private void onNoteCommented(String comments, HighlightVO mHighlightObj) {
        if (!comments.equalsIgnoreCase("")) {
            CommentsVO commnetVo = new CommentsVO();
            commnetVo.setCommentData(comments);

            commnetVo.setDateTime(Utils.getDateTime());
            if (mHighlightObj != null && mHighlightObj.getCreatedByUserVO() != null) {
                if (mHighlightObj.isNoteShared() || mHighlightObj.getCreatedByUserVO().getUserID() != UserController.getInstance(PlayerActivity.this).getUserVO().getUserID()) {
                    commnetVo.setUserID(mHighlightObj.getCreatedByUserVO().getUserID());
                    mHighlightObj.setNoteShared(true);
                } else
                    commnetVo.setUserID(UserController.getInstance(PlayerActivity.this).getUserVO().getUserID());
            }
            commnetVo.setDisplayName(UserController.getInstance(PlayerActivity.this).getUserVO().getDisplayName());
            mHighlightObj.getCommentVos().add(commnetVo);
        }

        mHighlightObj.setSyncStatus(false);
        mHighlightObj.setMode(Constants.UGC_ITEM_MODE_MODIFIED);

        saveHighlight(mHighlightObj);
        getHighlightFromDB(mHighlightObj.getFolioID());
        renderView.drawNote(mHighlightObj);
    }

    /**
     * Responsible to handle the [Highlight\Note] object for saving purpose
     *
     * @param vo Current [Highlight\note] object
     */
    @Override
    public void onSaveClicked(HighlightVO vo) {
        renderView.isStickyNoteActive(false);
        saveHighlight(vo);
        getHighlightFromDB(vo.getFolioID());
        renderView.drawNote(vo);
        if (mStickyNotePopup != null)
            mStickyNotePopup.dismiss();
        if (actionView != null) {
            actionView.dismiss();
        }
    }

    /**
     * Callback when share button is clicked
     *
     * @param vo                     Current [Highlight\note] object
     * @param selectedHighlightColor Shared color
     */

    @Override
    public void onShareClicked(HighlightVO vo, String selectedHighlightColor) {
        openSticyNoteShareScreen(vo, selectedHighlightColor);
    }

    /**
     * Callback when [Highlight\note] is selected for deletion
     *
     * @param vo Current [Highlight\note] object
     */
    @Override
    public void onDeleteClicked(HighlightVO vo) {
        DialogUtils.showYesNoAlert(vo, PlayerActivity.this, getResources()
                        .getString(R.string.delete_note_title),
                getResources().getString(R.string.alert_highlight_delete_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {
                    @Override
                    public void onPostiveClick(Object obj) {
                        HighlightVO highlightVO = (HighlightVO) obj;
                        if (highlightVO != null) {
                            if (mStickyNotePopup != null)
                                mStickyNotePopup.dismiss();
                            deleteHighlight(highlightVO);
                            renderView.deleteHighlight(highlightVO);
                            saveAnalytics(highlightVO, EventName.NOTE_DELETED.toString());
                            highlightVO = null;
                        }
                    }

                    @Override
                    public void onNegativeClick(Object obj) {
                    }
                });
    }

    private void initStickynote(HighlightVO vo, boolean isFromMenuItem) {
        if (getResources().getBoolean(R.bool.is_AAO) || getResources().getBoolean(R.bool.is_ADA_Client) ||
                getResources().getBoolean(R.bool.is_ACEP_client) || getResources().getBoolean(R.bool.is_islamic_publication)) {
            mStickyNotePopup = new CustomNoteView(PlayerActivity.this, readerThemeSettingVo, isMobile,
                    isFromMenuItem, false);
        } else {
            mStickyNotePopup = new CustomNoteView(PlayerActivity.this, readerThemeSettingVo, isMobile,
                    isFromMenuItem, UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled());
        }
        mStickyNotePopup.addStickyListeners(PlayerActivity.this);
        if (vo != null && vo.getCreatedByUserVO() != null && vo.getCreatedByUserVO().getUserID() != userID)
            vo.setNoteShared(true);
        mStickyNotePopup.setHighlightObj(vo, userID, bookId, currentFoliId);
        mStickyNotePopup.setHighlightedText(vo.getHighlightedText());
        mStickyNotePopup.setCanceledOnTouchOutside(true);
        if (!PlayerActivity.this.isFinishing()) {
            mStickyNotePopup.show();
        }
    }

    /**
     * this method used for calculate the ,height nad width of dialog for mobile device
     * As it shows fullscreen in mobile device and different params for tablet
     */
    private void setNoteDilogParams() {
        if (notepopup != null) {
            if (isMobile) {

                notepopup.getWindow().setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.MATCH_PARENT);
            } else {

                DisplayMetrics displayMetrics = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                int height = displayMetrics.heightPixels;
                int width = displayMetrics.widthPixels;
                int mHeightPixels = com.hurix.reader.kitaboosdkrenderer.sdkUtils.Utils.dpToPx((int) getResources().getDimension(R.dimen.sticky_NoteDialog_Height));
                int mWidthPixels = com.hurix.reader.kitaboosdkrenderer.sdkUtils.Utils.dpToPx((int) getResources().getDimension(R.dimen.sticky_NoteDialog_Width));
                int mLandscapeHeightPixels = com.hurix.reader.kitaboosdkrenderer.sdkUtils.Utils.dpToPx((int) getResources().getDimension(R.dimen.sticky_NoteDialog_Landscape_Height));

                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                    notepopup.setLayoutParams((width / 2) + mWidthPixels, (height / 2) + mHeightPixels);
                } else {
                    notepopup.setLayoutParams((width / 2) - mWidthPixels, (height / 2) - mLandscapeHeightPixels);

                }
            }

        }
    }

    private void onNoeSaveClick(HighlightVO vo) {
        saveHighlight(vo);
        getHighlightFromDB(vo.getFolioID());
        renderView.drawNote(vo);
    }

    private void openSticyNoteShareScreen(final HighlightVO vo, final String selectedHighlightedColor) {
        _stickyNoteShareDialog = new CustomStickyNoteShareScreen(PlayerActivity.this, mStickyNotePopup, readerThemeSettingVo);
        _stickyNoteShareDialog.setData(arrayListforSharingSetting, userID, accountType, vo, mReaderType, selectedHighlightedColor);
        _stickyNoteShareDialog.addItemClickListner(new CustomStickyNoteShareScreen.onNoteShareItemClick() {

            @Override
            public void onShareClicked(View clikedview) {
                //vo.setTextColor("#ffffff");
                //onNoeSaveClick(vo);
                vo.setColor(selectedHighlightedColor);
                _stickyNoteShareDialog.shareClicked();

                //GlobalDataManager.getInstance().setTotalNotesShared(GlobalDataManager.getInstance().getTotalNotesShared() + 1);

                saveAnalyticsForShare(vo, EventName.NOTE_SHARED.toString());

                //AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_SHARED.toString(), vo.getLocalID() + "", vo.getFolioID() + "", "");
            }

            @Override
            public void onCancelClicked(View view) {
                vo.setNoteData("");
                _stickyNoteShareDialog.cancelClicked();
            }
        });
        mStickyNotePopup.buildViewForNoteShare(_stickyNoteShareDialog);
    }

    private void openSticyNoteShareScreenFromMyData(final HighlightVO vo, final String selectedHighlightedColor) {

        final Dialog mydataShare = new Dialog(PlayerActivity.this, R.style.CustomActionBarTheme_Transparent);
        CustomNoteView tempNotVie;
        if (getResources().getBoolean(R.bool.is_AAO) || getResources().getBoolean(R.bool.is_ADA_Client) ||
                getResources().getBoolean(R.bool.is_ACEP_client) || getResources().getBoolean(R.bool.is_islamic_publication)) {
            tempNotVie = new CustomNoteView(PlayerActivity.this, readerThemeSettingVo, isMobile, isMobile, false);
        } else {
            tempNotVie = new CustomNoteView(PlayerActivity.this, readerThemeSettingVo, isMobile, isMobile, true);
        }

        _stickyNoteShareDialog = new CustomStickyNoteShareScreen(PlayerActivity.this, tempNotVie, readerThemeSettingVo);
        _stickyNoteShareDialog.setData(arrayListforSharingSetting, userID, accountType, vo, mReaderType, selectedHighlightedColor);
        _stickyNoteShareDialog.addItemClickListner(new CustomStickyNoteShareScreen.onNoteShareItemClick() {

            @Override
            public void onShareClicked(View clikedview) {
                //vo.setTextColor("#ffffff");
                //onNoeSaveClick(vo);
                vo.setColor(selectedHighlightedColor);
                _stickyNoteShareDialog.myDataSharehareClicked();

                if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                    AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_SHARED.toString(), vo.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", "");
                } else {
                    AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_SHARED.toString(), vo.getLocalID() + "", vo.getFolioID() + "", "");
                }

                if (tabMyDataFragment != null)
                    tabMyDataFragment.refreshMyDataNoteFragment();

                if (mydataShare != null)
                    mydataShare.dismiss();
            }

            @Override
            public void onCancelClicked(View view) {
           /*     vo.setNoteData("");
                _stickyNoteShareDialog.myDataCancelClicked();*/
                if (mydataShare != null)
                    mydataShare.dismiss();
            }
        });

        mydataShare.setContentView(_stickyNoteShareDialog);
        mydataShare.setCancelable(true);
        mydataShare.setCanceledOnTouchOutside(true);
        mydataShare.show();
        DisplayMetrics displayMetrics = new DisplayMetrics();
        getWindow().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        int height = displayMetrics.heightPixels;
        mydataShare.getWindow().setLayout(WindowManager.LayoutParams.WRAP_CONTENT, (height / 2));
    }


    /**
     * Save,Update highlight data into database
     *
     * @param mCurrHighlightVO
     */
    private void saveHighlight(HighlightVO mCurrHighlightVO) {
        if (mCurrHighlightVO != null && mCurrHighlightVO.getCreatedByUserVO() != null && mCurrHighlightVO.getCreatedByUserVO().getUserID() != userID) {
            mCurrHighlightVO.setNoteShared(true);
        } else if (mCurrHighlightVO != null && mCurrHighlightVO.getUserShareColl() != null) {
            mCurrHighlightVO.setNoteShared(mCurrHighlightVO.getUserShareColl().size() != 0);
        }

        if (mCurrHighlightVO != null && mCurrHighlightVO.getLocalID() == -1) {
            long highLightID = DatabaseManager.getInstance(this).insertHighlight(mCurrHighlightVO,
                    bookId,
                    userID);

            mCurrHighlightVO.setLocalID((int) highLightID);

            //set pageVO with updated highlight data

        } else {
            mCurrHighlightVO.setDateTime(Utils.getDateTime());
            mCurrHighlightVO.setSyncStatus(false);
            if (mCurrHighlightVO.getUGCID() > 0) {
                mCurrHighlightVO.setMode(Constants.UGC_ITEM_MODE_MODIFIED);
            }
            if (!mCurrHighlightVO.getNoteData().isEmpty()) {
                // setNoteCreatedSharedCount(TYPE_SHARED, mCurrHighlightVO);
            }
            if (mCurrHighlightVO.getMode().equalsIgnoreCase(Constants.UGC_ITEM_MODE_MODIFIED)) {
                //check it is exist in DB
                HighlightVO obj = DatabaseManager.getInstance(this).getHighlightByUGCID(mCurrHighlightVO.getUGCID());
                if (obj != null && obj.getNoteData().isEmpty() && mCurrHighlightVO.getNoteData().isEmpty()) {
                    //it is highlight data , first delete the highlight
                    if (obj.isImportant()) {
                        saveAnalytics(obj, EventName.IMP_HIGLIGHT_DELETED.toString());
                    } else {
                        saveAnalytics(obj, EventName.NORMAL_HIGHLIGHT_DELETED.toString());
                    }
                    saveAnalytics(mCurrHighlightVO, "");
                }
            }
            DatabaseManager.getInstance(this).updateHighlight(mCurrHighlightVO,
                    userID);
        }
        if (mCurrHighlightVO.getMode().equalsIgnoreCase(Constants.UGC_ITEM_MODE_NEW)) {

            saveAnalytics(mCurrHighlightVO, "");
        }
        /*if (GlobalDataManager.getInstance().getShareUserList() != null &&
                GlobalDataManager.getInstance().getShareUserList().size() > 0) {
            mCurrHighlightVO.setShareUserList(GlobalDataManager.getInstance().getShareUserList().size());
            if (mCurrHighlightVO.isImportant()) {
                saveAnalyticsForHighlightShare(mCurrHighlightVO, EventName.IMP_HIGHLIGHT_SHARED.toString());
            } else {
                saveAnalyticsForHighlightShare(mCurrHighlightVO, EventName.NORMAL_HIGHLIGHT_SHARED.toString());
            }
        }*/

    }


    @Override
    public void onConfigurationChanged(Configuration newConfig) {

        currentPageNum = SDKManager.getInstance().getCurrentBookPageNumber();
        SDKManager.getInstance().setAudioSyncEnable(false);


        if (mAudioManager != null && mAudioManager.getMediaPlayer() != null && mAudioManager.getMediaPlayer().isPlaying() && readAloudType != null && !readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY) && !readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME)) {
            pauseAudio(false);
            onAudioOrientationChanged = true;
            SDKManager.getInstance().setReadFirstElementReq(false);
        }

        if (SDKManager.getInstance().isNewTeacherReviewModeOn()) {
            replaceActionBarwithTeacherReviewBar(true);
        }
        isOrientataionChanged = true;
        if (mBookmarkActionHandler != null) {
            mBookmarkActionHandler.dismiss();
        }
        if (SDKManager.getInstance().isReadAloudPlaying() || SDKManager.getInstance().isAudioSyncPlaying())
            isOrientationChanged = true;

        if (readAloudType != null && !readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY)) {
            if (bottomActionbar != null && readAloudType != null /*&& !readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY)*/) {
                bottomActionbar.removeAllActionBarItem();
            }
            setUpBottomBar();
            setaudioSyncColor(GlobalDataManager.getInstance().getCurrentASMenucolor());
            setColorPickerItemColor(GlobalDataManager.getInstance().getCurrentASMenucolor());
        }

        if (getSupportFragmentManager().findFragmentByTag("thumbnail") != null) {
            Utils.insertSharedPreferenceBooleanValue(PlayerActivity.this, getString(R.string.is_thumbnails_visibile), true);
        } else {
            Utils.insertSharedPreferenceBooleanValue(PlayerActivity.this, getString(R.string.is_thumbnails_visibile), false);
        }

        super.onConfigurationChanged(newConfig);
        Utils.hideKeyboard(this);
        if (getResources().getBoolean(R.bool.is_nanoq_greenland)) {
            setLocale(Utils.getSharedPreferenceStringValue(
                    this, Constants.SHELF_PREFS_NAME, Constants.DEFAULT_APP_LANGUAGE, ""));
        }
        /*if (getResources().getBoolean(R.bool.is_multi_lang_support)) {
            setLocale(Utils.getSharedPreferenceStringValue(
                    this, Constants.SHELF_PREFS_NAME, Constants.DEFAULT_APP_LANGUAGE, ""));
        }
*/

        if (penHelper != null) {
            penHelper.setEraserMode(false, userID, currentFoliId, bookId);
        }

        if (null != mAudioManager) {
            /*mAudioManager.close();
            mAudioManager = null;*/
        }

        SDKManager.getInstance().setSetFlingEnabled(true);
        if (DialogUtils.getCustomDialog() != null) {
            DialogUtils.getCustomDialog().dismiss();
        }
        setNoteDilogParams();
        if (actionView != null) {
            actionView.dismiss();
        }
        changeWidthOfSeekBarOnConfigurationChanged();
        if (!SDKManager.getInstance().isNewTeacherReviewModeOn()) {
            if (topActionbar != null) {
                topActionbar.removeAllActionBarItem();
            }
            if (isPentoolBarOpen) {
                addPentBarItem();
            } else {

                if (topActionbar != null) {
                    topActionbar.removeAllActionBarItem();
                }
                setTopActionbarItem();
            }
            if (!mIsSearchOpen) {
                if (bottomActionbar != null) {
                    bottomActionbar.removeAllActionBarItem();
                }
                setUpBottomBar();
            }


            if (isActionBarVisible && !renderView.isPenActive()) {
                showBottomBar();
            }
        }

        if (mPopupWindow != null) {
            mPopupWindow.dismiss();
        }

        if (colorcalendar != null) {
            colorcalendar.dismiss();
        }

        if (penHelper != null) {
            penHelper.dissmissPenSizePopup();
        }

        if (mSignOutShowPopup != null) {
            mSignOutShowPopup.dismiss();
        }

        if (ugcShareSettingDialog != null) {
            ugcShareSettingDialog.dismiss();
        }

        if (bottomSettingPanel != null && bottomSettingPanel.getDialog() != null && bottomSettingPanel.getDialog().isShowing()) {
            bottomSettingPanel.dismiss();
        }

        if (renderView.isAnnotationActive()) {
            enableTextAnnotation();
        }
        if (mIsElasticSearch || mReaderType == EBookType.FIXEDKITABOO) {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (mSearchArrayListPageWise != null && !mSearchArrayListPageWise.isEmpty() && mSearchArrayListPageWise.size() > SDKManager.getInstance().getSearchPageWiseIterationPosition()) {
                    GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.SEARCH);
                    final SearchItemVO searhVo = mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition());
                    searhVo.setSearchIndex(SDKManager.getInstance().getCurrentPositionOfPageSearchData());

                    if (isMobile) {
                        //  navigatePageByFolioId("",Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()));
                        onSearchItemClick(mSearchQuery, searhVo, mIsElasticSearch, false, false);
                    } else {

                        if (!(getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)) {

                            if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 == 0 &&
                                    mSearchArrayListPageWise.size() > SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1) {

                                onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1), mIsElasticSearch, false, false);

                            } else if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 != 0
                                    && Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) != 1) {

                                if (SDKManager.getInstance().getSearchPageWiseIterationPosition() > 0)
                                    onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1), mIsElasticSearch, false, false);

                            }

                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {


                                    onSearchItemClick(mSearchQuery, searhVo, mIsElasticSearch, false, false);
                                }


                            }, 100);

                        } else {
                            if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 == 0 ||
                                    Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) == 1) {

                                onSearchItemClick(mSearchQuery, searhVo, mIsElasticSearch, false, false);

                            } else if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 != 0
                                    && Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) != 1) {

                                if (SDKManager.getInstance().getSearchPageWiseIterationPosition() > 0)
                                    SDKManager.getInstance().setSearchPageWiseIterationPosition(SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1);
                                SearchItemVO prevPageSearhVo = mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition());
                                prevPageSearhVo.setSearchIndex(0);

                                onSearchItemClick(mSearchQuery, prevPageSearhVo, mIsElasticSearch, false, false);

                            }
                        }


                    }
                }
           /* if(mReaderType == EBookType.FIXEDEPUB){
                SDKManager.getInstance().setSearchSequentialIndexEpub(mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()).getSearchIndex());
                int time=0;
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    time=3000;
                    if(!(SDKManager.getInstance().getSearchIndexEpub() % 2 == 0)){
                        renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                    }
                }else {
                    time=4000;
                }
                final int finalTime = time;
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {

                        if(!SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName())){
                            SDKManager.getInstance().setSearchIndexEpub(SDKManager.getInstance().getSearchIndexEpub());
                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                                renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                            }
                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {

                                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()),mIsElasticSearch,false,true);
                                    }
                                    else{
                                        if(SDKManager.getInstance().getSearchIndexEpub() % 2 == 0){
                                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()),mIsElasticSearch,true,true);
                                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()-1),mIsElasticSearch,false,false);
                                        }else {
                                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()),mIsElasticSearch,false,true);
                                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()+1),mIsElasticSearch,true,false);
                                        }

                                    }

                                }
                            }, finalTime);
                        }else {
                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                                onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()),mIsElasticSearch,false,true);
                            }
                            else{
                                if(isMobile){
                                    onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()),mIsElasticSearch,false,true);
                                }else {
                                    if(SDKManager.getInstance().getSearchIndexEpub() % 2 == 0){
                                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()),mIsElasticSearch,true,true);
                                        if(SDKManager.getInstance().getSearchIndexEpub()-1>0)
                                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()-1),mIsElasticSearch,false,false);
                                    }else {
                                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()),mIsElasticSearch,false,true);
                                        if(SDKManager.getInstance().getSearchIndexEpub()+1<=mSearchArrayList.size()-1)
                                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()+1),mIsElasticSearch,true,false);
                                    }
                                }


                            }
                        }
                    }
                },time);
            }*/
            }
        }


        if (_collOfHelpTeacher_1 != null && _collOfHelpTeacher_2 != null) {
            _collOfHelpTeacher_1.clear();
            _collOfHelpTeacher_2.clear();
        }
        if (isMobile && mReadAloudDialog != null)
            showAudioPlayDialoge();

        if (SDKManager.getInstance().isReadAloudPlaying())
            replaceActionBarwithReadAloudBar(true);

        new Handler(Looper.myLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                if (Utils.getSharedPreferenceBooleanValue(PlayerActivity.this, getString(R.string.is_thumbnails_visibile), false)) {
                    showEpubThumbnail();
                }
            }
        }, 2000);

        if (readAloudType != null && readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY) || SDKManager.getInstance().isAudioSyncPlaying()) {
            /* if (bottomActionbar != null && readAloudType!=null *//*&& !readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY)*//*) {
                bottomActionbar.removeAllActionBarItem();
            }
            setUpBottomBar();*/
            replaceActionBarwithReadAloudBar(true);

            if (SDKManager.getInstance().isAudioSyncPlaying()) {

                setaudioSyncColor(GlobalDataManager.getInstance().getCurrentASMenucolor());
                setColorPickerItemColor(GlobalDataManager.getInstance().getCurrentASMenucolor());

              /*if(mASYellowCol!=null){
                mASYellowCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                mASYellowCol.setTextSize(25);
            }
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));*/

            }
        }

        if (SDKManager.getInstance().isAudioSyncPlaying() && mAudioManager != null && mAudioManager.getMediaPlayer().isPlaying() && isOrientationChanged) {
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    isOrientationChanged = false;
                }
            }, 2000);
        }
    }

    public void setLocale(String localeName) {
        mLocale = new Locale(localeName);
        Resources res = getResources();
        DisplayMetrics dm = res.getDisplayMetrics();
        Configuration conf = res.getConfiguration();
        conf.locale = mLocale;
        res.updateConfiguration(conf, dm);
        //onConfigurationChanged(conf);
        Utils.insertSharedPrefernceStringValues(this,
                Constants.SHELF_PREFS_NAME, Constants.DEFAULT_APP_LANGUAGE, localeName);

    }

    @Override
    protected void onResume() {

        onPauseCalled = false;

        if (mAssetType != null && !mAssetType.isEmpty() && mAssetType.equalsIgnoreCase(HTMLINTERACTIVITY)) {
            finish();
        }
        Log.d("PlayerActivity", "onResume called");

//        PackageManager packageManager=PlayerActivity.this.getPackageManager();
//        ComponentName componentName=new ComponentName(this,PdfExpiryReceiver.class);
//        packageManager.setComponentEnabledSetting(componentName,PackageManager.COMPONENT_ENABLED_STATE_ENABLED,PackageManager.DONT_KILL_APP);


        super.onResume();
    }

    @Override
    protected void onPause() {
        Log.d("PlayerActivity", "onPause called");
        onPauseCalled = true;

        if (mReaderType == EBookType.REFLOWEPUB) {
            //mCurrentPageData = SDKManager.getInstance().getCurrentReflowablePageVO();
            if (mLastReflowPage != null) {
                if (mCFIDArrayList != null && mCFIDArrayList.size() > 0) {
                    isFromBackpressed = true;
                    savePageTrackingDataForReflow(mLastReflowPage, mCFIDArrayList, isFromBackpressed);
                } else {
                    if (mLastReflowPage != null)
                        savePageTrackingDataForReflow(mLastReflowPage);
                }
            }
        } else if (mLastPage != null) {
            savePageTrackingData(mLastPage);

        }
        String analyticdata = AnalyticsManager.getInstance(this).getTrack();
        if (!analyticdata.isEmpty()) {
            DatabaseManager.getInstance(this).saveAnalyticsData(SDKManager.getInstance().getGetLocalBookData().getBookID(), userID, analyticdata);
        }

        if (mReadPause != null) {
            if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PAUSE)) {
                mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                if (mAudioManager != null)
                    mAudioManager.pauseAudioSync();
            }
        }

        //Minimize HTML if open
        if (com.hurix.commons.utils.Utils.isAnyServiceRunning(FloatingHTMLViewService.class, PlayerActivity.this)) {
            FloatingHTMLViewService.minFloatingHTMLPopUP();
        }
     /*if(mLinkDropDownViewer!=null)
         mLinkDropDownViewer.unRegisterReceiver();*/
        super.onPause();
    }

    @Override
    public void onBackPressed() {

        if (seekBarFragment != null) {
            if (seekBarFragment.isVisible()) {
                super.onBackPressed();
                return;
            }
        }

        SDKManager.getInstance().setIspageThumbPressed(false);
        Bundle bundle = new Bundle();
       /* bundle.putString(FirebaseConstants.HOME_BUTTON, "NA");

        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.HOME_BUTTON_CLICK, bundle);*/


        cleanAllReviewData();
        SDKManager.getInstance().setLastVisitedSuccess(false);
        DatabaseManager.getInstance(this).updateCFIDReadingTime(bookId, userID, Utils.getDateTime());
        SDKManager.getInstance().setAverageTimeFromServer(0);
        SDKManager.getInstance().setMathkeyboardenable("No");
        SDKManager.getInstance().setAutoScrollPageForAudioSync(false);
        SDKManager.getInstance().setElasticSearchActive(false);
        com.hurix.commons.notifier.GlobalDataManager.getInstance().setElasticSearchActive(false);
        renderView.isElasticSearchActive(false);
        com.hurix.reader.kitaboosdkrenderer.notifier.GlobalDataManager.getInstance().setCurrentSelectedBookLaunch(false);
        if (mReaderType == EBookType.REFLOWEPUB) {
            renderView.clearAllElasticSearchData();
            if (com.hurix.commons.notifier.GlobalDataManager.getInstance().getScrollBarVisibility() != null)
                com.hurix.commons.notifier.GlobalDataManager.getInstance().getScrollBarVisibility().clear();
        }
        renderView.highlightSearchText("", null, mIsElasticSearch, false, false);
        GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.NAVIGATION);
        onSearchCancelClick();
        customSearchPanel(mIsElasticSearch);
        if (mIsElasticSearch && GlobalDataManager.getInstance().getCurrMode() == GlobalDataManager.PlayerState.SEARCH || GlobalDataManager.getInstance().getCurrMode() == GlobalDataManager.PlayerState.ELASTIC) {
            renderView.highlightSearchText("", null, mIsElasticSearch, false, false);
            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.NAVIGATION);
        }
        if (getResources().getBoolean(R.bool.is_sparkCapital_client))
            Utils.insertSharedPrefernceStringValues(this, PrefActivity.SETTING_PANEL_PREFS_NAME, PrefActivity.KEY_FONT_SIZE, "xSmallFont");
        if (highlightVo != null && mStickyNotePopup != null && mStickyNotePopup.isShowing()) {
            if (_stickyNoteShareDialog != null && _stickyNoteShareDialog.isShown()) {
                _stickyNoteShareDialog.cancelClicked();
            }
            highlightVo.setNoteData("");
        }
        if (mIsSearchOpen) {
            mTabSearchCancelButton.callOnClick();
        } else if (isPentoolBarOpen) {
            isPentoolBarOpen = false;
            onPentoolClosed();
        } else {
            if ((findViewById(R.id.stickynotelayout)).isShown()) {
                (findViewById(R.id.stickynotelayout)).setVisibility(View.GONE);
            } else {
                Log.d("PlayerActivity", "onBackPressed called");
                //destroy all the instance bookplayer

                /* TODO Need to un comment this code after CFID analytics implemented*/

                /**/
                //if (mLastPage != null) {
                if (mLastReflowPage != null) {
                    if (mReaderType == EBookType.REFLOWEPUB) {
                        mCurrentPageData = SDKManager.getInstance().getCurrentReflowablePageVO();
                        isFromBackpressed = true;
                        //Collections.reverse(mCFIDArrayList);
                        if (mCFIDArrayList != null && mCFIDArrayList.size() > 0)
                            savePageTrackingDataForReflow(mLastReflowPage, mCFIDArrayList, isFromBackpressed);
                        else
                            savePageTrackingDataForReflow(mLastReflowPage);
                    }

                }

                if (mLastPage != null) {
                    if (!(mReaderType == EBookType.REFLOWEPUB)) {
                        savePageTrackingData(mLastPage);
                    }

                }

               /* if (mLastPage != null) {
                    savePageTrackingData(mLastPage);
                }
*/
                mLastPage = null;
                mLastReflowPage = null;

                if (mDialog != null) {
                    mDialog.dismiss();
                    mDialog = null;
                    toc = null;
                }

                if (mBottomBookmarkFragment != null) {
                    mBottomBookmarkFragment.dismiss();
                }

                //Stop audio
                if (null != mAudioManager) {
                    mAudioManager.close();
                    mAudioManager = null;
                }

                // close html markup
                if (com.hurix.commons.utils.Utils.isAnyServiceRunning(FloatingHTMLViewService.class, PlayerActivity.this) && htmlIntent != null) {
                    stopService(htmlIntent);
                }
                isThumbnailVisible = false;
            }
        }
        SDKManager.getInstance().setReadAloudPlaying(false);
        audioIsPause = true;
        if (readAloudType != null)
            readAloudType = null;
        currentreadAloudType = null;


        String analyticdata = AnalyticsManager.getInstance(this).getTrack();
        DatabaseManager.getInstance(this).saveAnalyticsData(bookId, userID, analyticdata);
        if (mReaderType == EBookType.REFLOWEPUB) {
            JSONObject lastPageFolio = new JSONObject();
            if (mCFIDArrayList != null && mCFIDArrayList.size() > 0) {
                try {
                    lastPageFolio.put("chapterid", SDKManager.getInstance().getChapterID());
                    lastPageFolio.put("positionIdentifier", SDKManager.getInstance().getCFIBookMarkPath());
                    lastPageFolio.put("page", SDKManager.getInstance().getmBookMarkPath());
                    lastPageFolio.put("pageCFI", mCFIDArrayList.get(mCFIDArrayList.size() - 1));
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            } else {
                try {
                    if (SDKManager.getInstance() != null) {
                        lastPageFolio.put("chapterid", SDKManager.getInstance().getChapterID());
                        lastPageFolio.put("positionIdentifier", SDKManager.getInstance().getCFIBookMarkPath());
                        lastPageFolio.put("page", SDKManager.getInstance().getmBookMarkPath());
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            //DBController.getInstance(this).getManager().insertLastVisitedCfi(lastPageFolio.toString(), bookId, userID);
            //kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(analyticdata, mClassId, currentFoliId);
            kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(analyticdata, mClassId, lastPageFolio.toString(), this);
        } else {
            kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(analyticdata, mClassId, currentFoliId, this);
        }

        if (SDKManager.getInstance().getParseWebview() != null)
            SDKManager.getInstance().getParseWebview().clear();

        if (SDKManager.getInstance().getManifestIDsList() != null)
            SDKManager.getInstance().getManifestIDsList().clear();

        if (SDKManager.getInstance().getParentpageScrollSeekbarView() != null)
            SDKManager.getInstance().setSeekbarScrollView(null);

        clearAudioSyncData();

        if (SDKManager.getInstance().isPageHistoryRequired())
            SDKManager.getInstance().setIspageHistoryRequired(false);

        if (mReaderType == EBookType.FIXEDEPUB && SDKManager.getInstance().getPageHistory() != null && SDKManager.getInstance().getPageHistory().size() > 0) {
            SDKManager.getInstance().getPageHistory().clear();
            SDKManager.getInstance().setIspageHistoryRequired(false);
            SDKManager.getInstance().setIspageThumbPressed(false);
            if (SDKManager.getInstance().getBackHistory().size() > 0)
                SDKManager.getInstance().getBackHistory().clear();
            SDKManager.getInstance().setHistoryCount(-1);
        }


        Intent intent = new Intent();
        intent.putExtra("Trackingdata", kitabooanalytic);
        intent.putExtra("bookID", bookId);

        if (bookIdForJumpToBook != 0)
            intent.putExtra("bookIdForJumpToBook", bookIdForJumpToBook);

        setResult(RESULT_OK, intent);

        if (mReaderType == EBookType.FIXEDKITABOO) {
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));

            GlobalDataManager.getInstance().clearPdfPageData();
        }

        super.onBackPressed();
    }

    private void clearAudioSyncData() {

        if (mReaderType == EBookType.REFLOWEPUB) {
            SDKManager.getInstance().setAudioSyncEnable(false);
            SDKManager.getInstance().setMediaOverlay(false);
            SDKManager.getInstance().setLastAudioSpeed(1.0f);
            SDKManager.getInstance().setAudioManger(null);
            SDKManager.getInstance().setAllFileLoadedForAudioSync(false);
            SDKManager.getInstance().setWordId("");
            SDKManager.getInstance().setlastElement("");
            SDKManager.getInstance().setAudioSyncCount(0);
            SDKManager.getInstance().setPageInScroll(false);

            if (null != mAudioManager) {
                mAudioManager.close();
                mAudioManager = null;
            }

            if (mReadSpeed != null)
                mReadSpeed = null;

            if (mSpeedDec != null)
                mSpeedDec = null;

            if (mSpeedInc != null)
                mSpeedInc = null;

            if (_speedType != null)
                _speedType = null;

            com.hurix.commons.notifier.GlobalDataManager.getInstance().clearAudioSyncData();

            if (!SDKManager.getInstance().getAllAudioWord().isEmpty())
                SDKManager.getInstance().setAllAudioWord("");

            if (!SDKManager.getInstance().getLastWordId().isEmpty())
                SDKManager.getInstance().setLastWordId("");

            if (!SDKManager.getInstance().getLastAudioSrc().isEmpty())
                SDKManager.getInstance().setLastAudioSrc("");


            if (SDKManager.getInstance().getAudioVOS().size() > 0)
                SDKManager.getInstance().getAudioVOS().clear();

            if (SDKManager.getInstance().getAudioSyncSrcMap().size() > 0)
                SDKManager.getInstance().getAudioSyncSrcMap().clear();

            if (SDKManager.getInstance().getAudioSyncSrcList() != null && SDKManager.getInstance().getAudioSyncSrcList().size() > 0)
                SDKManager.getInstance().getAudioSyncSrcList().clear();

            if (SDKManager.getInstance().getAudioSyncWordInfosList().size() > 0)
                SDKManager.getInstance().getAudioSyncWordInfosList().clear();

            if (SDKManager.getInstance().getMediaOverlayMap().size() > 0)
                SDKManager.getInstance().getMediaOverlayMap().clear();

            if (SDKManager.getInstance().getWebviewMap() != null)
                SDKManager.getInstance().getWebviewMap().clear();

            if (SDKManager.getInstance().getWebviewList() != null)
                SDKManager.getInstance().getWebviewList().clear();
        } else if (mReaderType == EBookType.FIXEDKITABOO) {
            SDKManager.getInstance().setLastAudioSpeed(1.0f);

            if (GlobalDataManager.getInstance().getSentenceAsRectList() != null)
                GlobalDataManager.getInstance().getSentenceAsRectList().clear();

            if (mReadAloudIcon != null && !mReadAloudIcon.isEnabled())
                mReadAloudIcon.setEnabled(true);

        }

    }

    private void cleanAllReviewData() {
        SDKManager.getInstance().clearPenMarkerVO();
        SDKManager.getInstance().setReviewMode(false);
        SDKManager.getInstance().setNewTeacherReviewModeOn(false);
        GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.NAVIGATION);
        if (SDKManager.getInstance().getActiveLandscapePages() != null)
            SDKManager.getInstance().getActiveLandscapePages().clear();
        if (GlobalDataManager.getInstance().getAssessmentPenMarks() != null)
            GlobalDataManager.getInstance().getAssessmentPenMarks().clear();
    }

    /**
     * Delete highlight from Database
     *
     * @param vo
     */
    public void deleteHighlight(HighlightVO vo) {
        if (vo.getUGCID() > 0) {
            vo.setDateTime(Utils.getDateTime());
            vo.setSyncStatus(false);
            vo.setMode(Constants.UGC_ITEM_MODE_DELETED);

            DatabaseManager.getInstance(this).updateHighlight(vo,
                    userID);

        } else {
            DatabaseManager.getInstance(this).deleteUGCData(vo);
        }
        getHighlightFromDB(vo.getFolioID());
    }


    @Override
    public void setTocLayout(View view) {

    }


    /**
     * Called on click of dialog back button
     */
    @Override
    public void onDialogBackpressed() {
        hideDialog();
    }

    /**
     * Called on click of searched listitem
     *
     * @param query     : Searched text
     * @param searchObj : Search object
     */
    @Override
    public void onSearchItemClick(String query, SearchItemVO searchObj, Boolean isFromElasticSearch, Boolean isPreviouseBtnClicked, Boolean isIndexHighlightRequired) {
        if (isFromElasticSearch || mReaderType == EBookType.FIXEDKITABOO) {
            mCurrentClickSearchIndex = searchObj.getSearchIndex();
            Utils.hideKeyboard(this);
        } else {
            Utils.hideKeyboard(this);
            mCurrentClickSearchIndex = 1;
        }

        SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
        hideDialog();

        //   hideActionBar();
        if (mReaderType == EBookType.FIXEDKITABOO) {
            renderView.highlightSearchText(query, searchObj, true, isPreviouseBtnClicked, isIndexHighlightRequired);
        } else {
            renderView.highlightSearchText(query, searchObj, isFromElasticSearch, isPreviouseBtnClicked, isIndexHighlightRequired);
        }

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if (currentFoliId != null && currentFoliId.equalsIgnoreCase(searchObj.get_displayNumber())) {
                    renderView.highlightSearchText();
                    renderView.loadAsset(AssetType.HighlightNote, currentFoliId);
                }
            }
        }, 1000);

        replaceCustomBarwithActionBar();
        playAudioAfterNavigation();
    }

    private void playAudioAfterNavigation() {
        if (SDKManager.getInstance().isReadAloudPlaying()) {
            SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
            SDKManager.getInstance().setmState(GlobalDataManager.PlayerState.NAVIGATION);
            /*if(SDKManager.getInstance().getCurrentPageAudioSyncList().size()>0)
            SDKManager.getInstance().getCurrentPageAudioSyncList().clear();*/
        }
    }

    /**
     * Called on clear of search text field
     */
    @Override
    public void onClearSearchText() {
        renderView.highlightSearchText("", null, mIsElasticSearch, false, false);
    }

    /**
     * Responsible to handle the position of TOC dialog
     *
     * @param dialog TOC dialog
     */
    @Override
    public void setDialogPosition(Dialog dialog) {
        /* set position of dialog*/
      /*  int[] location = new int[2];
        _anchor.getLocationOnScreen(location);
        final int anchorLeft = location[0];
        final int anchorTop = location[1];
        final int anchorWidth = _anchor.getMeasuredWidth();
        final int anchorHeight = _anchor.getMeasuredHeight();
        Rect anchorRect = new Rect(anchorLeft, anchorTop, anchorLeft + anchorWidth,
                anchorTop + anchorHeight);
        int yPos = anchorRect.bottom;
        WindowManager.LayoutParams params = dialog.getWindow().getAttributes();
        params.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
        params.x = 10;
        params.y = yPos;
        params.gravity = Gravity.BOTTOM | Gravity.RIGHT;
        dialog.getWindow().setAttributes(params);*/
    }

    /*@Override
    public void setSettingPanelPosition(Dialog dialog) {
        *//* set position of dialog*//*
    }*/

    /**
     * @param seekBar
     * @param switchCompat
     * @param switchCompat1
     */
    @Override
    public void settingPanelViewsCallback(SeekBar seekBar, SwitchCompat switchCompat, SwitchCompat switchCompat1) {

    }

    /**
     * Callback is responsible for Setting Panel[Epub] to change the Reading mode when button pressed
     * [NightMode]
     *
     * @param isClicked
     */
    @Override
    public void onNightmodePressed(Boolean isClicked) {

        Bundle bundle = new Bundle();
       /* bundle.putString(FirebaseConstants.READING_MODE_NIGHT, FirebaseConstants.READING_MODE_NIGHT);
        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.READING_MODE_CLICK, bundle);*/

        renderView.onSettingPanelNightSwitchClicked(isClicked, readerThemeSettingVo.getReader().getDayMode().getFontSettings().getOther().getMode().getNight().getTabBg());
    }

    /**
     * Callback is responsible for Setting Panel[Epub] to change the Reading mode when button pressed
     * [SepiaMode]
     *
     * @param isClicked
     */
    @Override
    public void onSepiaModeClicked(boolean isClicked) {
      /*  Bundle bundle = new Bundle();
        bundle.putString(FirebaseConstants.READING_MODE_SEPIA, FirebaseConstants.READING_MODE_SEPIA);
        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.READING_MODE_CLICK, bundle);
*/

        renderView.onSettingPanelSepiaModeClicked(isClicked, readerThemeSettingVo.getReader().getDayMode().getFontSettings().getOther().getMode().getSepia().getTabBg());
    }

    /**
     * Callback is responsible to handle Reader[Epub] text alignment when button pressed
     *
     * @param s Alignment mode
     */

    @Override
    public void setPageTextAlignment(String s) {

       /* Bundle bundle = new Bundle();

        switch (s) {
            case "1":
                bundle.putString(FirebaseConstants.ALIGNMENT_LEFT, FirebaseConstants.ALIGNMENT_LEFT);
                break;
            case "2":
                bundle.putString(FirebaseConstants.ALIGNMENT_CENTER, FirebaseConstants.ALIGNMENT_CENTER);
                break;
            case "3":
                bundle.putString(FirebaseConstants.ALIGNMENT_RIGHT, FirebaseConstants.ALIGNMENT_RIGHT);
                break;
            case "4":
                bundle.putString(FirebaseConstants.ALIGNMENT_JUSTIFY, FirebaseConstants.ALIGNMENT_JUSTIFY);
                break;

        }


        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.ALIGNMENT_SELECTION_CLICK, bundle);*/

        renderView.setPageTextAlignment(s);
    }

    /**
     * Callback is responsible to handle Reader[Epub] Font-family when button pressed
     *
     * @param fontFamily Font family
     */
    @Override
    public void setFontFamily(String fontFamily) {
        renderView.setFontFamily(fontFamily);

        // font family from drop down


    }

    /**
     * setPageFontFamily
     * Callback is responsible to handle Reader[Epub] Font-family when button pressed
     *
     * @param mode Font family
     */
    @Override
    public void setPageFontFamily(String mode) {
        renderView.setPageFontFamily(mode);

        Bundle bundle = new Bundle();
        /*bundle.putString(FirebaseConstants.FONT_SELECTION, mode);

        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.FONT_SELECTION_CLICK, bundle);*/


    }

    /**
     * setPageMargin
     * Callback is responsible to handle Reader[Epub] page margin when button pressed
     *
     * @param marginLevel Page Margin
     */
    @Override
    public void setPageMargin(String marginLevel) {

        renderView.setPageMargin(marginLevel);

       /* Bundle bundle = new Bundle();

        switch (marginLevel) {

            case "0":
                bundle.putString(FirebaseConstants.MARGIN_SELECTION_NARROW, marginLevel);

                break;

            case "15":

            case "20":
                bundle.putString(FirebaseConstants.MARGIN_SELECTION_NORMAL, marginLevel);
                break;

            case "25":
                bundle.putString(FirebaseConstants.MARGIN_SELECTION_WIDE, marginLevel);
                break;
        }


        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.MARGIN_SELECTION_CLICK, bundle);*/
    }

    /**
     * setPageLineSpacing
     * Callback is responsible to handle Reader[Epub] page line-space when button pressed
     *
     * @param spaceLevel Page Margin
     */
    @Override
    public void setPageLineSpacing(String spaceLevel) {
        renderView.setPageLineSpacing(spaceLevel);

        Bundle bundle = new Bundle();

        /*switch (spaceLevel) {

            case "0":
                bundle.putString(FirebaseConstants.LINE_SPACING_NARROW, spaceLevel);
                break;

            case "1.4":

            case "1.6":
                bundle.putString(FirebaseConstants.LINE_SPACING_NORMAL, spaceLevel);
                break;

            case "1.8":
                bundle.putString(FirebaseConstants.LINE_SPACING_WIDE, spaceLevel);
                break;


        }


        bundle.putString(spaceLevel, spaceLevel);
        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.LINE_SPACING_SELECTION_CLICK, bundle);*/
    }

    /**
     * Callback is responsible to handle Reader[Epub] Scroll-mode[Vertical/Horizontal] when button pressed
     *
     * @param isClicked
     */
    @Override
    public void setPageScrollMode(Boolean isClicked) {
        renderView.onSettingPanelScrollSwitchClicked(isClicked);

        Bundle bundle = new Bundle();

       /* if (isClicked)
            bundle.putString(FirebaseConstants.SCROLL_VIEW_ON, FirebaseConstants.SCROLL_VIEW_ON);
        else
            bundle.putString(FirebaseConstants.SCROLL_VIEW_OFF, FirebaseConstants.SCROLL_VIEW_OFF);

        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.SCROLL_VIEW_SELECTION_CLICK, bundle);*/


    }

    /**
     * Callback is responsible to handle Reader[Epub] font-size of pages when button pressed
     *
     * @param fontSize Font-Size level
     */
    @Override
    public void fontSeekBarSize(int fontSize) {
        renderView.onSettingPanelSeekBarClicked(fontSize);

      /*  Bundle bundle = new Bundle();
        bundle.putInt(FirebaseConstants.FONT_SIZE, fontSize);

        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.FONT_SIZE_SLIDER_CLICK, bundle);*/

    }

    /*@Override
    public void onSettingPanelBackPressed(PopupWindow popupWindow) {

    }*/

    /**
     * Callback is for customising the Reader[Epub] SettingPanelPopup
     *
     * @param popupWindow
     */
    @Override
    public void onSettingPanelPopup(PopupWindow popupWindow) {
        mPopupWindow = popupWindow;
    }

    /**
     * Callback is for customising the TOC Tabs
     *
     * @param tabHost Custom TOC tabview
     */
    @Override
    public void initialiseTabHost(TabHost tabHost) {
        /* Toc Layout customisatation*/
        /* */
    }

    /**
     * @param tag
     * @param mListner
     * @return
     */
    @Override
    public View returnSettingPanelView(String tag, IEpubSettingPanelListner mListner) {
        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
        View view = null;
        if (tag.equals(getResources().getString(R.string.font_setting))) {
            return new FontSettingTab(PlayerActivity.this, this, readerThemeSettingVo, isMobile);
        } else {
            return new ReaderSettingTab(PlayerActivity.this, this, readerThemeSettingVo, isMobile);
        }
    }

    /**
     * Callback is responsible to return the custom-view when custom tabs is pressed
     *
     * @param tag      Tab tag
     * @param mListner Tab click callback
     * @return Need to return any view
     */
    @Override
    public View returnTabView(String tag, CustomTOCEnterpriseView.TocItemClickListener mListner) {

        /*  create TabContent*/
        /* */

        if (tag.equals(getResources().getString(R.string.bottombar_toc))) {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                return new CustomTOCEnterpriseView(this, mTocdata, mListner, Utility.isDeviceTypeMobile(this), readerThemeSettingVo, mCurrentPageData);
            } else {
                return new CustomTOCEnterpriseViewEpub(this, mTocdata, mListner, Utility.isDeviceTypeMobile(this), readerThemeSettingVo, mCurrentPageData, mTextChapterTitle.getText().toString());
            }

        } else if (tag.equals(getResources().getString(R.string.ugc_tab_bookmark))) {
            CustomTOBView tobView = new CustomTOBView(this);
            tobView.setBackgroundColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTableofcontents().getPopupBackground()));
            mListOfCurrentBookmark = new ArrayList<>();
            getListOfCurrentBookMarkData();
            ArrayList<BookMarkVO> allbookmarklist = DatabaseManager.getInstance(this).getAllBookMarkForToc(userID, bookId);
            if (allbookmarklist.size() != 0) {
                tobView.setdata(this, allbookmarklist, mReaderType, mListner, this,
                        Utility.isDeviceTypeMobile(this), readerThemeSettingVo, mListOfCurrentBookmark);
                return tobView;
            } else {
                LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
                View view = null;
                if (isMobile) {
                    view = inflater.inflate(R.layout.bookmark_empty_view, null);
                } else {
                    view = inflater.inflate(R.layout.bookmark_tab_empty_view, null);
                }
                view.setBackgroundColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTableofcontents().getPopupBackground()));
                TextView bookmarkIcon = view.findViewById(R.id.book_mark_hint_icon);
                TextView bookmarkHintText = view.findViewById(R.id.book_mark_hint_text);
                TextView bookmarkhintmiddleText = view.findViewById(R.id.book_mark_hint_middle_text);
                bookmarkIcon.setText(PlayerUIConstants.BM_IC_TEXT);
                bookmarkIcon.setAllCaps(false);
                bookmarkIcon.setTypeface(topActionbar.defaultActionbarTypeface(this));
                bookmarkHintText.setText(getResources().getString(R.string.added_bookmark));
                bookmarkhintmiddleText.setText(getResources().getString(R.string.bookmark_list));
                if (isMobile) {
                    bookmarkhintmiddleText.setTextSize(18);
                    bookmarkHintText.setTextSize(18);
                    bookmarkIcon.setTextSize(100);
                } else {
                    bookmarkhintmiddleText.setTextSize(24);
                    bookmarkHintText.setTextSize(24);
                    bookmarkIcon.setTextSize(200);
                }
                if (getResources().getBoolean(R.bool.is_Mills_and_Boon)) {
                    bookmarkIcon.setTextColor(Color.parseColor("#FFFFFF"));
                    bookmarkHintText.setTextColor(Color.parseColor("#FFFFFF"));
                    bookmarkhintmiddleText.setTextColor(Color.parseColor("#FFFFFF"));
                }


                return view;
            }

        } else if (tag.equals(getResources().getString(R.string.toc_tab_resource))) {
            if (isJumpToBookInNative) {
                return new TORView(this, mTorData, PlayerActivity.this, themeUserSettingVo, bookVo, true, mTORResourcesTypeface);
            } else {
                return new CustomResourceEnterpriseView(this, mTorData, bookVo, this, themeUserSettingVo, mTORResourcesTypeface);
            }
        } else if (tag.equals(getResources().getString(R.string.toc_Standard))) {
            return new CustomStandardEnterpriseView(PlayerActivity.this, themeUserSettingVo, bookVo);
        }
        return new CustomTOCEnterpriseView(this, mTocdata, mListner, Utility.isDeviceTypeMobile(this), readerThemeSettingVo, mCurrentPageData);
    }


    private void getTORResourcesFont() {
        if (getResources().getBoolean(R.bool.is_Oup_client)) {
            mTORResourcesTypeface = Typefaces.get(this, "oupreader.ttf");
        } else {
            mTORResourcesTypeface = Typefaces.get(this, "kitabooread.ttf");
        }


    }

    @Override
    protected void onDestroy() {

        if (SDKManager.getInstance().getThumnailPage() != null)
            SDKManager.getInstance().getThumnailPage().clear();

        if (mReaderType == EBookType.FIXEDEPUB && SDKManager.getInstance().getPageHistory() != null && SDKManager.getInstance().getPageHistory().size() > 0) {
            SDKManager.getInstance().getPageHistory().clear();
            SDKManager.getInstance().setIspageHistoryRequired(false);
            SDKManager.getInstance().setIspageThumbPressed(false);
            if (SDKManager.getInstance().getBackHistory().size() > 0)
                SDKManager.getInstance().getBackHistory().clear();
            SDKManager.getInstance().setHistoryCount(-1);
        }


        Log.d("PlayerActivity", "onDestroy called");
        stopHandler();
        String key = KitabooSDKModel.getInstance().getUserID() + "_" +
                SDKManager.getInstance().getGetLocalBookData().getBookID()
                + "_" + PrefActivity.KEY_LAST_PAGE;
        try {
            JSONObject lastvisitedobj = new JSONObject();
            if (mCFIDArrayList != null && mCFIDArrayList.size() > 0) {
                try {
                    lastvisitedobj.put("chapterid", SDKManager.getInstance().getChapterID());
                    lastvisitedobj.put("positionIdentifier", SDKManager.getInstance().getCFIBookMarkPath());
                    lastvisitedobj.put("page", SDKManager.getInstance().getmBookMarkPath());
                    lastvisitedobj.put("pageCFI", mCFIDArrayList.get(mCFIDArrayList.size() - 1));

                    Utils.insertSharedPrefernceStringValues(mContext, PrefActivity.SETTING_PANEL_PREF_NAME, key, lastvisitedobj.toString());
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }


        } catch (Exception e) {
            Utils.insertSharedPrefernceStringValues(mContext, PrefActivity.SETTING_PANEL_PREF_NAME, key, "");
            e.printStackTrace();
        }
        SDKManager.getInstance().setLastVisitedSuccess(false);
        GlobalDataManager.getInstance().setClickedFromTOCItem(false);

        actionView = null;
        mCFIDArrayList = null;
        if (topActionbar != null) {
            topActionbar.removeAllActionBarItem();
        }

        // close html markup
        if (com.hurix.commons.utils.Utils.isAnyServiceRunning(FloatingHTMLViewService.class, PlayerActivity.this) && htmlIntent != null) {
            stopService(htmlIntent);
        }
        mListOfLoadedPage.clear();
        mLastPage = null;
        mLastReflowPage = null;
        textAnnotationKeyboardHeightProvider = null;

        if (null != mAudioManager) {
            mAudioManager.close();
            mAudioManager = null;
        }
        SDKManager.getInstance().destroy();
        com.hurix.reader.kitaboosdkrenderer.notifier.GlobalDataManager.getInstance().setCurrentSelectedBookLaunch(false);
        AnalyticsManager.getInstance(this).destroy();
        finish();
        super.onDestroy();
    }


    /**
     * Hide Actionbar with animation
     */
    private void hideActionBar() {
        if (null != topActionbar) {
            runOnUiThread(new Runnable() {
                @Override
                public void run() {
                    if (!renderView.isPenActive()) {
                        topActionbar.animate().translationY(-(topActionbar.getHeight())).setInterpolator(new AccelerateDecelerateInterpolator()).start();
                    }
                }
            });

            if (!renderView.isAnnotationActive()) {
                hideBottomBar();
            }
            if (mSearchview != null) {
                Utils.hideKeyboard(this);
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        replaceCustomBarwithActionBar();
                    }
                });
                mSearchview = null;
            }
            isActionBarVisible = false;
        }
    }

    /**
     * Hide Bottom bar with animation
     */
    private void hideBottomBar() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                if (!SDKManager.getInstance().isReadAloudPlaying())
                    bottomActionbar.animate().translationY(+(bottomActionbar.getHeight())).setInterpolator(new AccelerateDecelerateInterpolator()).start();
            }
        });
    }

    private void hideTopBar() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                topActionbar.animate().translationY(-(topActionbar.getHeight())).setInterpolator(new AccelerateDecelerateInterpolator()).start();
            }
        });
    }

    private void toggleProgressSeekBar(boolean status) {
        if (SDKManager.getInstance().isPageScrollFeatureOn() && parentpageScrollSeekbarView != null && mReaderType == EBookType.REFLOWEPUB) {

            if (status) {
                showProgressSeekBar();

            } else {
                hideProgressSeekBar();
            }

        }
    }

    private void hideProgressSeekBar() {
        for (LinearLayout pageScrollSeekbarView : parentpageScrollSeekbarViewArray) {
            pageScrollSeekbarView.animate().translationX(+(parentpageScrollSeekbarView.getWidth())).setInterpolator(new AccelerateDecelerateInterpolator()).start();
            pageScrollSeekbarView.setVisibility(View.GONE);
        }

    }

    private void showProgressSeekBar() {

        for (LinearLayout pageScrollSeekbarView : parentpageScrollSeekbarViewArray) {
            pageScrollSeekbarView.setVisibility(View.VISIBLE);
            pageScrollSeekbarView.animate().translationX(0).setInterpolator(new AccelerateInterpolator()).start();
        }
    }

    /**
     * Show Bottom bar with animation
     */
    private void showBottomBar() {
        if (bottomActionbar != null) {
            bottomActionbar.animate().translationY(0).setInterpolator(new AccelerateInterpolator()).start();
            bottomActionbar.setVisibility(View.VISIBLE);
        }
    }

    private void showTopBottomBar() {
        if (topActionbar != null) {
            topActionbar.animate().translationY(0).setInterpolator(new AccelerateInterpolator()).start();
            topActionbar.setVisibility(View.VISIBLE);
        }
    }

    /**
     * Hide Opened Dialog  with outside click
     */
    private void hideDialog() {
        if (mDialog != null) {
            mDialog.dismiss();
            mDialog = null;
            toc = null;
        }

        if (mInstructionPopup != null && mInstructionPopup.isShowing()) {
            mInstructionPopup.dismiss();
            mInstructionPopup = null;
        }

        if (colorcalendar != null) {
            colorcalendar.dismiss();
            colorcalendar = null;
        }
    }

    /**
     * Show Actionbar with animation
     */
    private void showActionBar() {
        if (topActionbar != null) {
            topActionbar.animate().translationY(0).setListener(new Animator.AnimatorListener() {
                @Override
                public void onAnimationStart(Animator animation) {

                }

                @Override
                public void onAnimationEnd(Animator animation) {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                                topActionbar.setVisibility(View.GONE);
                            else
                                topActionbar.setVisibility(View.VISIBLE);
                            if (clickOnSearchiconFromHighlightPopup) {
                                openSearchDialog();
                            }
                        }
                    });
                }

                @Override
                public void onAnimationCancel(Animator animation) {

                }

                @Override
                public void onAnimationRepeat(Animator animation) {

                }
            }).setInterpolator(new AccelerateInterpolator()).start();


            showBottomBar();
            isActionBarVisible = true;
        }
    }

    /**
     * Responsible to open TOC dialog
     *
     * @param v : anchor view
     */
    private void showTableOfContent(View v) {
        FragmentTransaction ft = getFragmentManager().beginTransaction();
        Fragment prev = getFragmentManager().findFragmentByTag("toc");
        if (prev != null) {
            ft.remove(prev);
        }
        ft.addToBackStack(null);
        if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
            hideDialog();
        } else {
            if (isMobile) {
                toc = CustomTocView.newInstance("toc", v, mReaderType, isMobile);
                toc.setitemclickListener(this);
                toc.setviewlistner(this);
                toc.setThemeColor(readerThemeSettingVo);
                allTocData(toc);
                int[] params = setDilaoglayout();
                toc.setParams(params[0], params[1]);
                mDialog = toc;
                mDialog.show(getSupportFragmentManager(), "toc");
                overridePendingTransition(R.anim.slide_down, R.anim.slide_up);
            } else {
                // TOCBottomDialogFrag fragment = new TOCBottomDialogFragment();
                mBottomBookmarkFragment = TOCBottomDialogFrag.newInstance("toc", v, mReaderType, false);
                mBottomBookmarkFragment.setitemclickListener(this);
                mBottomBookmarkFragment.setviewlistner(this);
                mBottomBookmarkFragment.setThemeColor(readerThemeSettingVo);
                if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
                    if (tokenType.equalsIgnoreCase("GenericAccount")) {
                        allTOCBottmDataForGenericUser(mBottomBookmarkFragment);
                    } else {
                        allTOCBottomData(mBottomBookmarkFragment);
                    }
                }
                if (getResources().getBoolean(R.bool.is_FOSS)) {
                    allTOCBottmDataForChromebook(mBottomBookmarkFragment);
                } else if (getResources().getBoolean(R.bool.is_islamic_publication)) {
                    allTOCBottomDataForIslamicPublication(mBottomBookmarkFragment);
                } else {
                    allTOCBottomData(mBottomBookmarkFragment);
                }

                mBottomBookmarkFragment.show(getSupportFragmentManager(), "bottomTOc");
            }

        }
        hideFragment();
    }

    /**
     * Responsible to configure Toc data.
     *
     * @param toc
     */
    private void allTocData(CustomTocView toc) {
        LinkedHashMap contentVOs = new LinkedHashMap();
        if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
            if (tokenType.equalsIgnoreCase("GenericAccount")) {
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                    if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                        contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
                    if (mTorData.size() > 0) {
                        contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
                    }
                } else {
                    contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                }
            } else {
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                    if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                        contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
                    contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark));
                    if (mTorData.size() > 0) {
                        contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
                    }
                } else {
                    contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                    contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark_title));
                }
            }
        } else if (getResources().getBoolean(R.bool.is_islamic_publication)) {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                    contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
                contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark));
            } else {
                contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark_title));
            }
        } else {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                    contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
                contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark));
                if (SDKManager.getInstance().getInternalResources() != null && SDKManager.getInstance().getInternalResources().size() > 0
                        && bookVo.getExternalResourcesVocoll() != null && bookVo.getExternalResourcesVocoll().size() != 0) {
                    contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
                } else if ((mTorData != null && mTorData.size() > 0) && (mTorData.get(0).getResourcelist() != null && mTorData.get(0).getResourcelist().size() > 0)) {
                    contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
                }
            } else {
                contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
                contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark_title));
            }
        }

        ContentVO contentVO = new ContentVO();
        contentVO.setContentVOs(contentVOs);
        toc.setData(contentVO.getContentVOs());
    }

    private void allTOCBottomData(TOCBottomDialogFrag tocBottom) {
        LinkedHashMap contentVOs = new LinkedHashMap();
        if (mReaderType == EBookType.FIXEDKITABOO) {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
            if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
            contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark));
            if (SDKManager.getInstance().getInternalResources() != null && SDKManager.getInstance().getInternalResources().size() > 0
                    && bookVo.getExternalResourcesVocoll() != null && bookVo.getExternalResourcesVocoll().size() != 0) {
                contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
            } else if ((mTorData != null && mTorData.size() > 0) && (mTorData.get(0).getResourcelist() != null && mTorData.get(0).getResourcelist().size() > 0)) {
                contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
            }

        } else {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
            contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark_title));
        }
        ContentVO contentVO = new ContentVO();
        contentVO.setContentVOs(contentVOs);
        tocBottom.setData(contentVO.getContentVOs());
    }

    private void allTOCBottomDataForIslamicPublication(TOCBottomDialogFrag tocBottom) {
        LinkedHashMap contentVOs = new LinkedHashMap();
        if (mReaderType == EBookType.FIXEDKITABOO) {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
            if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
            contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark));
        } else {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
            contentVOs.put(getResources().getString(R.string.ugc_tab_bookmark), getResources().getString(R.string.ugc_tab_bookmark_title));
        }
        ContentVO contentVO = new ContentVO();
        contentVO.setContentVOs(contentVOs);
        tocBottom.setData(contentVO.getContentVOs());
    }

    private void allTOCBottmDataForGenericUser(TOCBottomDialogFrag tocBottom) {
        LinkedHashMap contentVOs = new LinkedHashMap();
        if (mReaderType == EBookType.FIXEDKITABOO) {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
            if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
            if (mTorData.size() > 0) {
                contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
            }

        } else {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
        }
        ContentVO contentVO = new ContentVO();
        contentVO.setContentVOs(contentVOs);
        tocBottom.setData(contentVO.getContentVOs());
    }

    private void allTOCBottmDataForChromebook(TOCBottomDialogFrag tocBottom) {
        LinkedHashMap contentVOs = new LinkedHashMap();
        if (mReaderType == EBookType.FIXEDKITABOO) {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
            if ((bookVo.getTableOfELPSVo() != null && bookVo.getTableOfELPSVo().size() > 0) || (bookVo.getTableOfTEKSVo() != null && bookVo.getTableOfTEKSVo().size() > 0))
                contentVOs.put(getResources().getString(R.string.toc_Standard), getResources().getString(R.string.toc_Standard));
            if (mTorData.size() > 0) {
                contentVOs.put(getResources().getString(R.string.toc_tab_resource), getResources().getString(R.string.toc_tab_resource));
            }

        } else {
            contentVOs.put(getResources().getString(R.string.bottombar_toc), getResources().getString(R.string.bottombar_toc_title));
        }
        ContentVO contentVO = new ContentVO();
        contentVO.setContentVOs(contentVOs);
        tocBottom.setData(contentVO.getContentVOs());
    }

    /**
     * Function responsible for Dialog customisatation according to screen size .
     */
    public int[] setDilaoglayout() {
        int[] params = new int[2];
        if (isMobile) {
            int width = ViewGroup.LayoutParams.MATCH_PARENT;
            int height = ViewGroup.LayoutParams.MATCH_PARENT;
            params[0] = height;
            params[1] = width;
        } else {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = displayMetrics.heightPixels;
            int width = displayMetrics.widthPixels;
            if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                /*
                Params for toc don't change
                 */
                params[0] = 3 * width / 6;
                params[1] = 3 * height / 4;

            } else {
                /*
                Params for toc don't change
                 */
                params[0] = 2 * width / 3;
                params[1] = (height / 2) + height / 6;

            }

        }
        return params;
    }


    /**
     * Customize the bottom actionbar
     */
    private void setUpBottomBar() {
        bottomActionbar = findViewById(R.id.bottomActionbarid);
        mEpubSettingPanel = new KitabooActionItemView(this);
        KitabooActionItemView actionItemHome = null;
        KitabooActionItemView textAnnotation = null;
        KitabooActionItemView item1 = null;
        KitabooActionItemView item2 = null;
        KitabooActionItemView item3 = null;
        KitabooActionItemView item4 = null;
        KitabooActionItemView item5 = null;
        KitabooActionItemView item6 = null;
        KitabooActionItemView item7 = null;
        KitabooActionItemView item8 = null;

        actionItemHome = new KitabooActionItemView(this);
        item1 = new KitabooActionItemView(this);
        item2 = new KitabooActionItemView(this);
        item3 = new KitabooActionItemView(this);
        item4 = new KitabooActionItemView(this);
        item5 = new KitabooActionItemView(this);
        item6 = new KitabooActionItemView(this);
        item7 = new KitabooActionItemView(this);
        item8 = new KitabooActionItemView(this);

        /* TODO For Infobase client Menu icons will be differ based on User type*/

        if (getResources().getBoolean(R.bool.is_Infobase_Client)) {
            if (tokenType.equalsIgnoreCase("GenericAccount")) {
                /* TODO For Generic users only TOC and Search icons will be visible */
                addMenuItemsToTheActionbarForGenericAccount(actionItemHome, item1, item2);
            } else {
                /* TODO For user specific account all icons should be visible.*/
                addMenuItemsToTheActionbar(actionItemHome, item1, item2, item3, item4, item5, item6, item7, item8);
            }
        } else if (getResources().getBoolean(R.bool.is_storylt_client)) {
            addMenuItemsToTheActionbarforstorylt(actionItemHome, item1, item2, item3, item4);
        } else if (getResources().getBoolean(R.bool.is_FOSS)) {
            addMenuItemsToTheActionbarForChromebook(actionItemHome, item1, item2, item3, item4, item5);
        } else if (getResources().getBoolean(R.bool.is_ESE_client)) {
            addMenuItemsToTheActionbarForChromebookESE(actionItemHome, item1, item2, item3, item4, item5, item6, item7);
        } else if (getResources().getBoolean(R.bool.is_ADA_Client)) {
            addMenuItemsToTheActionbarForADA(actionItemHome, item1, item2, item3, item4, item5, item6, item7);
        } else {
            addMenuItemsToTheActionbar(actionItemHome, item1, item2, item3, item4, item5, item6, item7, item8);
        }
        bottomActionbar.setBackgroundDrawable(Utils.getRectAngleDrawable(mTopActionbarBackGroundColor,
                new float[]{2, 2, 2, 2, 2, 2, 2, 2}, 1, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTableofcontents().getPopupBorder())));
        bottomActionbar.build();
    }


    private void addMenuItemsToTheActionbarforstorylt(KitabooActionItemView
                                                              actionItemHome, KitabooActionItemView item1, KitabooActionItemView item2, KitabooActionItemView item3,
                                                      KitabooActionItemView item4) {


        if (isMobile) {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = displayMetrics.heightPixels;
            int width = displayMetrics.widthPixels;
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                setBottomActionbar(item4, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);

            } else {
                displayMetrics = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                height = displayMetrics.heightPixels;
                width = displayMetrics.widthPixels;
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
                setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
                setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
                setBottomActionbar(item4, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
            }


        } else {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = displayMetrics.heightPixels;
            int width = displayMetrics.widthPixels;
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
                setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
                setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
                setBottomActionbar(item4, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);

            } else {
                displayMetrics = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                height = displayMetrics.heightPixels;
                width = displayMetrics.widthPixels;
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 6, 22);
                setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 6, 22);
                setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 6, 22);
                setBottomActionbar(item4, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 6, 22);

            }
        }

    }

    private void addMenuItemsToTheActionbarForGenericAccount(KitabooActionItemView
                                                                     actionItemHome, KitabooActionItemView item1, KitabooActionItemView item2) {
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_margin_for_generic_user_fixed), 22);
                setBottomActionbar(item2, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.search_margin_for_generic_user), 22);
            } else {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_margin_for_generic_user), 22);
                setBottomActionbar(item2, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.search_margin_for_generic_user), 22);
                setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.font_margin_for_generic_user), 22);

            }
        } else {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_land_margin_for_generic_user_fixed), 22);
                setBottomActionbar(item2, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.search_land_margin_for_generic_user), 22);
            } else {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_land_margin_for_generic_user), 22);
                setBottomActionbar(item2, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.search_land_margin_for_generic_user), 22);
                setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.font_land_margin_for_generic_user), 22);

            }

        }
    }


    private void addMenuItemsToTheActionbarForChromebookESE(KitabooActionItemView
                                                                    actionItemHome, KitabooActionItemView item1, KitabooActionItemView item2, KitabooActionItemView item3,
                                                            KitabooActionItemView item4, KitabooActionItemView item5, KitabooActionItemView item6, KitabooActionItemView item7) {


        mPageModeIcon = new KitabooActionItemView(this);
        mPageZoomIcon = new KitabooActionItemView(this);
        mZoomPercentageText = new KitabooActionItemView(this);
        mPageZoomOutIcon = new KitabooActionItemView(this);

        if (isMobile) {
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                    setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);

                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_toc_margin), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 10, 22);

                    if (getResources().getBoolean(R.bool.show_data_submit)) {
                        if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                            if (accountType.equals(Constants.TEACHER)) {
                                if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                    if (IsClassAccociated) {
                                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                    }
                                } else {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                }
                            } else {

                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        }

                    }
                }
            }
        } else if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = displayMetrics.heightPixels;
            int width = displayMetrics.widthPixels;
            setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_margin), 22);
            setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
            setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
            setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
            setBottomActionbar(item5, R.id.action_sticky_note, "E", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
            setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
            if (getResources().getBoolean(R.bool.show_data_submit)) {
                if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                    if (accountType.equals(Constants.TEACHER)) {
                        if (getResources().getBoolean(R.bool.is_voyger_client)) {
                            if (IsClassAccociated) {
                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        } else {
                            setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                        }
                    } else {

                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    }
                }
            }
        } else {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = displayMetrics.heightPixels;
            int width = displayMetrics.widthPixels;
            if (getPackageManager().hasSystemFeature("org.chromium.arc.device_management")) {
                if (getPackageManager().hasSystemFeature("android.hardware.touchscreen")) {
                    setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_land_margin_for_chromebook), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "E", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    if (getResources().getBoolean(R.bool.show_data_submit)) {
                        if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                            if (accountType.equals(Constants.TEACHER)) {
                                if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                    if (IsClassAccociated) {
                                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                                    }
                                } else {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                                }
                            } else {

                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                            }
                        }
                    }
                    setBottomActionbar(mPageModeIcon, R.id.action_page_mode, "R", CustomPlayerUIConstants.ACTIONBAR_SNGLE_PAGE_ICON, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);

                } else {
                    setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin_chrombook), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "E", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    if (getResources().getBoolean(R.bool.show_data_submit)) {
                        if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                            if (accountType.equals(Constants.TEACHER)) {
                                if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                    if (IsClassAccociated) {
                                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                                    }
                                } else {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                                }
                            } else {

                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                            }
                        }
                    }
                    setBottomActionbar(mPageModeIcon, R.id.action_page_mode, "R", CustomPlayerUIConstants.ACTIONBAR_SNGLE_PAGE_ICON, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(mPageZoomIcon, R.id.action_page_zoom, "x", CustomPlayerUIConstants.ACTIONBAR_PAGE_ZOOM, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(mZoomPercentageText, R.id.action_page_zoom_percentage, "R", "100", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    setBottomActionbar(mPageZoomOutIcon, R.id.action_page_zoom_out, "y", CustomPlayerUIConstants.ACTIONBAR_PAGE_ZOOM_OUT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);


                }
            } else {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin), 22);
                setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item5, R.id.action_sticky_note, "E", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                if (getResources().getBoolean(R.bool.show_data_submit)) {
                    if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                        if (accountType.equals(Constants.TEACHER)) {
                            if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                if (IsClassAccociated) {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                }
                            } else {
                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        } else {

                            setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                        }
                    }
                }
            }
            if (getPackageManager().hasSystemFeature("org.chromium.arc.device_management")) {
                if (getPackageManager().hasSystemFeature("android.hardware.touchscreen")) {
                    mPageZoomIcon.setVisibility(View.GONE);
                    mPageZoomOutIcon.setVisibility(View.GONE);

                } else {
                    mPageZoomIcon.setVisibility(View.VISIBLE);
                    mZoomPercentageText.setVisibility(View.VISIBLE);
                    mPageZoomOutIcon.setVisibility(View.VISIBLE);
                }

            } else {
                mPageZoomIcon.setVisibility(View.GONE);
                mPageZoomOutIcon.setVisibility(View.GONE);
                mPageModeIcon.setVisibility(View.GONE);
            }
        }
    }

    private void addMenuItemsToTheActionbar(KitabooActionItemView actionItemHome, KitabooActionItemView item1, KitabooActionItemView item2, KitabooActionItemView item3,
                                            KitabooActionItemView item4, KitabooActionItemView item5, KitabooActionItemView item6, KitabooActionItemView item7, KitabooActionItemView item8) {
        KitabooActionItemView item10 = new KitabooActionItemView(this);
        if (isMobile) {
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                    setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);

                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item8, R.id.teacher_review_clear_all, "", CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, mPentoolToolbarItemColor, Gravity.LEFT, 0, 22);

                    if (getResources().getBoolean(R.bool.show_data_submit)) {
                        if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                            if (accountType.equals(Constants.TEACHER)) {
                                if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                    if (IsClassAccociated) {
                                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                                    }
                                } else {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                                }
                            } else {

                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                            }
                        }
                    }
                    if (protractorenable != null && protractorenable.equalsIgnoreCase("yes")) {
                        setBottomActionbar(item10, R.id.text_protractor, "p", PlayerUIConstants.TB_PROTRACTOR_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    }
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    DisplayMetrics displayMetrics = new DisplayMetrics();
                    getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                    int width = displayMetrics.widthPixels;


                    if (SDKManager.getInstance().isMediaOverlay() /*|| true*/) {
                        setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 12, 22);
                        setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 12, 22);
                        setBottomActionbar(item3, R.id.action_search, "E", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 12, 22);
                        setBottomActionbar(item4, R.id.read_aloud, "D", CustomPlayerUIConstants.READ_AUDIO_EPUB, mBottomActionBarItemColor, Gravity.LEFT, width / 12, 22);
                        mReadAloudIcon = item4;
                        disableReadAloudIcon();
                        setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "F", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, width / 12, 22);
                    } else {
                        if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                            setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_toc_margin), 22);
                        setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_common_margin), 22);
                        setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_search_margin), 22);
                        setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.RIGHT, 5, 22);
                    }


                } else if (mReaderType == EBookType.FIXEDEPUB) {

                    DisplayMetrics displayMetrics = new DisplayMetrics();
                    getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                    int width = displayMetrics.widthPixels;

                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 25, 22);
                        } else {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 5, 22);
                        }
                    }
                    int value = 25;
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    mthumbnailIcon = item6;
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);


                }
            } else {
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_left_margin), 22);

                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", "b", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_land_margin), 22);

                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item8, R.id.teacher_review_clear_all, "", CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);

                    if (getResources().getBoolean(R.bool.show_data_submit)) {
                        if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                            if (accountType.equals(Constants.TEACHER)) {
                                if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                    if (bookVo.IsClassAssociated()) {
                                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);

                                    }
                                } else {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                }
                            } else {

                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        }
                    }
                    /*if (accountType.equals(Constants.TEACHER)) {
                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 30, 22);
                    }
                    else{
                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 30, 22);
                    }*/
                    if (protractorenable != null && protractorenable.equalsIgnoreCase("yes")) {
                        setBottomActionbar(item10, R.id.text_protractor, "p", PlayerUIConstants.TB_PROTRACTOR_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 30, 22);
                    }
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_left_margin), 22);


                    if (SDKManager.getInstance().isMediaOverlay() /*|| true*/) {

                        if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                            setBottomActionbar(item1, R.id.action_toc, "B", "b", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_toc_margin), 22);
                            setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                            setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                            setBottomActionbar(item4, R.id.read_aloud, "E", CustomPlayerUIConstants.READ_AUDIO_EPUB, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_aduioSync_common_margin), 22);
                            mReadAloudIcon = item4;
                            disableReadAloudIcon();
                            setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "F", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                        }

                    } else {
                        if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                            setBottomActionbar(item1, R.id.action_toc, "B", "b", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_toc_margin), 22);
                            setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                            setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                            setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                        }
                    }
                } else if (mReaderType == EBookType.FIXEDEPUB) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_left_margin_fixed_epub), 22);
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", "b", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_margin), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    mthumbnailIcon = item6;
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    disableReadAIcon();
                }
            }

            /*if (mReaderType == EBookType.FIXEDKITABOO) {
                setBottomActionbar(textAnnotation, R.id.text_annotation, "A", "ʧ", mBottomActionBarItemColor, Gravity.LEFT , 0);
            }*/

        } else {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_margin), 22);
                } else {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin), 22);
                }

            } else {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    if (mReaderType == EBookType.REFLOWEPUB) {
                        if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                            setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_epub_margin), 22);
                    } else {
                        if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                            setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_epub_margin_fixed), 22);
                    }

                } else {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                }

            }
            /*if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_margin));
                } else {
                    setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin));
                }
            }*/

            // setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin));
            // setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin));
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                        setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                    } else {
                        setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin), 22);
                    }
                }
                setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                // KitabooActionItemView item10 = new KitabooActionItemView(this);
                setBottomActionbar(item8, R.id.teacher_review_clear_all, "", CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);

                if (getResources().getBoolean(R.bool.show_data_submit)) {
                    if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                        if (accountType.equals(Constants.TEACHER)) {
                            if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                if (IsClassAccociated) {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                }
                            } else {
                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        } else {

                            setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                        }
                    }
                }
                /*if (accountType.equals(Constants.TEACHER)) {
                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                } else {
                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                }*/
                if (protractorenable != null && protractorenable.equalsIgnoreCase("yes")) {
                    setBottomActionbar(item10, R.id.text_protractor, "p", PlayerUIConstants.TB_PROTRACTOR_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                }
            } else {
                DisplayMetrics displayMetrics = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                int height = displayMetrics.heightPixels;
                int width = displayMetrics.widthPixels;
                if (mReaderType == EBookType.REFLOWEPUB) {

                    if (SDKManager.getInstance().isMediaOverlay() /*|| true*/) {

                        if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                                setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 7, 22);
                            } else {
                                setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 5, 22);
                            }
                        }
                        setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 13, 22);
                        setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 13, 22);
                        setBottomActionbar(item4, R.id.read_aloud, "E", CustomPlayerUIConstants.READ_AUDIO_EPUB, mBottomActionBarItemColor, Gravity.LEFT, width / 13, 22);
                        mReadAloudIcon = item4;
                        disableReadAloudIcon();
                        setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "F", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, width / 13, 22);
                    } else {

                        if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                                setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 5, 22);
                            } else {
                                setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 5, 22);
                            }
                        }

                        setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 10, 22);
                        setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 10, 22);
                        setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, width / 10, 22);
                    }

                }

            }
            if (mReaderType == EBookType.FIXEDEPUB) {

                DisplayMetrics displayMetrics = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                int height = displayMetrics.heightPixels;
                int width = displayMetrics.widthPixels;
                if (mReaderType == EBookType.FIXEDEPUB) {
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                        } else {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 5, 22);
                        }
                    }
                    int value = 20;
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    mthumbnailIcon = item6;
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / value, 22);
                    disableReadAIcon();
                }

            }
            /*if (mReaderType == EBookType.FIXEDKITABOO) {

                setBottomActionbar(textAnnotation, R.id.text_annotation, "A", "ʧ", mBottomActionBarItemColor, Gravity.LEFT , getResources().getInteger(R.integer.action_bar_bottom_common_margin));
            }*/
        }
    }

    private void disableReadAloudIcon() {

        if (SDKManager.getInstance().isAudioSyncEnable()) {
            if (mReadAloudIcon != null) {
                mReadAloudIcon.setAlpha(1.0f);
                mReadAloudIcon.setEnabled(true);
            }
        } else {
            if (mReadAloudIcon != null) {
                mReadAloudIcon.setAlpha(0.5f);
                mReadAloudIcon.setEnabled(false);
            }
        }
    }

    private void addMenuItemsToTheActionbarForChromebook(KitabooActionItemView actionItemHome, KitabooActionItemView item1, KitabooActionItemView item2, KitabooActionItemView item3, KitabooActionItemView item4, KitabooActionItemView item5) {

        mPageModeIcon = new KitabooActionItemView(this);
        mPageZoomIcon = new KitabooActionItemView(this);
        mZoomPercentageText = new KitabooActionItemView(this);
        mPageZoomOutIcon = new KitabooActionItemView(this);
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = displayMetrics.heightPixels;
            int width = displayMetrics.widthPixels;
            setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_margin_for_chromebook), 22);
            setBottomActionbar(item5, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.search_margin_for_chromebook), 22);
        } else {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
            int height = displayMetrics.heightPixels;
            int width = displayMetrics.widthPixels;
            if (getPackageManager().hasSystemFeature("org.chromium.arc.device_management")) {
                if (getPackageManager().hasSystemFeature("android.hardware.touchscreen")) {
                    setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_land_margin_for_chrome_book), 22);
                    setBottomActionbar(item5, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.search_land_margin_for_chrome_book), 22);

                } else {
                    setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                    setBottomActionbar(item5, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                    setBottomActionbar(mPageZoomIcon, R.id.action_page_zoom, "x", CustomPlayerUIConstants.ACTIONBAR_PAGE_ZOOM, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                    setBottomActionbar(mZoomPercentageText, R.id.action_page_zoom_percentage, "R", "100", mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                    setBottomActionbar(mPageZoomOutIcon, R.id.action_page_zoom_out, "y", CustomPlayerUIConstants.ACTIONBAR_PAGE_ZOOM_OUT, mBottomActionBarItemColor, Gravity.LEFT, width / 8, 22);
                }

            } else {
                setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.toc_land_margin_for_chrome_book), 22);
                setBottomActionbar(item5, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.search_land_margin_for_chrome_book), 22);


            }
            if (getPackageManager().hasSystemFeature("org.chromium.arc.device_management")) {
                if (getPackageManager().hasSystemFeature("android.hardware.touchscreen")) {
                    mPageZoomIcon.setVisibility(View.GONE);
                    mPageZoomOutIcon.setVisibility(View.GONE);
                    mZoomPercentageText.setVisibility(View.GONE);

                } else {
                    mPageZoomIcon.setVisibility(View.VISIBLE);
                    mZoomPercentageText.setVisibility(View.VISIBLE);
                    mPageZoomOutIcon.setVisibility(View.VISIBLE);
                }

            } else {
                mPageZoomIcon.setVisibility(View.GONE);
                mPageZoomOutIcon.setVisibility(View.GONE);
                mZoomPercentageText.setVisibility(View.GONE);

            }
        }
    }


    private void addMenuItemsToTheActionbarForADA(KitabooActionItemView actionItemHome, KitabooActionItemView item1, KitabooActionItemView item2, KitabooActionItemView item3,
                                                  KitabooActionItemView item4, KitabooActionItemView item5, KitabooActionItemView item6, KitabooActionItemView item7) {
        KitabooActionItemView item10 = new KitabooActionItemView(this);
        if (isMobile) {
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                    setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);

                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_toc_margin), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 10, 22);


                    if (getResources().getBoolean(R.bool.show_data_submit)) {
                        if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                            if (accountType.equals(Constants.TEACHER)) {
                                if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                    if (IsClassAccociated) {
                                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                    }
                                } else {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                }
                            } else {

                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        }
                    }
                    if (protractorenable != null && protractorenable.equalsIgnoreCase("yes")) {
                        setBottomActionbar(item10, R.id.text_protractor, "p", PlayerUIConstants.TB_PROTRACTOR_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    }
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_toc_margin), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_search_margin), 22);
                    setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.RIGHT, 5, 22);


                } else if (mReaderType == EBookType.FIXEDEPUB) {
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_fixed_epub_margin), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_fixed_epub_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_fixed_epub_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_fixed_epub_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_fixed_epub_common_margin), 22);
                }
            } else {
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_left_margin), 22);

                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", "b", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_land_margin), 22);

                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);
                    setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 0, 22);

                    if (getResources().getBoolean(R.bool.show_data_submit)) {
                        if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                            if (accountType.equals(Constants.TEACHER)) {
                                if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                    if (bookVo.IsClassAssociated()) {
                                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);

                                    }
                                } else {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                }
                            } else {

                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        }
                    }
                    /*if (accountType.equals(Constants.TEACHER)) {
                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 30, 22);
                    }
                    else{
                        setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 30, 22);
                    }*/
                    if (protractorenable != null && protractorenable.equalsIgnoreCase("yes")) {
                        setBottomActionbar(item10, R.id.text_protractor, "p", PlayerUIConstants.TB_PROTRACTOR_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, 30, 22);
                    }
                } else if (mReaderType == EBookType.REFLOWEPUB) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_left_margin), 22);
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                        setBottomActionbar(item1, R.id.action_toc, "B", "b", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_toc_margin), 22);
                        setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                        setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                        setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    }
                } else if (mReaderType == EBookType.FIXEDEPUB) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_left_margin_fixed_epub), 22);
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(item1, R.id.action_toc, "B", "b", mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_margin), 22);
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_epub_land_common_margin), 22);
                }
            }

            /*if (mReaderType == EBookType.FIXEDKITABOO) {
                setBottomActionbar(textAnnotation, R.id.text_annotation, "A", "ʧ", mBottomActionBarItemColor, Gravity.LEFT , 0);
            }*/

        } else {
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_margin), 22);
                } else {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin), 22);
                }

            } else {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    if (mReaderType == EBookType.REFLOWEPUB) {
                        if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                            setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_epub_margin), 22);
                    } else {
                        if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                            setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_epub_margin_fixed), 22);
                    }

                } else {
                    if (getResources().getBoolean(R.bool.is_sparkCapital_client))
                        setBottomActionbar(actionItemHome, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                }

            }
            /*if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_margin));
                } else {
                    setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin));
                }
            }*/

            // setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin));
            // setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin));
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                        setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_margin), 22);
                    } else {
                        setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_pdf_land_margin), 22);
                    }
                }
                setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                setBottomActionbar(item6, R.id.action_thumbnail, "9", CustomPlayerUIConstants.ACTION_THUMBNAIL_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                // KitabooActionItemView item10 = new KitabooActionItemView(this);

                if (getResources().getBoolean(R.bool.show_data_submit)) {
                    if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                        if (accountType.equals(Constants.TEACHER)) {
                            if (getResources().getBoolean(R.bool.is_voyger_client)) {
                                if (IsClassAccociated) {
                                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                                }
                            } else {
                                setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                            }
                        } else {

                            setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_pdf_common_margin), 22);
                        }
                    }
                }
                /*if (accountType.equals(Constants.TEACHER)) {
                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_TEACHER_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                } else {
                    setBottomActionbar(item7, R.id.topbar_review, "G", PlayerUIConstants.TB_STUDENT_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                }*/
                if (protractorenable != null && protractorenable.equalsIgnoreCase("yes")) {
                    setBottomActionbar(item10, R.id.text_protractor, "p", PlayerUIConstants.TB_PROTRACTOR_IC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_common_margin), 22);
                }
            } else {
                DisplayMetrics displayMetrics = new DisplayMetrics();
                getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
                int height = displayMetrics.heightPixels;
                int width = displayMetrics.widthPixels;
                if (mReaderType == EBookType.REFLOWEPUB) {
                    if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 5, 22);
                        } else {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 5, 22);
                        }
                    }
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 10, 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, width / 10, 22);
                    setBottomActionbar(mEpubSettingPanel, R.id.action_font_settings, "C", CustomPlayerUIConstants.ACTION_FONT_SETTING, mBottomActionBarItemColor, Gravity.LEFT, width / 10, 22);
                }

            }
            if (mReaderType == EBookType.FIXEDEPUB) {
                int screenSize = getApplicationContext().getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK;
                int density = getApplicationContext().getResources().getDisplayMetrics().densityDpi;
                if (!getResources().getBoolean(R.bool.is_sparkCapital_client)) {
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                        if (screenSize == Configuration.SCREENLAYOUT_SIZE_XLARGE && density == DisplayMetrics.DENSITY_XHIGH) {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.bottom_action_bar_FixedEpub_margin_320), 22);
                        } else
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.bottom_action_bar_FixedEpub_margin), 22);
                    } else {
                        if (screenSize == Configuration.SCREENLAYOUT_SIZE_XLARGE && density == DisplayMetrics.DENSITY_XHIGH) {
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.bottom_action_bar_land_FixedEpub_margin_320), 22);
                        } else
                            setBottomActionbar(actionItemHome, R.id.action_toc, "B", CustomPlayerUIConstants.ACTION_TOC_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.bottom_action_bar_land_FixedEpub_margin), 22);
                    }
                    setBottomActionbar(item2, R.id.action_my_data, "C", CustomPlayerUIConstants.ACTION_MYDATA_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_fixed_epub_common_margin), 22);
                    setBottomActionbar(item3, R.id.action_search, "D", CustomPlayerUIConstants.ACTION_SEARCH_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_fixed_epub_common_margin), 22);
                    setBottomActionbar(item4, R.id.action_pen, "E", CustomPlayerUIConstants.ACTION_PEN_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_fixed_epub_common_margin), 22);
                    setBottomActionbar(item5, R.id.action_sticky_note, "B", CustomPlayerUIConstants.NOTE_ICON_TEXT, mBottomActionBarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_bottom_fixed_epub_common_margin), 22);
                }

            }
            /*if (mReaderType == EBookType.FIXEDKITABOO) {

                setBottomActionbar(textAnnotation, R.id.text_annotation, "A", "ʧ", mBottomActionBarItemColor, Gravity.LEFT , getResources().getInteger(R.integer.action_bar_bottom_common_margin));
            }*/
        }
    }

    /**
     * Customise the bottom actionbar item with different icon , color
     *
     * @param item            : Actionbar item view
     * @param itemId          : id of Actionbar item view
     * @param itemName        : name of Actionbar item view
     * @param charManningChar : special character from ttf file
     * @param itemColor       : color of Actionbar item view
     * @param itemGravity     : left/right as required respective to actionbar
     */

    private void setBottomActionbar(KitabooActionItemView item, int itemId, String itemName, String charManningChar, int itemColor, int itemGravity, int leftMargin, int textSize) {
        item.setId(itemId, item);
        item.setUniqueName(itemName);
        item.setCharatorManningChar(charManningChar);
        item.setTextColor(itemColor);
        item.setGravity(Gravity.CENTER | Gravity.CENTER_VERTICAL);
        if (topActionbar != null)
            item.setTypeface(itemId == R.id.teacher_review_done || itemId == R.id.action_page_zoom_percentage ? null : topActionbar.defaultActionbarTypeface(this));
        item.setAllCaps(false);
        item.setTextSize(textSize);
        item.setLeftMargin(leftMargin);
        if (itemId == R.id.action_page_zoom_percentage) {
            item.setText(charManningChar + String.format(getString(R.string.add_percentage)));
            mZoomText = Integer.parseInt(charManningChar);
        }
        if (isMobile) {
            /*if (getResources().getBoolean(R.bool.is_it_worldbook)) {
                item.setMinimumWidth(160);
            } else {*/
            if (item.getId() == R.id.teacher_review_green || item.getId() == R.id.teacher_review_red)
                item.setMinimumWidth(90);
            else
                item.setMinimumWidth(getResources().getInteger(R.integer.actionbar_menu_width_mobile));
            //}
        } else
            item.setMinimumWidth(100);
       /* else {
            //item.setMinimumWidth(100);
            //item.setMinimumWidth(getResources().getInteger(R.integer.actionbar_menu_width_tab));
        }*/


        //bottomActionbar.setBackgroundColor(getResources().getColor(R.color.white));
        bottomActionbar.addActionItem(item, itemGravity);
        bottomActionbar.addEventCallback(this);

    }

    /**
     * Add custom view to action bar with its properties
     *
     * @param item        : Custom Actionbar item view
     * @param itemId      : id of custom Actionbar item view
     * @param itemName    : name of custom Actionbar item view
     * @param itemColor   : color of custom Actionbar item view
     * @param itemGravity : left/right as required respective to custom actionbar
     */
    private void setCustomViewActionbar(View item, int itemId, String itemName, int itemColor, int itemGravity, int leftmargin) {

        item.setId(itemId);


        if (item instanceof CustomCompoundView) {
            ((CustomCompoundView) item).setLeftMargin(leftmargin);

        }

        if (item instanceof TextView) {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);

            ((TextView) item).setMaxWidth(displayMetrics.widthPixels - 300);
            pageNumberDetailsTextView((TextView) item, itemColor);

        }

        if (item instanceof ImageView) {


            if (isMobile) {
                item.setMinimumWidth(100);
                item.setMinimumHeight(100);

            } else {
                item.setMinimumWidth(80);
                item.setMinimumHeight(80);
                //((ImageView)item).setLayoutParams(new FrameLayout.LayoutParams(30,30));

            }
        }

        topActionbar.addActionItem(item, itemGravity);
        topActionbar.addEventCallback(this);
    }

    private void setCustomViewActionbar(View item, int itemId, String itemName, int itemColor, int itemGravity, int leftmargin, CustomKitabooActionbar customKitabooActionbar) {

        item.setId(itemId);


        if (item instanceof CustomCompoundView) {
            ((CustomCompoundView) item).setLeftMargin(leftmargin);

        }

        if (item instanceof TextView) {
            DisplayMetrics displayMetrics = new DisplayMetrics();
            getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);

            ((TextView) item).setMaxWidth(displayMetrics.widthPixels - 300);
            pageNumberDetailsTextView((TextView) item, itemColor);

        }

        if (item instanceof ImageView) {


            if (isMobile) {
                item.setMinimumWidth(100);
                item.setMinimumHeight(100);

            } else {
                item.setMinimumWidth(80);
                item.setMinimumHeight(80);
                //((ImageView)item).setLayoutParams(new FrameLayout.LayoutParams(30,30));

            }
        }

        customKitabooActionbar.addActionItem(item, itemGravity);
        customKitabooActionbar.addEventCallback(this);
    }

    private Bitmap getBitmapFromDrawable(Drawable drawable) {
        if (drawable == null) {
            return null;
        }

        if (drawable instanceof BitmapDrawable) {
            return ((BitmapDrawable) drawable).getBitmap();
        }

        try {
            Bitmap bitmap;

            if (drawable instanceof ColorDrawable) {
                bitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);
            } else {
                bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(), drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
            }

            Canvas canvas = new Canvas(bitmap);
            drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
            drawable.draw(canvas);
            return bitmap;
        } catch (OutOfMemoryError e) {
            return null;
        }
    }

    private void getBitmap() {
       /* if (!UserController.getInstance(PlayerActivity.this).getUserVO().getProfilePic().isEmpty()) {
            Picasso.with(PlayerActivity.this).load(UserController.getInstance(PlayerActivity.this).getUserVO().getProfilePic())
                    .networkPolicy(NetworkPolicy.NO_STORE).memoryPolicy(MemoryPolicy.NO_CACHE).into(target);
        }*/

    }

    private final Target target = new Target() {
        @Override
        public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {
            mBitmap = bitmap;
            drawImage();
        }

        @Override
        public void onBitmapFailed(Drawable errorDrawable) {

        }

        @Override
        public void onPrepareLoad(Drawable placeHolderDrawable) {

        }
    };

    private void drawImage() {

      /*  if (mProfileImage != null) {
            if (UserController.getInstance(this).getUserVO() != null && UserController.getInstance(this).getUserVO().getProfilePic() != null && !UserController.getInstance(this).getUserVO().getProfilePic().isEmpty()) {
                loadImage(UserController.getInstance(this).getUserVO().getProfilePic());
            } else if (mProfileImage != null && getProfilePic() != null) {
                mProfileImage.setImageBitmap(getCroppedBitmap(getProfilePic()));
            } else if (mProfileImage != null) {
                mProfileImage.setImageDrawable(getRoundDrawble());
            }
        }*/

    }

    private RoundedBitmapDrawable getRoundDrawble() {
        Paint paint = new Paint();
        if (mBitmap == null) {
            mBitmap = getBitmapFromDrawable(getResources().getDrawable(R.drawable.default_user));
        }
        int srcBitmapWidth = mBitmap.getWidth();
        int srcBitmapHeight = mBitmap.getHeight();
        int borderWidth = 25;
        int shadowWidth = 10;
        int dstBitmapWidth = Math.min(srcBitmapWidth, srcBitmapHeight) + borderWidth * 2;
        Bitmap dstBitmap = Bitmap.createBitmap(dstBitmapWidth + 20, dstBitmapWidth, Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(dstBitmap);
        canvas.drawBitmap(mBitmap, (dstBitmapWidth - srcBitmapWidth) / 2, (dstBitmapWidth - srcBitmapHeight) / 2, null);
        paint.setStyle(Paint.Style.STROKE);
        paint.setStrokeWidth(borderWidth * 2);
        paint.setColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getToolbar().getTop().getIconsColor()));
        paint.setStrokeJoin(Paint.Join.ROUND);
        paint.setStrokeCap(Paint.Cap.ROUND);
        paint.setAntiAlias(true);
        paint.setDither(true);
        canvas.drawCircle(canvas.getWidth() / 2, canvas.getHeight() / 2, canvas.getWidth() / 2, paint);
        paint.setColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getMain().getToolbar().getTop().getIconsColor()));
        paint.setStrokeWidth(shadowWidth);
        RoundedBitmapDrawable roundedBitmapDrawable = RoundedBitmapDrawableFactory.create(getResources(), dstBitmap);
        roundedBitmapDrawable.setCircular(true);
        roundedBitmapDrawable.setAntiAlias(true);

        return roundedBitmapDrawable;
    }


    /**
     * Set page number text view with it's properties
     *
     * @param textView  : Custom Actionbar text view
     * @param itemColor : color of text view
     */
    private void pageNumberDetailsTextView(final TextView textView, int itemColor) {

        textView.setBackgroundColor(Color.TRANSPARENT);
        textView.setTextColor(itemColor);
        textView.setTextSize(16);
        textView.setGravity(Gravity.CENTER_VERTICAL);
        textView.setSingleLine(true);
        textView.setEllipsize(TextUtils.TruncateAt.END);
    }

    /**
     * Set page deatils seekbar view with it's properties
     *
     * @param seekBar   : Custom Seekbar item view
     * @param itemColor : color of seekbar view
     */
    private void pageDetailsSeekBarComponent(final PageDetailsSeekBarHint seekBar, int itemColor) {

        seekBar.setThumb(getSeekBarGradient(itemColor));
        seekBar.getProgressDrawable().setColorFilter(itemColor, PorterDuff.Mode.SRC_ATOP);
        int seekbarMax = (null == mPageDetailsSeekBarColl) ? 0 : (mPageDetailsSeekBarColl.size()) - 1;
        seekBar.setMax(seekbarMax);
        seekBar.setProgress(0);
        seekBar.setIndeterminate(false);
        seekBar.setMinimumWidth(getSeekBarWidth());

        View view = seekBar.getHintView();

        if (view == null) {
            return;
        }

        (view.findViewById(R.id.cv_seekbar_hint_popup)).setBackgroundColor(itemColor);
        ((TextView) view.findViewById(R.id.textChapterTitle)).setTextColor(Color.WHITE);
        ((TextView) view.findViewById(R.id.textChapterPage)).setTextColor(Color.WHITE);

        progressChangeListener();
    }

    /**
     * Listener's on page details seekbar
     */
    private void progressChangeListener() {
        seekBar.setOnProgressChangeListener(new PageDetailsSeekBarHint.OnSeekBarHintProgressChangeListener() {
            @Override
            public String onHintTextChanged(PageDetailsSeekBarHint seekBarHint, int progress) {

                if (seekBar.getHintView() == null || null == mPageDetailsSeekBarColl) {
                    return null;
                }

                //Set title and page number to page details hint popup
                ((TextView) seekBar.getHintView().findViewById(R.id.textChapterTitle)).setText(getResources().getString(R.string.ugc_mydata_chapter_label) + mPageDetailsSeekBarColl.get(progress).getChapterName());
                ((TextView) seekBar.getHintView().findViewById(R.id.textChapterPage)).setText(getResources().getString(R.string.pages) + (mPageDetailsSeekBarColl.get(progress).getFolioID()) + "/" + mPageDetailsSeekBarColl.size() + "");

                return null;
            }
        });

        seekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                if (null != renderView) {
                    if (isMobile) {
                        renderView.navigatePage(seekBar.getProgress(), "", "", true, true);
                    } else {
                        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                            renderView.navigatePage(seekBar.getProgress() + 1, "", "", true, true);
                        } else {
                            renderView.navigatePage(Math.round(seekBar.getProgress() / 2), "", "", true, true);
                        }
                    }
                }
            }

            @SuppressLint("NewApi")
            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                TextView view = new TextView(seekBar.getContext());
                view.setText(getResources().getString(R.string.ugc_mydata_page_label) + seekBar.getProgress());
            }

            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
            }
        });
    }

    /**
     * Set gradient details for seek bar view
     *
     * @param itemColor : color of gradient
     */
    private GradientDrawable getSeekBarGradient(int itemColor) {
        GradientDrawable gradient = new GradientDrawable(GradientDrawable.Orientation.BOTTOM_TOP, new int[]{itemColor, itemColor});
        gradient.setShape(GradientDrawable.OVAL);
        gradient.setSize(getResources().getInteger(R.integer.seekbar_thumb_size), getResources().getInteger(R.integer.seekbar_thumb_size));
        gradient.setStroke(4, itemColor);
        return gradient;
    }

    /**
     * get seekbar width according to screen size
     */
    private int getSeekBarWidth() {
        DisplayMetrics displaymetrics = new DisplayMetrics();
        this.getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);
        return (int) (displaymetrics.widthPixels / 1.55);
    }

    /**
     * change seekbar width according to screen orientation
     */
    private void changeWidthOfSeekBarOnConfigurationChanged() {
        if (isMobile) {
            if (null != seekBar && (null != bottomActionbar)) {
                ViewGroup parent = (ViewGroup) seekBar.getParent();
                if (parent != null) {
                    parent.removeView(seekBar);
                    setCustomViewActionbar(seekBar, R.id.action_seekbar, "", mTopActionBarItemColor, Gravity.CENTER_HORIZONTAL, 0);
                    bottomActionbar.build();
                }
            }
        }
    }

    /**
     * Customize the top actionbar
     */
    private void setTopActionbarItem() {
        if (mReaderType == EBookType.FIXEDKITABOO) {
            audioBookType = getAudioBookType(com.hurix.reader.kitaboosdkrenderer.utils.Utils.getBookFolderPathCompat(bookId
                    + "", isbn) + Constants.EBOOK_PATH);
        }
        topActionbar = findViewById(R.id.topActionbarid);
        topActionbar.setVisibility(View.VISIBLE);
        //if (isMobile) {
        KitabooActionItemView item1 = new KitabooActionItemView(this);
        setTopActionbar(item1, R.id.action_home, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mTopActionBarItemColor, Gravity.LEFT, 0, 22);
        mTextChapterTitle = new TextView(PlayerActivity.this);
        setCustomViewActionbar(mTextChapterTitle, R.id.action_chapter_title, "", mTopActionBarItemColor, Gravity.CENTER_HORIZONTAL, 0);

        if (audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_) /*|| audioBookType.equalsIgnoreCase("Other")*/) {
            mReadAloudIcon = new KitabooActionItemView(this);
            setTopActionbar(mReadAloudIcon, R.id.read_aloud, "RA", CustomPlayerUIConstants.READ_AUDIO, mPentoolToolbarItemColor, Gravity.CENTER_HORIZONTAL, 0, 22);
        }
        // if (!getResources().getBoolean(R.bool.is_nanoq_greenland)) {
        mProfileImage = new ImageView(PlayerActivity.this);
        if (getResources().getBoolean(R.bool.is_Mills_and_Boon)) {
            mProfileImage.setVisibility(View.GONE);
        }

        mClearAllImage = new KitabooActionItemView(PlayerActivity.this);
        setCustomViewActionbar(mProfileImage, R.id.action_profile_image, "", mTopActionBarItemColor, Gravity.RIGHT, 10);
        // setTopActionbar(mClearAllImage, R.id.action_fib_dropdown_clearall, "A", CustomPlayerUIConstants.TOP_ACTION_HOME_TEXT, mTopActionBarItemColor, Gravity.RIGHT, 10, 22);
        if (mReaderType == EBookType.REFLOWEPUB && reflowPrintEnable != null && reflowPrintEnable.equalsIgnoreCase("true")) {
            KitabooActionItemView print = new KitabooActionItemView(this);
            setTopActionbar(print, R.id.action_print_page, "A", CustomPlayerUIConstants.PP_IC_TEXT, mTopActionBarItemColor, Gravity.RIGHT, 25, 22);
        }
        getBitmap();
        drawImage();

       /* if (DatabaseManager.getInstance(this).checkForActivitySubmitData(userID, IsClassAccociated, GlobalDataManager.getInstance().getLocalBookData().getBookID(), false)) {
            mClearAllImage.setVisibility(VISIBLE);
        } else {
            mClearAllImage.setVisibility(View.GONE);
        }*/
        // }
        topActionbar.setBackgroundColor(mTopActionbarBackGroundColor);
        // topActionbar.setBackground(getResources().getDrawable(R.drawable.top_actionbar_background));
        /*topActionbar.setBackgroundDrawable(Utility.Utils.getRectAngleDrawable(mTopActionbarBackGroundColor,
                new float[]{2, 2, 2, 2, 2, 2, 2, 2}, 1, Color.parseColor(themeUserSettingVo.getmKitabooMainColor())));*/
        topActionbar.build();
    }

    /**
     * Customise the top actionbar item with different icon , color
     *
     * @param item      : Actionbar item view
     * @param itemColor : color of Actionbar item view
     */

    private void chnagePenColor(KitabooActionItemView item, int itemColor) {
        item.setTextColor(itemColor);
    }

    private void setTopActionbar(KitabooActionItemView item, int itemId, String itemName, String charManningChar, int itemColor, int itemGravity, int leftMargin, int textSize) {
        item.setId(itemId, item);
        item.setUniqueName(itemName);
        item.setCharatorManningChar(charManningChar);
        item.setTextColor(itemColor);
        item.setGravity(Gravity.CENTER);
        if (topActionbar != null)
            item.setTypeface(itemId == R.id.teacher_review_done || itemId == R.id.teacher_review_page || itemId == R.id.teacher_review_firstname || itemId == R.id.read_speed || itemId == R.id.action_page_zoom_percentage ? null : topActionbar.defaultActionbarTypeface(this));
        item.setAllCaps(false);
        item.setTextSize(textSize);
        item.setLeftMargin(leftMargin);

        if (isMobile) {
            if (itemId == R.id.read_speed)
                item.setMinimumWidth(150);
            else
                item.setMinimumWidth(getResources().getInteger(R.integer.actionbar_menu_width_mobile));
        } else {
            if (item.getId() == R.id.teacher_review_page && this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                item.setMinimumWidth(200);

            } else {
                if (itemId == R.id.read_speed)
                    item.setMinimumWidth(150);
                else if (itemId == R.id.teacher_review_done)
                    item.setMinimumWidth(150);
                else
                    item.setMinimumWidth(100);
            }
        }
        //topActionbar.setBackgroundColor(getResources().getColor(R.color.white));
        topActionbar.addActionItem(item, itemGravity);
        topActionbar.addEventCallback(this);

    }

    private void setBottomReadAloudActionbar(KitabooActionItemView item, int itemId, String itemName, String charManningChar, int itemColor, int itemGravity, int leftMargin, int textSize) {


        item.setId(itemId, item);
        item.setUniqueName(itemName);
        if (itemId == R.id.read_speed && _speedType != null) {
            item.setCharatorManningChar(_speedType.toString());
        } else {
            item.setCharatorManningChar(charManningChar);
        }
        item.setTextColor(itemColor);
        item.setGravity(Gravity.CENTER);
        if (topActionbar != null)
            item.setTypeface(itemId == R.id.teacher_review_done || itemId == R.id.teacher_review_page || itemId == R.id.teacher_review_firstname || itemId == R.id.read_speed || itemId == R.id.action_page_zoom_percentage ? null : topActionbar.defaultActionbarTypeface(this));
        item.setAllCaps(false);
        item.setTextSize(textSize);
        item.setLeftMargin(leftMargin);

        if (isMobile) {
            if (itemId == R.id.read_speed)
                item.setMinimumWidth(100);
            else
                item.setMinimumWidth(getResources().getInteger(R.integer.actionbar_menu_width_mobile));
        } else {
            if (item.getId() == R.id.teacher_review_page && this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                item.setMinimumWidth(200);

            } else {
                if (itemId == R.id.read_speed)
                    item.setMinimumWidth(60);
                else if (itemId == R.id.teacher_review_done)
                    item.setMinimumWidth(150);
                else
                    item.setMinimumWidth(100);
            }
        }
        //topActionbar.setBackgroundColor(getResources().getColor(R.color.white));
        bottomActionbar.addActionItem(item, itemGravity);
        bottomActionbar.addEventCallback(this);

    }

    /**
     * Click event of each button in actionbar
     *
     * @param menu : clicked item view
     */
    @Override
    public void onMenuItemClick(View menu) {

        if (SDKManager.getInstance().isPageScrollFeatureOn()) {
            ll_page_scroll_seekbar.setVisibility(View.GONE);
            hideProgressSeekBar();
        }
        if (menu.getId() == R.id.action_print_page) {
            renderView.printCurrentChapter(null, waterMarkText);
        } else if (menu.getId() == R.id.text_protractor) {

           /* Bundle bundle = new Bundle();
            bundle.putString(FirebaseConstants.PROTRACTOR_ICON, "NA");

            FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.PROTRACTOR_ICON_CLICK);*/


            hideActionBar();
            hideBottomBar();
            renderView.isProtractorActive(true);
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                DialogUtils.showOKAlert(null, 1, this, getResources()
                        .getString(R.string.alert_title), getResources()
                        .getString(R.string.protractor_not_supported), new OnDialogOkActionListner() {
                    @Override
                    public void onOKClick(View v) {
                        renderView.isProtractorActive(false);
                        showActionBar();
                        showBottomBar();
                    }
                });
            } else {
                renderView.openProtractor();
            }

        } else if (menu.getId() == R.id.action_search_back_btn) {
            mLastSearchedtext = "";
            mSearchQuery = "";
            Utils.hideKeyboard(this);
            mSearchview = null;
            if (mDialog != null) {
                mDialog.dismiss();
            }
            replaceCustomBarwithActionBar();
        } else if (menu.getId() == R.id.action_toc) {

            Bundle bundle = new Bundle();
           /* bundle.putString(FirebaseConstants.TOC_BUTTON_NA, "NA");

            FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.TOC_BUTTON_CLICK);*/
            hideThumbanilPanel();
            showTableOfContent(menu);
            showActionBar();
        } else if (menu.getId() == R.id.action_home) {
            onBackPressed();

        } else if (menu.getId() == R.id.action_search) {

            //    Bundle bundle= new Bundle();
            //   bundle.putString(FirebaseConstants.SEARCH_BUTTON,mSearchview.getSearchEditText().getText().toString());

            //   FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.SEARCH_BUTTON_CLICK,bundle);

            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.SEARCH);
            if (mReaderType == EBookType.FIXEDKITABOO) {
                renderView.isElasticSearchActive(true);
                SDKManager.getInstance().setElasticSearchActive(true);
            }
            customSearchPanel(false);
            hideThumbanilPanel();
            if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                hideDialog();
            }
            openSearchDialog();
            hideBottomBar();
            //hideActionBar();
            mIsSearchOpen = true;

            if (!getPackageManager().hasSystemFeature("org.chromium.arc.device_management")) {
                keyboardHeightProvider.start();
            }

        } else if (menu.getId() == R.id.action_my_data) {
            hideThumbanilPanel();
            showMydataView(menu);


        } else if (menu.getId() == R.id.action_profile_image) {
            //  if (utils.Utils.isMobile(PlayerActivity.this)) {
            profilesetting();
            //  } /*else {
            //    showProfileSettingPopup(menu);
            //    }


        } /*else if (menu.getId() == R.id.action_fib_dropdown_clearall) {

            if (Utility.isOnline(this)) {
                if (accountType.equalsIgnoreCase(Constants.TEACHER)) {
                    if (mTeacherHolder != null)
                        mTeacherHolder.TeacherReviewDone(true);
                } else {
                    clearAllFIDDropDown();
                }
                hideBottomBar();
            } else {
                showOkAlert(getResources().getString(R.string.no_internet_try_again));
            }




        }*/ else if (menu.getId() == R.id.action_pen) {

            //  FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.PEN_TOOL_CLICK);

            isPentoolBarOpen = true;
            //hide the dialog if it opens
            if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                hideDialog();
            }

            //if thumbnail open hide thumbnail and disable the button
            // as we shouldnot swipe the page in penmode
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (isThumbnailVisible) {
                    hideThumbanilPanel();
                }
            }

            replaceActionBarwithPenBar(true);
            showActionBar();
            hideBottomBar();

            //For saving pen-color data in database with/without '#'
            // boolean colorWithHash = true/false
            //False for Porto
            colorWithHash = true;

            renderView.isPenMarkerActive(true);
            if (mAudioManager != null) {
                if (mAudioManager != null)
                    mAudioManager.close();
                audioIsPause = true;
                SDKManager.getInstance().setReadAloudPlaying(false);
            }

            // Toast.makeText(PlayerActivity.this, "This feature is under development", Toast.LENGTH_LONG).show();
        } else if (menu.getId() == R.id.action_sticky_note) {


            if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                hideDialog();
            }

            Bundle bundle = new Bundle();
           /* bundle.putString(FirebaseConstants.STICKY_NOTE, "NA");
            FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.STICKY_NOTE_CLICK, bundle);
*/
            hideThumbanilPanel();
            openStickynoteOverlay();

        } else if (menu.getId() == R.id.action_pentool_color) {

            Bundle bundle = new Bundle();
            /*bundle.putString(FirebaseConstants.PEN_TOOL, "NA");

            //    FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.PEN_TOOL_CLICK,bundle);
            FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.PEN_TOOL_CLICK);*/


            if (!isPentoolColorStateCliced) {
                int[] color;
                isPentoolColorStateCliced = true;
                if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                    hideDialog();
                }
                if (readerThemeSettingVo == null) {
                    color = new int[5];
                    String[] penColors = new String[]{"#000000", "#ad1e20", "#8100d6", "#106605", "#0859a1"};
                    for (int i = 0; i < penColors.length; i++) {
                        color[i] = Color.parseColor(penColors[i]);
                    }
                } else {
                    String[] penColors = readerThemeSettingVo.getReader().getDayMode().getPentool().getPenColor().toArray(new String[0]);
                    color = new int[penColors.length];
                    for (int i = 0; i < penColors.length; i++) {
                        color[i] = Color.parseColor(penColors[i]);
                    }
                }

                int numberOfColumn = 5;
                FragmentManager fm = getSupportFragmentManager();
                openColorPopup(mColorPopupButton, fm, PlayerActivity.this, color, color.length);
                mColorPopupButton.getParnet().setBackgroundColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconBackground())));
                mColorPopupButton.getColorPopupText().setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconColor())));

            } else {
                isPentoolColorStateCliced = false;
                mPentoolColor.setBackgroundColor(getResources().getColor(R.color.transparent));
                mPentoolColor.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor())));
            }


        } else if (menu.getId() == R.id.color_picker) {

            hideDialog();

            if (!isColorPickerClicked) {

                if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                    hideDialog();
                }
                addAsColorItem(menu);

            } else {
                isColorPickerClicked = false;
                if (mColorPickerView != null) {
                    mColorPickerView.getmParent().setBackgroundColor(getResources().getColor(R.color.transparent));
                    mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTextColor(mPentoolToolbarItemColor);
                }
            }


        } else if (menu.getId() == R.id.action_pentool_size) {
            if (!isPentoolSizeCliced) {
                isPentoolSizeCliced = true;
                FragmentManager fm = getSupportFragmentManager();
                penHelper.openSizePopupSeparatorLineVisibility(View.GONE);
                penHelper.openSizePopupImagePenSizeVisibility(View.GONE);
                penHelper.openSizePopupSeekbarDrawable(getResources().getDrawable(R.drawable.progress_seek));
                penHelper.openSizePopup(menu, fm, PlayerActivity.this);
                penHelper.setOpenSizePopupBackgroundColor(readerThemeSettingVo.getReader().getDayMode().getPentool().getThickness().getPopupBorder());

                mPentoolSize.setBackgroundColor(Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconBackground()));
                mPentoolSize.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconColor())));

                penHelper.getSizePopup().getSeekbar().setThumb(getSeekBarGradient(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getPentool().getThickness().getSliderColor())));
                //penHelper.getSizePopup().getSeekbar().getProgressDrawable().setColorFilter(Color.parseColor((readerThemeSettingVo.getReader().getDayMode().getPentool().getThickness().getSliderFilledColor())), PorterDuff.Mode.SRC_ATOP);

            } else {
                isPentoolSizeCliced = false;
                mPentoolSize.setBackgroundColor(getResources().getColor(R.color.transparent));
                mPentoolSize.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor())));
            }

        } else if (menu.getId() == R.id.action_pentool_eraser) {
            if (mPentoolEraserClicked) {
                mPentoolEraserClicked = false;
                toggleActionItem(mPentoolColor, true);
                toggleActionItem(mPentoolSize, true);
                mPentoolEraser.setBackgroundColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconBackground())));
                mPentoolEraser.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconColor())));
                penHelper.setEraserMode(true, userID, currentFoliId, bookId);
            } else {
                mPentoolEraserClicked = true;
                toggleActionItem(mPentoolColor, false);
                toggleActionItem(mPentoolSize, false);
                mPentoolEraser.setBackgroundColor(getResources().getColor(R.color.transparent));
                mPentoolEraser.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor())));
                penHelper.setEraserMode(false, userID, currentFoliId, bookId);
            }
        } else if (menu.getId() == R.id.action_pentool_done) {

            mPentoolEraserClicked = true;
            renderView.isPenMarkerActive(false);
            replaceCustomBarwithActionBar();
            hideActionBar();
            penHelper.setEraserMode(false, userID, currentFoliId, bookId);
            if (penHelper.isAnyPenToolSelected()) {
                penHelper.clearSelectedPenTool();
            }

            penHelper.clearDeletedPenMarkerVO();
            if (mReaderType == EBookType.REFLOWEPUB) {
                if (pageVo != null)
                    mTextChapterTitle.setText(pageVo.getChaptertittle().trim());
            } else if (mReaderType == EBookType.FIXEDEPUB) {
                if (mCurrentPageData != null)
                    mTextChapterTitle.setText(mCurrentPageData.getChaptertittle().trim());
                else if (pageVo != null)
                    mTextChapterTitle.setText(pageVo.getChaptertittle().trim());
            } else if (mCurrentPageData != null)
                mTextChapterTitle.setText(mCurrentPageData.getChapterName().trim());

            DatabaseManager.getInstance(this).updatePenmarks(userID, currentFoliId, bookId);
            drawImage();
            isPentoolBarOpen = false;
        } else if (menu.getId() == R.id.action_pentool_undo) {
            penHelper.undoDrawedPenMark(userID, bookId, colorWithHash);
            // penHelper.setEraserMode(false);
        } else if (menu.getId() == R.id.action_thumbnail) {


            if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                hideDialog();
            }
            if (mReaderType == EBookType.FIXEDKITABOO) {
                if (isThumbnailVisible) {
                    hideThumbanilPanel();
                } else {
                    showThumbnail();
                }
                hideBottomBar();
                hideActionBar();
                //bottomActionbar.setVisibility(View.GONE);
                // showActionBar();
            } else if (mReaderType == EBookType.FIXEDEPUB) {
                if (isThumbnailVisible) {
                    hideThumbanilPanel();
                } else {
                    SDKManager.getInstance().setIspageHistoryRequired(true);
                    if (mThumbListColl == null)
                        mThumbListColl = SDKManager.getInstance().getThumnailPage();
                    showEpubThumbnail();

                    if (mThumbMapColl == null)
                        mThumbMapColl = new HashMap<>();

                    if (mThumbListColl != null && mThumbListColl.size() > 0) {
                        for (ThumbListVO thumbListVO : mThumbListColl) {

                            /*
                             * if condition added for roman and other text search
                             * */
                            if (!thumbListVO.getText().equalsIgnoreCase(thumbListVO.getValue())) {
                                mThumbMapColl.put(thumbListVO.getValue().trim().toLowerCase(), thumbListVO.getSrc());
                            }
                            mThumbMapColl.put(thumbListVO.getText().trim().toLowerCase(), thumbListVO.getSrc());

                        }
                    }
                }
                hideBottomBar();
                hideActionBar();
            }
        } else if (menu.getId() == R.id.action_pagetextview) {

        } else if (menu.getId() == R.id.action_font_settings) {
            /*if (!isEpubSettingPanelClicked) {
                isEpubSettingPanelClicked = true;
                epubSettingPanelAction = new EpubSettingPanelAction(PlayerActivity.this);
                epubSettingPanelAction.setListener(this);
                epubSettingPanelAction.setData(menu, themeUserSettingVo);
                mEpubSettingPanel.setBackgroundColor((Color.parseColor(themeUserSettingVo.getmKitabooMainColor())));
                mEpubSettingPanel.setTextColor(getResources().getColor(R.color.default_action_bar_color));
            } else {
                isEpubSettingPanelClicked = false;
                mEpubSettingPanel.setBackgroundColor(getResources().getColor(R.color.transparent));
                mEpubSettingPanel.setTextColor((Color.parseColor(themeUserSettingVo.getmKitabooMainColor())));
                epubSettingPanelAction.dismissSettingPanel();
            }*/

            bottomSettingPanel = new CustomBottomSettingDialogPanel();
            bottomSettingPanel.setConfiguration(isMobile);
            bottomSettingPanel.setThemeColor(themeUserSettingVo, readerThemeSettingVo);
            bottomSettingPanel.setviewlistner(this);
            bottomSettingPanel.show(getSupportFragmentManager(), bottomSettingPanel.getTag());


        } else if (menu.getId() == R.id.topbar_review) {
            if (Utility.isOnline(this)) {
                if (accountType.equalsIgnoreCase(Constants.TEACHER)) {
                    openTeacherReview();
                } else {
                    openSyncDialog();
                }
                hideBottomBar();
            } else {
                showOkAlert(getResources().getString(R.string.no_internet_try_again));
            }

        } else if (menu.getId() == R.id.teacher_review_previous) {

            drawable.setShape(GradientDrawable.OVAL);
            drawable.setStroke(2, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().
                    getPentool().getToolbar().getSelectedIconBackground()));
            //drawable.setSize(2,2);
            mTeacherReviewRed.setBackgroundDrawable(drawable);
            mTeacherReviewGreen.setBackgroundDrawable(null);
            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_ENABLE);
            GlobalDataManager.getInstance().setPenColor(com.hurix.commons.Constants.Constants.PENTOOL_ASSESSMENTS_COLOR_RED);

            if (mTeacherHolder != null)
                mTeacherHolder.TeacherReviewPreviouse();

            if (penHelper != null)
                penHelper.clearDeletedPenMarkerVO();
        } else if (menu.getId() == R.id.teacher_review_next) {

            drawable.setShape(GradientDrawable.OVAL);
            drawable.setStroke(2, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().
                    getPentool().getToolbar().getSelectedIconBackground()));
            //drawable.setSize(2,2);
            mTeacherReviewRed.setBackgroundDrawable(drawable);
            mTeacherReviewGreen.setBackgroundDrawable(null);
            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_ENABLE);
            GlobalDataManager.getInstance().setPenColor(com.hurix.commons.Constants.Constants.PENTOOL_ASSESSMENTS_COLOR_RED);

            if (mTeacherHolder != null)
                mTeacherHolder.TeacherReviewNext();

            if (penHelper != null)
                penHelper.clearDeletedPenMarkerVO();
        } else if (menu.getId() == R.id.teacher_review_eraser) {

            mTeacherReviewGreen.setBackgroundDrawable(null);
            mTeacherReviewRed.setBackgroundDrawable(null);

            if (mTeacherRviewEraserClicked) {
                if (mTeacherHolder != null)
                    mTeacherHolder.TeacherReviewEraser();

                mTeacherRviewEraserClicked = false;
                GlobalDataManager.getInstance().setPenDeleteMode(true);
                mTeacherEraser.setBackgroundColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconBackground())));
                mTeacherEraser.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getSelectedIconColor())));

                if (mCurrentAnnotationpage != null && mCurrentAnnotationpage.getFolioID() != null)
                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_ENABLE);
            } else {
                mTeacherRviewEraserClicked = true;
                GlobalDataManager.getInstance().setPenDeleteMode(false);
                mTeacherEraser.setBackgroundColor(getResources().getColor(R.color.transparent));
                mTeacherEraser.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor())));

                if (mCurrentAnnotationpage != null && mCurrentAnnotationpage.getFolioID() != null)
                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_DISABLE);
            }
        } else if (menu.getId() == R.id.teacher_review_red) {
            if (mTeacherReviewRed.getBackground() == null) {
                GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_ENABLE);
                GlobalDataManager.getInstance().setPenColor(com.hurix.commons.Constants.Constants.PENTOOL_ASSESSMENTS_COLOR_RED);
                mTeacherRviewEraserClicked = true;
                GlobalDataManager.getInstance().setPenDeleteMode(false);
                mTeacherEraser.setBackgroundColor(getResources().getColor(R.color.transparent));
                mTeacherEraser.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor())));
                mTeacherReviewRed.setPadding(2, 2, 2, 2);
                drawable.setShape(GradientDrawable.OVAL);
                drawable.setStroke(2, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().
                        getPentool().getToolbar().getSelectedIconBackground()));
                //drawable.setSize(2,2);
                mTeacherReviewRed.setBackgroundDrawable(drawable);
                mTeacherReviewGreen.setBackgroundDrawable(null);
                if (mTeacherHolder != null)
                    mTeacherHolder.clickOnRed();
            } else {
                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_DISABLE);
                mTeacherReviewRed.setBackgroundDrawable(null);
            }
        } else if (menu.getId() == R.id.teacher_review_green) {
            if (mTeacherReviewGreen.getBackground() == null) {
                GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_ENABLE);
                GlobalDataManager.getInstance().setPenColor(com.hurix.commons.Constants.Constants.PENTOOL_ASSESSMENTS_COLOR_GREEN);
                mTeacherRviewEraserClicked = true;
                GlobalDataManager.getInstance().setPenDeleteMode(false);
                mTeacherEraser.setBackgroundColor(getResources().getColor(R.color.transparent));
                mTeacherEraser.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor())));
                mTeacherReviewGreen.setPadding(2, 2, 2, 2);
                drawable.setShape(GradientDrawable.OVAL);
                drawable.setStroke(2, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().
                        getPentool().getToolbar().getSelectedIconBackground()));
                //drawable.setSize(2,2);
                mTeacherReviewGreen.setBackgroundDrawable(drawable);
                mTeacherReviewRed.setBackgroundDrawable(null);
                if (mTeacherHolder != null)
                    mTeacherHolder.clickOnGreen();
            } else {
                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.PEN_DISABLE);
                mTeacherReviewGreen.setBackgroundDrawable(null);
            }
        } else if (menu.getId() == R.id.teacher_review_done) {

            //  FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.TEACHER_REVIEW_CLICK);

            if (Utils.isOnline(this)) {
                if (mTeacherHolder != null)
                    mTeacherHolder.TeacherReviewDone(false);

                if (penHelper != null)
                    penHelper.clearDeletedPenMarkerVO();

                int currentPageId = GlobalDataManager.getInstance().getLocalBookData().getCurrentTeacherAssesment();
                ArrayList<PentoolVO> pentool = GlobalDataManager.getInstance().getNewlyAddedPenMarkersList(currentPageId);
                GlobalDataManager.getInstance().getTeacherReviewNewlyAddedPentoolVos().clear();
                if (pentool != null && pentool.size() > 0)
                    pentool.clear();


                SDKManager.getInstance().setNewTeacherReviewModeOn(false);
                replaceCustomBarwithActionBar();
            } else {

                String title = getResources().getString(R.string.alert_title);
                String msg = getResources().getString(R.string.alert_msg_teacher_review_popup);

                com.hurix.reader.kitaboosdkrenderer.dialogs.DialogUtils.showCancelDeleteAlert(this, this, title, msg,
                        getResources().getString(R.string.popup_txt_retry),
                        getResources().getString(R.string.delete_popup_cancel), new OnDialogYesNoActionListner() {
                            @Override
                            public void onPostiveClick(Object obj) {

                                mTeacherReviewDone.callOnClick();

                            }

                            @Override
                            public void onNegativeClick(Object obj) {
                                String s = "";
                            }
                        });

            }

        } else if (menu.getId() == R.id.teacher_review_undo) {
            /*mTeacherReviewGreen.setBackgroundDrawable(null);
            mTeacherReviewRed.setBackgroundDrawable(null);*/
            penHelper.undoTeacherReviewDrawedPenMark(userID, bookId, colorWithHash);
        } else if (menu.getId() == R.id.teacher_review_clear_all) {
            if (mTeacherClearAll != null && SDKManager.getInstance().isReviewMode()) {
                mTeacherReviewGreen.setBackgroundDrawable(null);
                mTeacherReviewRed.setBackgroundDrawable(null);

                if (mTeacherRviewClearAllClicked) {
                    mTeacherRviewClearAllClicked = false;
                    if (mTeacherClearAll != null && SDKManager.getInstance().isReviewMode()) {
                        mTeacherClearAll.setBackgroundColor((Color.parseColor(readerThemeSettingVo.getReader().
                                getDayMode().getPentool().getToolbar().getSelectedIconBackground())));
                        mTeacherClearAll.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                                getDayMode().getPentool().getToolbar().getSelectedIconColor())));
                    }
                    DialogUtils.showYesNoAlert(new View(this), this, getResources().getString(R.string.clearAll_title),
                            getResources().getString(R.string.clearAll_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {

                                @Override
                                public void onPostiveClick(Object o) {
                                /*if (!isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE)
                                    clearAllPenFromPage(currentFoliIdPrev);
                                else
                                    clearAllPenFromPage(currentFoliId);*/
                                    penHelper.setEraserMode(true, userID, currentFoliId, bookId);
                                    if (mTeacherClearAll != null && SDKManager.getInstance().isReviewMode()) {
                                        if (!isMobile && PlayerActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                                            if (mTeacherHolder != null && SDKManager.getInstance().getActiveLandscapePages() != null && SDKManager.getInstance().getActiveLandscapePages().size() > 0)
                                                //mTeacherHolder.clearFIBdata(true,SDKManager.getInstance().getActiveLandscapePages().get(0));
                                                // mTeacherHolder.clearPendata(SDKManager.getInstance().getActiveLandscapePages().get(0));
                                                if (clearAllReviewLinkData(SDKManager.getInstance().getActiveLandscapePages().get(0)))
                                                    clearAllReviewPenData(SDKManager.getInstance().getActiveLandscapePages().get(0));
                                            if (SDKManager.getInstance().getActiveLandscapePages() != null && SDKManager.getInstance().getActiveLandscapePages().size() > 1) {
                                                new Handler().postDelayed(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        if (mTeacherHolder != null)
                                                        /*mTeacherHolder.clearFIBdata(true,SDKManager.getInstance().getActiveLandscapePages().get(1));
                                                        mTeacherHolder.clearPendata(SDKManager.getInstance().getActiveLandscapePages().get(1));
                                                        refreshPageAfterclearAllReviewFromPage(SDKManager.getInstance().getActiveLandscapePages().get(1));*/

                                                            if (clearAllReviewLinkData(SDKManager.getInstance().getActiveLandscapePages().get(1)))
                                                                clearAllReviewPenData(SDKManager.getInstance().getActiveLandscapePages().get(1));
                                                    }
                                                }, 1000);
                                            }

                                        } else {
                                        /*if (mTeacherHolder != null)
                                            mTeacherHolder.clearFIBdata(true,currentFoliId);

                                        refreshPageAfterclearAllReviewFromPage(currentFoliId);*/

                                            if (clearAllReviewLinkData(currentFoliId))
                                                clearAllReviewPenData(currentFoliId);
                                        }
                                        mTeacherClearAll.setBackgroundColor(getResources().getColor(R.color.transparent));
                                        mTeacherClearAll.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                                                getDayMode().getPentool().getToolbar().getIconsColor())));
                                    }
                                }

                                @Override
                                public void onNegativeClick(Object o) {
                                    if (mTeacherClearAll != null && SDKManager.getInstance().isReviewMode()) {
                                        mTeacherClearAll.setBackgroundColor(getResources().getColor(R.color.transparent));
                                        mTeacherClearAll.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                                                getDayMode().getPentool().getToolbar().getIconsColor())));
                                    }
                                }
                            });
                } else {
                    mTeacherRviewClearAllClicked = true;
                    if (mTeacherClearAll != null) {
                        mTeacherClearAll.setBackgroundColor(getResources().getColor(R.color.transparent));
                        mTeacherClearAll.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                                getDayMode().getPentool().getToolbar().getIconsColor())));
                    }
                }
            } else {
                if (!isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    if (DatabaseManager.getInstance(this).checkForFIBDropDownData(userID, bookId, currentFoliId, accountType.equals(Constants.TEACHER)) || DatabaseManager.getInstance(this).checkForFIBDropDownData(userID, bookId, currentFoliIdPrev, accountType.equals(Constants.TEACHER))) {
                        DialogUtils.showYesNoAlert(new View(this), this, getResources().getString(R.string.clearAll_title),
                                getResources().getString(R.string.clearAll_Data_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {

                                    @Override
                                    public void onPostiveClick(Object o) {
                                        clearAllFIDDropDown();
                                    }

                                    @Override
                                    public void onNegativeClick(Object o) {

                                    }
                                });
                    } else {
                        DialogUtils.showOKAlert(new View(this), 0, this, getResources().getString(R.string.sync_title),
                                getResources().getString(R.string.check_message_nodata), this);

                    }
                } else {
                    if (DatabaseManager.getInstance(this).checkForFIBDropDownData(userID, bookId, currentFoliId, accountType.equals(Constants.TEACHER))) {
                        DialogUtils.showYesNoAlert(new View(this), this, getResources().getString(R.string.clearAll_title),
                                getResources().getString(R.string.clearAll_Data_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {

                                    @Override
                                    public void onPostiveClick(Object o) {
                                        clearAllFIDDropDown();
                                    }

                                    @Override
                                    public void onNegativeClick(Object o) {

                                    }
                                });
                    } else {
                        DialogUtils.showOKAlert(new View(this), 0, this, getResources().getString(R.string.sync_title),
                                getResources().getString(R.string.check_message_nodata), this);

                    }
                }


            }
        } else if (menu.getId() == R.id.teacher_review_firstname) {
            if (Utility.isOnline(this)) {
                if (accountType.equalsIgnoreCase(Constants.TEACHER)) {
                    openTeacherReview();
                } else {
                    openSyncDialog();
                }
                hideBottomBar();
            } else {
                showOkAlert(getResources().getString(R.string.no_internet_try_again));
            }

        } else if (menu.getId() == R.id.action_pentool_clear_all) {


            if (!isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                ArrayList<PentoolVO> penlistlistPrev = DatabaseManager.getInstance(this).clearAllPenMarkByPage(userID, currentFoliIdPrev, bookId);
                ArrayList<PentoolVO> penlistlist = DatabaseManager.getInstance(this).clearAllPenMarkByPage(userID, currentFoliIdPrev, bookId);

                if ((penlistlistPrev != null && penlistlist != null) && (penlistlistPrev.size() > 0 || penlistlist.size() > 0)) {
                    callPentoolClear();
                } else {
                    DialogUtils.showOKAlert(new View(this), 0, this, getResources().getString(R.string.sync_title),
                            getResources().getString(R.string.check_message_nodata), this);
                }


            } else {
                ArrayList<PentoolVO> penlistlist = DatabaseManager.getInstance(this).clearAllPenMarkByPage(userID, currentFoliIdPrev, bookId);

                if (penlistlist != null && penlistlist.size() > 0) {
                    callPentoolClear();
                } else {
                    DialogUtils.showOKAlert(new View(this), 0, this, getResources().getString(R.string.sync_title),
                            getResources().getString(R.string.check_message_nodata), this);
                }

            }

        } else if (menu.getId() == R.id.text_annotation) {
            mTextAnnotationParent.setVisibility(View.VISIBLE);
            renderView.isTextAnnotationActive(true);
            enableTextAnnotation();
            textAnnotationKeyboardHeightProvider.start();


        } else if (menu.getId() == R.id.action_annotation_done) {
            onTextAnnotationDoneClicked();

        } else if (menu.getId() == R.id.read_aloud) {

            if (GlobalDataManager.getInstance().getmAudioEndListner() != null && GlobalDataManager.getInstance().getmAudioEndListner().size() == 0) {
                GlobalDataManager.getInstance().addAudioSyncListeners(this);
            }

            // FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.READ_ALOUD_CLICK);
            menu.setEnabled(false);

            if (mReaderType == EBookType.FIXEDKITABOO && mAudioManager != null && !mAudioManager.getMediaPlayer().isPlaying()) {
                if (mReadAloudIcon.isEnabled()) mReadAloudIcon.setEnabled(false);
            } else {
                if (mReadAloudIcon.isEnabled()) mReadAloudIcon.setEnabled(false);
            }


            if (mReaderType == EBookType.REFLOWEPUB)
                setEpubPagecountVisibility(false);

            if (readAloudMarkups != null && readAloudMarkups.size() > 0) {
                if (audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_) || readAloudMarkups.get(0).getTooltip().equalsIgnoreCase("Read Aloud"))
                    showAudioPlayDialoge();
                else {
                    replaceActionBarwithReadAloudBar(true);

                    createAudioSyncList(currentFoliId);

                    autoPlayClicked(KitabooFixedBook.ReadAloudType.AUTOPLAY);

                    if (mReadPause != null) {
                        if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                            mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                            audioIsPause = false;
                        }
                    }

                }
                // replaceActionBarwithReadAloudBar(true);
            } else if (SDKManager.getInstance().isMediaOverlay() || mReaderType == EBookType.REFLOWEPUB && mAudioPageData != null && SDKManager.getInstance().isAllFileLoadedForAudioSync()) {

                if (onPauseCalled) onPauseCalled = false;

                if (SDKManager.getInstance().getCurrentPageVO() == null && mAudioPageData == null) {
                    menu.setEnabled(true);
                    if (!mReadAloudIcon.isEnabled()) mReadAloudIcon.setEnabled(true);
                    return;
                }

                playAudioSync("");
            }


        } else if (menu.getId() == R.id.read_previous) {


        } else if (menu.getId() == R.id.read_pause) {

            if (mReaderType == EBookType.REFLOWEPUB) {

                if (mAudioManager != null && mAudioManager.getMediaPlayer() != null && mAudioManager.getMediaPlayer().isPlaying()) {
                    if (mAudioManager != null)
                        mAudioManager.playAudio();
                    if (((TextView) menu).getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                        ((TextView) menu).setText(CustomPlayerUIConstants.READ_PAUSE);
                        audioIsPause = false;
                    } else {
                        ((TextView) menu).setText(CustomPlayerUIConstants.READ_PLAY);
                        audioIsPause = true;
                    }
                    SDKManager.getInstance().setmState(GlobalDataManager.PlayerState.NAVIGATION);

                } else {

                    if (SDKManager.getInstance().getCurrentPageVO() != null && !SDKManager.getInstance().getCurrentPageVO().getChaptertittle().equalsIgnoreCase(mAudioPageData.getChaptertittle())) {
                        mAudioPageData = SDKManager.getInstance().getCurrentPageVO();
                    }

                    if (!SDKManager.getInstance().getCurrentChapterPlaying().equalsIgnoreCase(mAudioPageData.getChaptertittle())) {
                        // if(SDKManager.getInstance().getCurrentChapterPlaying().equalsIgnoreCase(mAudioPageData.getChaptertittle())){
                        SDKManager.getInstance().setLastWordId("");
                        SDKManager.getInstance().setLastWordId("");
                        if (SDKManager.getInstance().getAudioVOS() != null) {
                            SDKManager.getInstance().getAudioVOS().clear();
                        }

                        playAudioSync(mAudioPageData.getChaptertittle());
                        // }
                    } else if (!onPauseCalled && mAudioManager != null) {
                        if (mAudioManager != null)
                            mAudioManager.playAudio();
                        if (((TextView) menu).getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                            ((TextView) menu).setText(CustomPlayerUIConstants.READ_PAUSE);
                            audioIsPause = false;
                        } else {
                            ((TextView) menu).setText(CustomPlayerUIConstants.READ_PLAY);
                            audioIsPause = true;
                        }
                        SDKManager.getInstance().setmState(GlobalDataManager.PlayerState.NAVIGATION);
                    } else if (onPauseCalled || mAudioManager == null) {
                        playAudioSync("");
                    }

                }


            } else {
                if (mAudioManager != null)
                    mAudioManager.playAudio();
                if (((TextView) menu).getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                    ((TextView) menu).setText(CustomPlayerUIConstants.READ_PAUSE);
                    audioIsPause = false;
                } else {
                    ((TextView) menu).setText(CustomPlayerUIConstants.READ_PLAY);
                    audioIsPause = true;
                }
                SDKManager.getInstance().setmState(GlobalDataManager.PlayerState.NAVIGATION);
            }

        } else if (menu.getId() == R.id.read_next) {


        } else if (menu.getId() == R.id.read_speed) {

            if (mReaderType == EBookType.FIXEDKITABOO && audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {

                FragmentManager fm = getSupportFragmentManager();
                readAloudHelper = new ReadAloudHelper(PlayerActivity.this, themeUserSettingVo);
                readAloudHelper.openSizePopupSeparatorLineVisibility(View.GONE);
                readAloudHelper.openSizePopupImagePenSizeVisibility(View.GONE);
                readAloudHelper.openSizePopupSeekbarDrawable(getResources().getDrawable(R.drawable.progress_seek));
                readAloudHelper.openSizePopup(menu, fm, PlayerActivity.this);
                readAloudHelper.setOpenSizePopupBackgroundColor(readerThemeSettingVo.getReader().getDayMode().getPentool().getThickness().getPopupBorder());
                // readAloudHelper.getSizePopup().getSeekbar().setThumb(getSeekBarGradient(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getPentool().getThickness().getSliderFilledColor())));
                readAloudHelper.getSizePopup().getSeekbar().setThumb(getSeekBarGradient(getResources().getColor(R.color.kitaboo_main_color)));
                //readAloudHelper.getSizePopup().getSeekbar().setTickMark(getResources().getDrawable(R.drawable.tickmark));
            }

        } else if (menu.getId() == R.id.speed_dec) {

            manageAudioSpeed(-0.25f);

        } else if (menu.getId() == R.id.speed_inc) {

            manageAudioSpeed(0.25f);

        } else if (menu.getId() == R.id.read_close) {
            if (mReaderType == EBookType.REFLOWEPUB)
                setEpubPagecountVisibility(true);
            closeReadAloud();
            GlobalDataManager.getInstance().closeAudioSync();
            currPageVo = pageVo;
            if (mReaderType == EBookType.REFLOWEPUB) {
                mTextChapterTitle.setText(currPageVo.getChaptertittle().trim());
                SDKManager.getInstance().setLastAudioSpeed(1.0f);
                SDKManager.getInstance().setLastWordId("");
                SDKManager.getInstance().setlastElement("");

                if (SDKManager.getInstance().getAudioVOS() != null) {
                    SDKManager.getInstance().getAudioVOS().clear();
                }

                if (null != mAudioManager) {
                    mAudioManager.close();
                    mAudioManager = null;
                }

            } else if (mReaderType == EBookType.FIXEDKITABOO) {
                mTextChapterTitle.setText(mCurrentPageData.getChapterName());
                clearAudioSyncData();
            } else {
                if (mTextChapterTitle != null && mCurrentPageData != null) {
                    mTextChapterTitle.setText(mCurrentPageData.getChaptertittle().trim());
                }
            }


        } else if (menu.getId() == R.id.action_page_zoom) {

            // FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.ZOOM_ICON_CLICK);

            if (mZoomText >= 100 && mZoomText <= 400) {
                renderView.zoomLevel(ZOOM_INC, 1);
                mZoomText = mZoomText + 100;
                mZoomPercentageText.setText(mZoomText + "%");
            }
        } else if (menu.getId() == R.id.action_page_zoom_out) {
            if (mZoomText > 100 && mZoomText <= 500) {
                renderView.zoomLevel(ZOOM_DEC, 1);
                mZoomText = mZoomText - 100;
                mZoomPercentageText.setText(mZoomText + "%");
            }
        } else if (menu.getId() == R.id.action_page_mode) {
            mPageModeIcon.setTypeface(customTypeFace);
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                if (SDKManager.getInstance().getPageMode() == 0) {
                    mPageModeIcon.setText(CustomPlayerUIConstants.ACTIONBAR_DOUBLE_PAGE_ICON);
                    SDKManager.getInstance().setPageMode(1);
                    renderView.pageMode(1);
                } else if (SDKManager.getInstance().getPageMode() == 2) {
                    mPageModeIcon.setText(CustomPlayerUIConstants.ACTIONBAR_DOUBLE_PAGE_ICON);
                    SDKManager.getInstance().setPageMode(1);
                    renderView.pageMode(1);
                } else {
                    mPageModeIcon.setText(CustomPlayerUIConstants.ACTIONBAR_SNGLE_PAGE_ICON);
                    SDKManager.getInstance().setPageMode(2);
                    renderView.pageMode(2);
                }
            }
        } else if (audioSyncColor(menu)) {
            if (!isMobile)
                deslectAsColor(menu);
            /*else {
                addAsColorItem(menu);
            }*/
        }


    }

    private void createAudioSyncList(String folioID) {

        if (!isMobile && (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand)) && mcurrentPageData[1] != null && mcurrentPageData[1].getFolioID().equalsIgnoreCase(folioID)) {
            currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[1]).getLinkCollection());
        } else if (mCurrentPageData != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection() != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection().size() > 0 && currASList != null)
            currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[0]).getLinkCollection());


        if (currASList != null && currASList.size() > 0 && currASList.get(0).getLinkID() > 0 && sentenceAudioMap.get((int) currASList.get(0).getLinkID()) != null)
            computeAudioSyncAsWordId(((ArrayList<AudioSyncWordInfo>) sentenceAudioMap.get((int) currASList.get(0).getLinkID())), currASList.get(0).getPageID());

    }


    private void deslectAsColor(View menu) {

        ArrayList<KitabooActionItemView> colList = new ArrayList();
        colList.add(mASYellowCol);
        colList.add(mASRedCol);
        colList.add(mASVioletCol);
        colList.add(mASGreenCol);
        colList.add(mASBlueCol);

        for (KitabooActionItemView kitabooActionItemView : colList) {
            if (menu != null && kitabooActionItemView != null) {
                if (menu.getId() != kitabooActionItemView.getId()) {
                    kitabooActionItemView.setText(CustomPlayerUIConstants.AS_UNSELECTED_COLOR);
                    kitabooActionItemView.setTextSize(18);
                }
            }
        }

    }

    private boolean audioSyncColor(View menu) {

        if (menu.getId() == R.id.yellow_col) {
            mASYellowCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
            mASYellowCol.setTextSize(25);
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));
            return true;
        } else if (menu.getId() == R.id.red_col) {
            mASRedCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
            mASRedCol.setTextSize(25);
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_red_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_pink_col));
            return true;
        } else if (menu.getId() == R.id.violet_col) {
            mASVioletCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
            mASVioletCol.setTextSize(25);
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_violet_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_purple_col));
            return true;
        } else if (menu.getId() == R.id.green_col) {
            mASGreenCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
            mASGreenCol.setTextSize(25);
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_green_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_green_col));
            return true;
        } else if (menu.getId() == R.id.blue_col) {
            mASBlueCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
            mASBlueCol.setTextSize(25);
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_blue_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_blue_col));
            return true;
        }

        return false;
    }


    private void setaudioSyncColor(String color) {

        unselectAsColor();

        if (color.equalsIgnoreCase(getResources().getString(R.string.as_yellow_col)) || color.equalsIgnoreCase(getResources().getString(R.string.as_menu_orange_col))) {
            if (mASYellowCol != null) {
                mASYellowCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                mASYellowCol.setTextSize(25);
            }
            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));
        } else if (color.equalsIgnoreCase(getResources().getString(R.string.as_red_col)) || color.equalsIgnoreCase(getResources().getString(R.string.as_menu_pink_col))) {

            if (mASRedCol != null) {
                mASRedCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                mASRedCol.setTextSize(25);
            }

            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_red_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_pink_col));
        } else if (color.equalsIgnoreCase(getResources().getString(R.string.as_violet_col)) || color.equalsIgnoreCase(getResources().getString(R.string.as_menu_purple_col))) {

            if (mASVioletCol != null) {
                mASVioletCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                mASVioletCol.setTextSize(25);
            }

            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_violet_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_purple_col));
        } else if (color.equalsIgnoreCase(getResources().getString(R.string.as_green_col)) || color.equalsIgnoreCase(getResources().getString(R.string.as_menu_green_col))) {

            if (mASGreenCol != null) {
                mASGreenCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                mASGreenCol.setTextSize(25);
            }

            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_green_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_green_col));
        } else if (color.equalsIgnoreCase(getResources().getString(R.string.as_blue_col)) || color.equalsIgnoreCase(getResources().getString(R.string.as_menu_blue_col))) {

            if (mASBlueCol != null) {
                mASBlueCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                mASBlueCol.setTextSize(25);
            }

            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_blue_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_blue_col));
        } else {

            if (mASYellowCol != null) {
                mASYellowCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                mASYellowCol.setTextSize(25);
            }

            GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
            GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));
        }

        if (isMobile) {
            setColorPickerItemColor(color);
        }


    }

    private void unselectAsColor() {

        ArrayList<KitabooActionItemView> colList = new ArrayList();
        colList.add(mASYellowCol);
        colList.add(mASRedCol);
        colList.add(mASVioletCol);
        colList.add(mASGreenCol);
        colList.add(mASBlueCol);

        for (KitabooActionItemView kitabooActionItemView : colList) {
            if (kitabooActionItemView != null) {
                kitabooActionItemView.setText(CustomPlayerUIConstants.AS_UNSELECTED_COLOR);
                kitabooActionItemView.setTextSize(18);
            }
        }

    }

    private void playAudioSync(String chapterTitle) {

        if (SDKManager.getInstance().getCurrentPageVO() != null && mAudioPageData != null && !SDKManager.getInstance().getCurrentPageVO().getChaptertittle().equalsIgnoreCase(mAudioPageData.getChaptertittle())) {
            mAudioPageData = SDKManager.getInstance().getCurrentPageVO();
        }


        if (SDKManager.getInstance().getMediaOverlayMap() != null && SDKManager.getInstance().getMediaOverlayMap().size() > 0) {
            String title = "";
            if (chapterTitle.isEmpty()) {
                if (mAudioPageData == null) {
                    return;
                }
                title = mAudioPageData.getChaptertittle();
            } else {
                title = chapterTitle;
            }

            SDKManager.getInstance().setCurrentChapterPlaying(title);

            BookVO.Manifest bookVo = SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(title));
            if (bookVo != null) {

                SDKManager.getInstance().setReadAloudPlaying(true);

                SDKManager.getInstance().setAudioSyncCount(0);

                replaceActionBarwithReadAloudBar(true);

                LinkVO linkAudioVO = new LinkVO();

                linkAudioVO.setUrl(bookVo.href);
                linkAudioVO.setmIsAudioSync(true);
                mlinkAudioVO = linkAudioVO;

                if (SDKManager.getInstance().getAudioVOS() != null && SDKManager.getInstance().getAudioVOS().size() == 0) {
                    String smilPath = SDKManager.getInstance().getBaseUrlReflowableEpub() + linkAudioVO.getUrl();

                    if (SDKManager.getInstance().getAllaudioSrcList() != null && SDKManager.getInstance().getAllaudioSrcList().size() > 0) {
                        SDKManager.getInstance().getAllaudioSrcList().clear();
                    }

                    if (SDKManager.getInstance().getAudioSyncSrcMap() != null && SDKManager.getInstance().getAllaudioSrcList().size() > 0) {
                        SDKManager.getInstance().getAudioSyncSrcMap().clear();
                    }

                    if (SDKManager.getInstance().getAudioSyncSrcList() != null && SDKManager.getInstance().getAudioSyncSrcList().size() > 0)
                        SDKManager.getInstance().getAudioSyncSrcList().clear();

                    AudioSyncDataAsynTask audioParser = new AudioSyncDataAsynTask(new IAudioParseCallBack() {
                        @Override
                        public void onTaskStarted() {
                            if (!isFinishing() && mProgressDialog != null) {
                                mProgressDialog.show();
                            }

                        }

                        @Override
                        public void onTaskError() {

                        }

                        @Override
                        public void onTaskCompleted() {
                            if (SDKManager.getInstance().getAudioVOS() != null && SDKManager.getInstance().getAudioVOS().size() > 0) {

                                SDKManager.getInstance().setLastAudioSrc(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getAudioSrc());
                                linkAudioVO.setUrl(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getAudioSrc());
                                linkAudioVO.setmIsAudioSync(true);

                                if (SDKManager.getInstance().getWordId().isEmpty()) {
                                    SDKManager.getInstance().setWordId(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getWordId());
                                }
                                        /*if(SDKManager.getInstance().getLastWordId().isEmpty()){
                                            SDKManager.getInstance().setLastWordId(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getWordId());

                                            if(SDKManager.getInstance().getWordId().isEmpty()){
                                                SDKManager.getInstance().setWordId(SDKManager.getInstance().getLastWordId());
                                            }

                                            //GlobalDataManager.getInstance().highlightAudioText();
                                        }*/

                                        /*if(!SDKManager.getInstance().getLastWordId().equalsIgnoreCase(SDKManager.getInstance().getWordId())){
                                            SDKManager.getInstance().setWordId(SDKManager.getInstance().getLastWordId());

                                        }*//*else if(SDKManager.getInstance().getWordId().isEmpty()){
                                            SDKManager.getInstance().setWordId(SDKManager.getInstance().getLastWordId());
                                        }*/

                                // GlobalDataManager.getInstance().highlightAudioText();
                                if (SDKManager.getInstance().getCurrentBookPageNumber() > 1) {

                                    if (mProgressDialog != null) {
                                        mProgressDialog.show();
                                    }

                                    new Handler().postDelayed(new Runnable() {
                                        @Override
                                        public void run() {
                                            if (mProgressDialog != null) {
                                                mProgressDialog.dismiss();
                                            }
                                        }
                                    }, 500);
                                    if (SDKManager.getInstance().isReadAloudPlaying())
                                        com.hurix.commons.notifier.GlobalDataManager.getInstance().highlightFirstAudioText();
                                } else {


                                    SDKManager.getInstance().setWordId(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getWordId());

                                    new Handler().postDelayed(new Runnable() {
                                        @Override
                                        public void run() {
                                            if (!onPauseCalled && SDKManager.getInstance().isReadAloudPlaying())
                                                processAudioSync(linkAudioVO, null, 0, false);
                                        }
                                    }, 1000);
                                }
                                if (!onPauseCalled) {

                                    if (mReadPause != null) {
                                        if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                                            mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                                            audioIsPause = false;
                                        }
                                    }
                                } else {
                                    if (mReadPause != null) {
                                        if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PAUSE)) {
                                            mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                                            audioIsPause = true;
                                        }
                                    }
                                }

                            }
                            if (mProgressDialog != null) {
                                mProgressDialog.dismiss();
                            }

                        }
                    });


                    audioParser.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, smilPath);

                } else if (SDKManager.getInstance().getAudioVOS() != null && SDKManager.getInstance().getAudioVOS().size() > 0) {


                    SDKManager.getInstance().setLastAudioSrc(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getAudioSrc());
                    linkAudioVO.setUrl(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getAudioSrc());
                    linkAudioVO.setmIsAudioSync(true);
                    mlinkAudioVO = linkAudioVO;

                    if (SDKManager.getInstance().getWordId().isEmpty()) {
                        SDKManager.getInstance().setWordId(SDKManager.getInstance().getAudioVOS().get(SDKManager.getInstance().getAudioSyncCount()).getWordId());
                    }


                    if (SDKManager.getInstance().getCurrentBookPageNumber() > 1) {

                        if (mProgressDialog != null) {
                            mProgressDialog.show();
                        }

                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                if (mProgressDialog != null) {
                                    mProgressDialog.dismiss();
                                }
                            }
                        }, 500);
                        if (SDKManager.getInstance().isReadAloudPlaying())
                            GlobalDataManager.getInstance().highlightFirstAudioText();
                    } else {
                        // GlobalDataManager.getInstance().highlightAudioText();
                        if (!onPauseCalled && SDKManager.getInstance().isReadAloudPlaying())
                            processAudioSync(linkAudioVO, null, 0, false);
                    }
                    if (!onPauseCalled) {

                        if (mReadPause != null) {
                            if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                                mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                                audioIsPause = false;
                            }
                        }
                    } else {
                        if (mReadPause != null) {
                            if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PAUSE)) {
                                mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                                audioIsPause = true;
                            }
                        }
                    }

                }
            } /*else {
                if (snackbar != null) {
                    snackbar.dismiss();
                }
                customSnackBar(mainview, getResources().getString(R.string.no_audio_sync), getResources().getString(R.string.dismiss_snackbar));
            }*/


        }
    }

    private void manageAudioSpeed(double speed) {


        if (mAudioManager != null) {

            if (mAudioManager.getMediaPlayer() != null && mAudioManager.getMediaPlayer().isPlaying()) {
                mAudioManager.setPlayerSpeed(speed);
            } else {

                if (mReadPause != null) {
                    if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                        mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                        audioIsPause = false;
                    }
                }

                mAudioManager.playAudio();
                mAudioManager.setPlayerSpeed(speed);
            }
        } else {
            playAudioSync("");
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (mAudioManager != null)
                        mAudioManager.setPlayerSpeed(speed);
                }
            }, 1000);
        }
    }


    private void doPrint(PrintPageIconView v) {
        PrintHelper photoPrinter = new PrintHelper(this);
        photoPrinter.setScaleMode(PrintHelper.SCALE_MODE_FILL);
        hideBottomBar();
        hideTopBar();
        int currentPageNum = getCurrPageIDByDisplayNum(v.getmFolioId());
        Bitmap currenBitmap = GlobalDataManager.getInstance().getBitmapList().get(currentPageNum);
        photoPrinter.printBitmap("jobTest", waterMark(currenBitmap, waterMarkText, new Point(0, 500),
                Color.parseColor("#668A96"), 70, 70, true));
    }


    public Bitmap waterMark(Bitmap src, String watermark, Point location, int color, int alpha, int size, boolean underline) {
        int w = src.getWidth();
        int h = src.getHeight();

        Resources resources = this.getResources();
        float scale = resources.getDisplayMetrics().density;

        Bitmap result = Bitmap.createBitmap(w, h, src.getConfig());
        Canvas canvas = new Canvas(result);
        canvas.drawBitmap(src, 0, 0, null);
        TextPaint paint = new TextPaint(Paint.ANTI_ALIAS_FLAG);
        paint.setColor(color);
        paint.setTextSize((int) (14 * scale));
        int textWidth = canvas.getWidth() - (int) (16 * scale);

        paint.setAntiAlias(true);
        paint.setTextAlign(Paint.Align.LEFT);
        StaticLayout textLayout = new StaticLayout(
                watermark, paint, textWidth, Layout.Alignment.ALIGN_NORMAL, 1.0f, 0.0f, false);

        int textHeight = textLayout.getHeight();
        float x = (src.getWidth() - textWidth) / 2;
        float y = (src.getHeight() - textHeight) / 2;
        canvas.save();
        canvas.rotate(-45, w / 2, y);
        canvas.translate(x, y);
        textLayout.draw(canvas);
        canvas.restore();
        return result;
    }


    public Bitmap screenShot(PrintPageIconView v) {
        View v1 = getWindow().getDecorView().getRootView();
        v1.setDrawingCacheEnabled(true);
        if (isMobile || (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)) {
            Bitmap bitmap = Bitmap.createBitmap(v1.getDrawingCache());
            v1.setDrawingCacheEnabled(false);
            v.setVisibility(View.VISIBLE);
            return bitmap;
        } else {
            Bitmap bitmap = Bitmap.createBitmap(v1.getDrawingCache());
            Bitmap bitmapS = Bitmap.createBitmap(bitmap, v.getLeftP(), 0, v.getWidthP(), Utils.getDeviceHeight(this));
            v1.setDrawingCacheEnabled(false);
            v.setVisibility(View.VISIBLE);
            return bitmapS;
        }
    }

    private void callPentoolClear() {

        DialogUtils.showYesNoAlert(new View(this), this, getResources().getString(R.string.clearAll_title),
                getResources().getString(R.string.clearAll_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {

                    @Override
                    public void onPostiveClick(Object o) {
                           /* if (!isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE)
                                clearAllPenFromPage(currentFoliIdPrev);
                            else
                                clearAllPenFromPage(currentFoliId);

                            penHelper.setEraserMode(true, userID, currentFoliId, bookId);*/
                        SDKManager.getInstance().setClearAllClicked(true);


                        if (!isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                            clearAllPenFromPage(currentFoliIdPrev);
                            clearAllPenFromPageNext(currentFoliId);
                        } else
                            clearAllPenFromPage(currentFoliId);

                        //penHelper.setEraserMode(true, userID, currentFoliId, bookId);

                    }

                    @Override
                    public void onNegativeClick(Object o) {

                    }
                });


    }

    private void closeReadAloud() {

        isColorPickerClicked = false;

        SDKManager.getInstance().setReadAloudPlaying(false);
        SDKManager.getInstance().setAudioSyncPlaying(false);

        if (mAudioManager != null)
            mAudioManager.close();

        if (mReaderType == EBookType.REFLOWEPUB) {
            if (bottomActionbar != null) {
                bottomActionbar.removeAllActionBarItem();
            }
            setUpBottomBar();
        } else {
            if (topActionbar != null) {
                topActionbar.removeAllActionBarItem();
            }
            setTopActionbarItem();

            if (bottomActionbar != null) {
                bottomActionbar.removeAllActionBarItem();
            }
            setUpBottomBar();
            clearAudioSyncData();
        }

        audioIsPause = true;
        readAloudType = null;

        if (mAudioManager != null) {
            mAudioManager = null;
        }

        if (mReadSpeed != null)
            mReadSpeed = null;

        if (_speedType != null)
            _speedType = null;


        if (mSpeedDec != null)
            mSpeedDec = null;

        if (mSpeedInc != null)
            mSpeedInc = null;

    }

    /**
     * @param isPreviewDisable
     * @param isNextDisable
     */
    @Override
    public void setNextAndPreviousDisable(boolean isPreviewDisable, boolean isNextDisable) {
        if (isPreviewDisable && mTeacherPrevious != null) {
            mTeacherPrevious.setClickable(false);
            mTeacherPrevious.setTextColor(Color.parseColor("#e6e6e6"));


        }
        if (isNextDisable && mTeacherNext != null) {
            mTeacherNext.setClickable(false);
            mTeacherNext.setTextColor(Color.parseColor("#e6e6e6"));

        }

    }

    private void clickOnGreen() {
        GlobalDataManager.getInstance().setPenColor(Constants.PENTOOL_ASSESSMENTS_COLOR_GREEN);
    }

    private void clickOnRed() {
        GlobalDataManager.getInstance().setPenColor(Constants.PENTOOL_ASSESSMENTS_COLOR_RED);
    }

    private void showProfileSettingPopup(View v) {
        DisplayMetrics metrics = getResources().getDisplayMetrics();
        int densityDpi = (int) (metrics.density);
        LayoutInflater m_inflater = LayoutInflater.from(PlayerActivity.this);
        View view = m_inflater.inflate(R.layout.custom_profilesetting_popup, null);
        int width = (int) this.getResources().getDimension(R.dimen.popup_width);
        mSignOutShowPopup = new PopupWindow(
                view, width, ViewGroup.LayoutParams.WRAP_CONTENT);
        mSignOutShowPopup.setOutsideTouchable(true);
        mSignOutShowPopup.setBackgroundDrawable(new BitmapDrawable());
        mSignOutShowPopup.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {

            }
        });

        TextView mUsernameText = view.findViewById(R.id.txtviewUserName);
        TextView mProfileSettingText = view.findViewById(R.id.settingsign);
        Button mButtonSignOut = view.findViewById(R.id.btnSignOut);
        TextView mAboutUsText = view.findViewById(R.id.txtAboutUs);
        TextView mPrivacyText = view.findViewById(R.id.privacy);
        View mPrivacyDivider = view.findViewById(R.id.privacy_divider);
        TextView mTermsText = view.findViewById(R.id.terms_condition);
        TextView mVersionText = view.findViewById(R.id.version_text);

        mUsernameText.setAlpha(0.6f);
        mUsernameText.setTextColor(getResources().getColor(R.color.black));

        mProfileSettingText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                profilesetting();
            }
        });

        mButtonSignOut.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                com.hurix.reader.kitaboosdkrenderer.dialogs.DialogUtils.showOKCancelAlert(new View(PlayerActivity.this),
                        PlayerActivity.this, getResources()
                                .getString(R.string.signout_title),
                        getResources().getString(R.string.signout_message),
                        getResources().getString(R.string.delete_popup_ok),
                        getResources().getString(R.string.delete_popup_cancel), new OnDialogYesNoActionListner() {
                            @Override
                            public void onPostiveClick(Object obj) {
                                /*  *//*  boolean check = DBController.getInstance(PlayerActivity.this).getManager()
                                        .logoutUserByID(UserController.getInstance(PlayerActivity.this)
                                                .getUserVO().getUserID());*//*

                              //  UserController.getInstance(PlayerActivity.this).getBookManager().getBookCollection().clear();
                                //mDocketList.clear();
                                //UserController.getInstance(PlayerActivity.this).destroy();
                                Intent intent = new Intent(PlayerActivity.this, LoginActivity.class);
                                intent.putExtra("tab", 0);
                                startActivity(intent);
                                overridePendingTransition(R.anim.pull_in_right, R.anim.push_out_left);
                                finish();*/
                            }

                            @Override
                            public void onNegativeClick(Object obj) {

                            }
                        });
            }
        });
        mUsernameText.setText(UserController.getInstance(PlayerActivity.this).getUserVO().getDisplayName());
/*        mAboutUsText.setTextColor(Color.parseColor(UserController.getInstance(PlayerActivity.this).getUserSettings().getPrivacyPolicy()));
        mPrivacyText.setTextColor(Color.parseColor(UserController.getInstance(PlayerActivity.this).getUserSettings().getPrivacyPolicy()));
        mTermsText.setTextColor(Color.parseColor(UserController.getInstance(PlayerActivity.this).getUserSettings().getPrivacyPolicy()));*/
        mPrivacyDivider.setBackgroundColor(getResources().getColor(R.color.grey));
        mVersionText.setTextColor(getResources().getColor(R.color.black));
        mVersionText.setAlpha(0.6f);
        mVersionText.setText(getResources().getString(R.string.version_text) + " " + getResources().getString(R.string.app_version_name));

        mAboutUsText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                aboutUs(v);
            }
        });

        mPrivacyText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openWebViewLink(ServiceConstants.TERMS_AND_CONDITION_WORLD_BOOK);
            }
        });

        mTermsText.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openWebViewLink(ServiceConstants.PRIVACY_POLICY_WORLD_BOOK);
            }
        });

        try {
            int[] location = new int[2];
            v.getLocationOnScreen(location);
            int popStart = location[0] - (((int) getResources().getDimension(R.dimen.fib_pop_width) / 2) - (v.getWidth() / 2));
            int screenWidth = this.getWindowManager().getDefaultDisplay().getWidth();
            int windowWidth = (int) getResources().getDimension(R.dimen.seekbar_thumb_size_dimen) + popStart;
            int marginRight = (int) getResources().getDimension(R.dimen.seekbar_thumb_size_dimen);

            if (windowWidth > screenWidth) {
                mSignOutShowPopup.showAsDropDown(v, -(windowWidth - screenWidth), (int) getResources().getDimension(R.dimen.seekbar_thumb_size_dimen));
            } else if (popStart < 0) {
                mSignOutShowPopup.showAsDropDown(v, -(popStart), (int) getResources().getDimension(R.dimen.seekbar_thumb_size_dimen));
            } else {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                    mSignOutShowPopup.showAsDropDown(v, -20,
                            (int) getResources().getDimension(R.dimen.seekbar_thumb_size_dimen), Gravity.RIGHT);
                } else {
                    mSignOutShowPopup.showAsDropDown(v, -(((int) getResources().getDimension(R.dimen.fib_pop_width) / 2) - (v.getWidth() / 2)),
                            (int) getResources().getDimension(R.dimen.seekbar_thumb_size_dimen));
                }
            }


            mSignOutShowPopup.setOutsideTouchable(true);
            mSignOutShowPopup.setBackgroundDrawable(new BitmapDrawable());


        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void profilesetting() {
      /*  Intent intent = new Intent(PlayerActivity.this, NewProfileSetting.class);
        intent.putExtra("fromReader", true);
        intent.putExtra("currentOpenedBookID", bookId);

        startActivityForResult(intent, Constants.CAMERA_GALLERY_ALL_REQUEST_CODE);*/

    }

    private void aboutUs(View v) {
        Intent intent = new Intent(PlayerActivity.this, AboutUs.class);
        startActivity(intent);
    }

    private void openWebViewLink(String path) {
        Intent webViewLink = new Intent(PlayerActivity.this, WebViewActivity.class);
        Bundle b = new Bundle();
        b.putBoolean("isOriantationLocked", false);
        b.putString("path", path);
        webViewLink.putExtras(b);
        webViewLink.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        overridePendingTransition(R.anim.fade_in, R.anim.fade_out);
        startActivity(webViewLink);

    }

    private synchronized void refreshPageAfterclearAllReviewFromPage(String folioId) {
       /* int currentPageId = GlobalDataManager.getInstance().getLocalBookData().getCurrentTeacherAssesment();
        ArrayList<PentoolVO> penlistlist = GlobalDataManager.getInstance().getAssessmentPenMarks().get(currentPageId).getPenColl();*/

       /* ArrayList<PentoolVO> penlistlist=SDKManager.getInstance().getUserHashmap().get(folioId).getPenColl();

        if (penlistlist != null && penlistlist.size() > 0) {
            for (int i = 0; i < penlistlist.size(); i++) {

                //if (!penlistlist.get(i).isSubmitted())
                deletePenMarkForReviewAndRefreshPage(penlistlist.get(i), mCurrentAnnotationpage);
                if ((i == penlistlist.size() - 1) && SDKManager.getInstance().isClearAllClicked()) {
                    SDKManager.getInstance().setClearAllClicked(false);
                }
            }

        }*/

        SDKManager.getInstance().setClearAllClicked(false);
        /*new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if ( mReaderType == EBookType.FIXEDKITABOO) {
                    //SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());

                }
                if (mReaderType == EBookType.FIXEDEPUB) {
                    //SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                }
            }
        },1000);*/

        if (mReaderType == EBookType.FIXEDEPUB) {
            //to refresh canvas for pentool Epub
            if (!SDKManager.getInstance().isClearAllClicked())
                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
        } else {
            renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
        }

        new Handler(getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                if (SDKManager.getInstance().isReviewMode() || SDKManager.getInstance().isNewTeacherReviewModeOn()) {
                    SDKManager.getInstance().refreshReviewPage();
                }
            }
        }, 1000);

    }


    private synchronized boolean clearAllFIBFromPage(String folioId) {
        if (mcurrentPageData != null && mcurrentPageData[0] != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection() != null)
            return DatabaseManager.getInstance(this).clearFibDataPerPage(userID, bookId, false, folioId, ((PDFPage) mcurrentPageData[0]).getLinkCollection());
        else return false;
    }

    private synchronized boolean clearAllFIBFromPageNext(String folioId) {
        if (mcurrentPageData != null && mcurrentPageData[1] != null && ((PDFPage) mcurrentPageData[1]).getLinkCollection() != null)
            return DatabaseManager.getInstance(this).clearFibDataPerPage(userID, bookId, false, folioId, ((PDFPage) mcurrentPageData[1]).getLinkCollection());
        else return false;
    }

    private synchronized void clearAllPenFromPage(String folioId) {
        String fId = folioId;
        ArrayList<PentoolVO> penlistlist = DatabaseManager.getInstance(this).clearAllPenMarkByPage(userID, fId, bookId);
        if (penlistlist != null && penlistlist.size() > 0) {
            for (int i = 0; i < penlistlist.size(); i++) {

                if (!penlistlist.get(i).isSubmitted())
                    onPenSelectedForDeletion(penlistlist.get(i));
                if ((i == penlistlist.size() - 1) && SDKManager.getInstance().isClearAllClicked()) {
                    SDKManager.getInstance().setClearAllClicked(false);
                    if (penlistlist != null && mReaderType == EBookType.FIXEDKITABOO) {
                        SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                        renderView.loadAsset(AssetType.HighlightNote, fId);

                    }
                    if (penlistlist != null && mReaderType == EBookType.FIXEDEPUB) {
                        SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                        renderView.loadAsset(AssetType.PentoolUndoAndDelete, fId);
                    }
                }
            }

        } else if (penlistlist != null && penlistlist.size() == 0) {
            if (SDKManager.getInstance().isClearAllClicked()) {
                SDKManager.getInstance().setClearAllClicked(false);
                if (penlistlist != null && mReaderType == EBookType.FIXEDKITABOO) {
                    SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                    renderView.loadAsset(AssetType.HighlightNote, fId);

                }
                if (penlistlist != null && mReaderType == EBookType.FIXEDEPUB) {
                    SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                    renderView.loadAsset(AssetType.PentoolUndoAndDelete, fId);
                }
            }
        } else
            SDKManager.getInstance().setClearAllClicked(false);


    }

    private synchronized void clearAllPenFromPageNext(String folioId) {
        SDKManager.getInstance().setClearAllClicked(true);
        String fId = folioId;
        ArrayList<PentoolVO> penlistlist = DatabaseManager.getInstance(this).clearAllPenMarkByPage(userID, fId, bookId);
        if (penlistlist != null && penlistlist.size() > 0) {
            for (int i = 0; i < penlistlist.size(); i++) {

                if (!penlistlist.get(i).isSubmitted())
                    onPenSelectedForDeletion(penlistlist.get(i));
                if ((i == penlistlist.size() - 1) && SDKManager.getInstance().isClearAllClicked()) {
                    SDKManager.getInstance().setClearAllClicked(false);
                    if (penlistlist != null && mReaderType == EBookType.FIXEDKITABOO) {
                        SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                        renderView.loadAsset(AssetType.HighlightNote, fId);

                    }
                    if (penlistlist != null && mReaderType == EBookType.FIXEDEPUB) {
                        SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                        renderView.loadAsset(AssetType.PentoolUndoAndDelete, fId);
                    }
                }
            }

        } else if (penlistlist != null && penlistlist.size() == 0) {
            if (SDKManager.getInstance().isClearAllClicked()) {
                SDKManager.getInstance().setClearAllClicked(false);
                if (penlistlist != null && mReaderType == EBookType.FIXEDKITABOO) {
                    SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                    renderView.loadAsset(AssetType.HighlightNote, fId);

                }
                if (penlistlist != null && mReaderType == EBookType.FIXEDEPUB) {
                    SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
                    renderView.loadAsset(AssetType.PentoolUndoAndDelete, fId);
                }
            }
        } else
            SDKManager.getInstance().setClearAllClicked(false);


    }

    /**
     * Responsible to dismiss the setting panel[Epub]
     */
    @Override
    public void onSettingPanelDismiss() {
        isEpubSettingPanelClicked = false;
        mEpubSettingPanel.setBackgroundColor(getResources().getColor(R.color.transparent));
        mEpubSettingPanel.setTextColor((Color.parseColor(themeUserSettingVo.getmKitabooMainColor())));
    }

    private void onPentoolClosed() {
        mPentoolEraserClicked = true;
        isPentoolBarOpen = false;
        replaceCustomBarwithActionBar();
        hideActionBar();
        penHelper.setEraserMode(false, userID, currentFoliId, bookId);
        renderView.isPenMarkerActive(false);
        if (penHelper.isAnyPenToolSelected()) {
            penHelper.clearSelectedPenTool();
        }

        penHelper.clearDeletedPenMarkerVO();
        mTextChapterTitle.setText(mCurrentPageData.getChapterName());
        DatabaseManager.getInstance(this).updatePenmarks(userID, currentFoliId, bookId);
        drawImage();
    }

    private void openSyncDialog() {
        //Database handling
        //true here false for openFibClearDialog();
        FLAG_IS_SUBMIT_CLICKED = true;
        SDKManager.getInstance().setSubmittedClicked(true);
        if (DatabaseManager.getInstance(this).checkForActivitySubmitData(userID, IsClassAccociated, GlobalDataManager.getInstance().getLocalBookData().getBookID(), false)) {
            DialogUtils.showYesNoAlert(new View(this), this, getResources().getString(R.string.sync_title),
                    getResources().getString(R.string.sync_message), new com.hurix.commons.listener.OnDialogYesNoActionListner() {
                        @Override
                        public void onPostiveClick(Object obj) {
                            if (FLAG_IS_SUBMIT_CLICKED) {
                                String timestamp = Utils.getDateTime();
                                boolean isupdateIsSubmitted = updateIsSubmitted(timestamp);
                                if (isupdateIsSubmitted) {
                                    if (updatePenAndActivityData()) {
                                        String message = "";
                                        if (!GlobalDataManager.getInstance().isCorrectAnswer()) {
                                            message = getResources().getString(R.string.alert_successfully_submit_data) +
                                                    " " + getResources().getString(R.string.alert_check_coorect_answer_submit_data);
                                        } else {
                                            message = getResources().getString(R.string.alert_successfully_submit_data);
                                        }
                                        GlobalDataManager.getInstance().setCorrectAnswer(true);
                                        mServicehandler.sendSubmitDataRequest(bookId, userID, bookVersion);
                                        showOkAlert(message);
                                    }
                                }
                            }

                        }

                        @Override
                        public void onNegativeClick(Object obj) {

                        }

                    });
        } else {
            DialogUtils.showOKAlert(new View(this), 0, this, getResources().getString(R.string.sync_title),
                    getResources().getString(R.string.sync_message_nodata), this);

        }

    }

    private void showOkAlert(String message) {
        DialogUtils.showOKAlert(new View(PlayerActivity.this), 0, this, getResources().getString(R.string.sync_title), message, this);
    }

    private boolean updateIsSubmitted(String _timestamp) {
        return DatabaseManager.getInstance(PlayerActivity.this).updateIsSubmitted(userID, bookId, _timestamp);
    }

    private boolean updatePenAndActivityData() {
        SDKManager.getInstance().clearPenMarkerVO();
        int pageid = mCurrentPageData != null ? mCurrentPageData.getPageID() : 1;
        navigatePageByFolioId(currentFoliId, pageid);
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                getPenFromDB(currentFoliId);
                getHighlightFromDB(currentFoliId);
                getBookmarkDataFromDB(pageVo, pageVo.getFolioID());
                penHelper.refreshAssestOnPage();
            }
        }, 50);
        return true;
    }

    private void openTeacherReview() {
        mTeacherHolder = new TeacherReviewFragment(this, themeUserSettingVo, this, this);
        mTeacherHolder.setlistner(this);
        mTeacherHolder.show(getSupportFragmentManager(), "teacher review");
        // SDKManager.getInstance().setNewTeacherReviewModeOn(true);
        mTeacherHolder.openTeacherReview();
        /*mTeacherHolder = new TeacherAssessmentFragment(this, themeUserSettingVo);
        mTeacherHolder.setlistner(this);
        mTeacherHolder.open();
        mainview.addView(mTeacherHolder);*/
    }

    private void openStickynoteOverlay() {

        hideActionBar();
        //Enable this for porto
        (findViewById(R.id.stickynotelayout)).setVisibility(View.VISIBLE);
        GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.STICKYNOTE);
        (findViewById(R.id.stickynotelayout)).setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                if (event.getAction() == MotionEvent.ACTION_DOWN) {
                    //x point stored to check taped horizontal position to check 2nd page in landscape
                    SDKManager.getInstance().setmXpos(event.getX());
                }
                return false;

            }
        });
    }

    /**
     * Responsible to close note overlay panel and validate taped x,y point to stick the note.
     */
    @Override
    public void closeStickyNoteOverLay(float x, float y) {

        if ((findViewById(R.id.stickynotelayout)) != null && (findViewById(R.id.stickynotelayout)).getVisibility() == VISIBLE) {
            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.NAVIGATION);

            renderView.isStickyNoteActive(true);
            PointF _currentPoint = new PointF(x, y);
            Point point = new Point((int) _currentPoint.x, (int) _currentPoint.y);
            HighlightVO vo = renderView.isPointValid(point);
            if (vo != null) {
                (findViewById(R.id.stickynotelayout)).setVisibility(View.GONE);
                initStickynote(vo, true);
            }
        }
    }

    private void toggleActionItem(KitabooActionItemView view, boolean value) {

        if (view != null) {
            if (value) {
                view.setAlpha(0.5f);
                view.setEnabled(false);
            } else {
                view.setAlpha(1f);
                view.setEnabled(true);
            }
        }

    }

    private void toggleAudioSyncButton(KitabooActionItemView view, boolean value) {

        if (view != null) {
            if (value) {
                view.setAlpha(0.5f);
                /*
                Closed the audio player while playing audio,non-audio chapter is changed
                 */
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        if (SDKManager.getInstance().isReadAloudPlaying()) {
                            SDKManager.getInstance().setlastElement("");
                            closeReadAloud();
                            if (mReadAloudIcon != null)
                                mReadAloudIcon.setAlpha(0.5f);
                        }
                    }
                }, 1000);

            } else {
                view.setAlpha(1f);

                view.postDelayed(() -> {

                    view.setEnabled(true);
                    if (mReadAloudIcon != null && !mReadAloudIcon.isEnabled())
                        mReadAloudIcon.setEnabled(true);
                    SDKManager.getInstance().setAudioSyncEnable(true);

                }, 1000);

            }
        }

    }

    /**
     * Responsible to open Search Dialog on click of highlight panel or search text filed
     */
    private void openSearchDialog() {
        mIsSearchOpen = true;
        if (bottomActionbar != null) {
            bottomActionbar.removeAllActionBarItem();
            bottomActionbar.setVisibility(View.GONE);
        }
        //getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
        openCustomSearchView();
    }

    private void openCustomSearchView() {
        hideActionBar();
        hideBottomBar();
        customSearchPanel(mIsElasticSearch);

      /*  Bundle bundle= new Bundle();
        bundle.putString(FirebaseConstants.SEARCH_BUTTON,);

        FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.SEARCH_BUTTON_CLICK,bundle);
*/

        if (mSearchAdapter == null) {
            mSearchAdapter = new CustomSearchAdapter(PlayerActivity.this, readerThemeSettingVo, mReaderType);
        }
        mTabSearchList.setOnItemClickListener(this);
        mTabSearchList.setAdapter(mSearchAdapter);
        if (mReaderType == EBookType.FIXEDKITABOO) {
            mSearchAdapter.setData(mSearchArrayListPageWise);
        } else {
            mSearchAdapter.setData(mSearchArrayList);
        }
        addSearchView();

        Log.e("search", "" + mSearchQuery);


        mTabSearchIcon.setTypeface(topActionbar.defaultActionbarTypeface(this));
        mTabSearchIcon.setAllCaps(false);
        mTabSearchIcon.setText(CustomPlayerUIConstants.TB_MAG_SEARCH_ICON);
        mTabSearchIcon.setTextColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getSearch().getMainIconColor()));

        mPrevIcon.setTypeface(topActionbar.defaultActionbarTypeface(this));
        mPrevIcon.setAllCaps(false);
        mPrevIcon.setText("G");

        mNextIcon.setTypeface(topActionbar.defaultActionbarTypeface(this));
        mNextIcon.setAllCaps(false);
        mNextIcon.setText("H");

        mOpenSearchListIcon.setTypeface(topActionbar.defaultActionbarTypeface(this));
        mOpenSearchListIcon.setAllCaps(false);
        mOpenSearchListIcon.setText("ɺ");

        mElasticSearchCancelIcon.setTypeface(topActionbar.defaultActionbarTypeface(this));
        mElasticSearchCancelIcon.setAllCaps(false);
        mElasticSearchCancelIcon.setText(CustomPlayerUIConstants.ACTION_PEN_DONE_TEXT);
        //mElasticSearchCancelIcon.setTextColor(getResources().getColor(R.color.cross_icon_color));

        ObjectAnimator animatorSearch = ObjectAnimator.ofFloat(mTabSearchList, "translationY", 0, mTabSearchList.getHeight());
        ObjectAnimator animatorY = ObjectAnimator.ofFloat(mTabSearchLayout, "translationY", 0, 0);
        AnimatorSet animatorSet = new AnimatorSet();
        animatorSet.setDuration(500);
        animatorSet.play(animatorY).with(animatorSearch);

        animatorSet.addListener(new Animator.AnimatorListener() {
            @Override
            public void onAnimationStart(Animator animation) {

            }

            @Override
            public void onAnimationEnd(Animator animation) {
                mTabSearchLayout.setVisibility(View.VISIBLE);
                // mTabSearchList.setVisibility(View.VISIBLE);
            }

            @Override
            public void onAnimationCancel(Animator animation) {

            }

            @Override
            public void onAnimationRepeat(Animator animation) {

            }
        });
        animatorSet.start();
        mTabSearchCancelButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                renderView.isHighlightActive(false);
                onSearchCancelClick();
            }
        });

        mElasticSearchCancelIcon.setOnClickListener(this);
        mOpenSearchListIcon.setOnClickListener(this);
        mNextIcon.setOnClickListener(this);
        mPrevIcon.setOnClickListener(this);


        mTabSearchLayout.setBackgroundColor(getResources().getColor(R.color.bottom_search_background_color));
        if (clickOnSearchiconFromHighlightPopup) {
            mLastSearchedtext = mHighlightedText.trim();
            mSearchQuery = mHighlightedText.trim();
            startTextSearch();
            //mTabSearchEditText.setText(mLastSearchedtext);
            //mTabSearchEditText.setSelection(mLastSearchedtext.length());
            //mSearchview.setQuery(mHighlightedText, true);
            clickOnSearchiconFromHighlightPopup = false;
        }
    }

    private void onSearchCancelClick() {
        {
            ObjectAnimator animatorSearch = null;
            mSearchEmptyView.setVisibility(View.GONE);
            if (mTabSearchList.isShown()) {
                animatorSearch = ObjectAnimator.ofFloat(mTabSearchList, "translationY", 0, mTabSearchList.getHeight());
                animatorSearch.addListener(new Animator.AnimatorListener() {
                    @Override
                    public void onAnimationStart(Animator animation) {

                    }

                    @Override
                    public void onAnimationEnd(Animator animation) {
                        mTabSearchList.setVisibility(View.GONE);
                        mSearchEmptyView.setVisibility(View.GONE);
                        renderView.isHighlightActive(false);
                    }

                    @Override
                    public void onAnimationCancel(Animator animation) {

                    }

                    @Override
                    public void onAnimationRepeat(Animator animation) {

                    }
                });
            }

            ObjectAnimator animatorY = ObjectAnimator.ofFloat(mTabSearchLayout, "translationY", 0, mTabSearchLayout.getHeight());
            AnimatorSet animatorSet = new AnimatorSet();
            animatorSet.setDuration(1000);
            if (mTabSearchList.isShown()) {
                animatorSet.play(animatorY).after(animatorSearch);
            } else {
                animatorSet.play(animatorY);
            }

            animatorSet.addListener(new Animator.AnimatorListener() {
                @Override
                public void onAnimationStart(Animator animation) {

                }

                @Override
                public void onAnimationEnd(Animator animation) {
                    mTabSearchLayout.setVisibility(View.GONE);
                    // mTabSearchList.setVisibility(View.GONE);
                    if (bottomActionbar != null) {
                        bottomActionbar.setVisibility(View.VISIBLE);
                        bottomActionbar.removeAllActionBarItem();
                    }
                    setUpBottomBar();
                    //getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
                    Utils.hideKeyboard(PlayerActivity.this, mTabSearchEditText);
                    Utils.hideKeyboard(PlayerActivity.this);
                    mIsSearchOpen = false;
                    mSearchview = null;
                    mIsElasticSearch = false;

                }

                @Override
                public void onAnimationCancel(Animator animation) {

                }

                @Override
                public void onAnimationRepeat(Animator animation) {

                }
            });
            animatorSet.start();


        }
    }

    /**
     * This method responsible to customize the searchview and add to actionbar / Topbar
     */
    private void addSearchView() {
        mSearchview = findViewById(R.id.editTxtSearchBox);
        if (!isMobile) {
            mSearchview.setPadding(10, 10, 10, 20);
        }
       /* mSearchview.setOnKeyListener(new View.OnKeyListener()
        {
            public boolean onKey(View v, int keyCode, KeyEvent event)
            {`
                if (event.getAction() == KeyEvent.ACTION_DOWN)
                {
                    //check if the right key was pressed
                    if (keyCode == KeyEvent.KEYCODE_BACK)
                    {

                        return true;
                    }
                }
                return false;
            }
        });*/
        mSearchview.setContext(PlayerActivity.this);
        mSearchview.setTheme(themeUserSettingVo);
        mSearchview.setCloseIconColor(Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getSearch().getCrossIconColor()), true,
                40, 40, "∞");
        mSearchview.removeSearchIcon();
        mSearchview.changeSearchPlateBackground(getResources().getColor(R.color.white_transparency));
        mSearchview.setUpSearchEditText(
                getResources().getString(R.string.resource_search_hint),
                getResources().getColor(R.color.transparent),
                getResources().getColor(R.color.search_hint_color),
                getResources().getColor(R.color.black));
        mSearchview.setQueryHint(getResources().getString(R.string.resource_search_hint));
        mSearchview.setIconified(false);
        mSearchview.setIconifiedByDefault(false);
        mSearchview.setListener(this);
        mSearchview.setOnQueryTextListener(new android.widget.SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                mLastSearchedtext = query.trim();
                mSearchQuery = query.trim();
                startTextSearch();
                if (query.isEmpty()) {
                    mTabSearchList.setVisibility(View.GONE);
                    mSearchEmptyView.setVisibility(View.GONE);
                }
                return true;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                if (newText.isEmpty()) {
                    renderView.highlightSearchText("", null, mIsElasticSearch, false, false);
                    mTabSearchList.setVisibility(View.GONE);
                    mSearchEmptyView.setVisibility(View.GONE);
                    mIsElasticSearch = false;
                    if (mReaderType == EBookType.FIXEDKITABOO) {
                        SDKManager.getInstance().setElasticSearchActive(true);
                        GlobalDataManager.getInstance().setElasticSearchActive(true);
                    }
                    renderView.isElasticSearchActive(false);
                    if (mReaderType == EBookType.REFLOWEPUB) {
                        renderView.clearAllElasticSearchData();
                    }
                    customSearchPanel(mIsElasticSearch);
                }
                mLastSearchedtext = newText.trim();
                mSearchQuery = newText.trim();
                startTextSearch();
                return false;
            }
        });
        if (!mLastSearchedtext.isEmpty()) {
            mSearchview.setQuery(mLastSearchedtext, false);
        }
        if (clickOnSearchiconFromHighlightPopup) {
            mLastSearchedtext = mHighlightedText.trim();
            mSearchQuery = mHighlightedText.trim();
            mSearchview.setQuery(mHighlightedText, true);
            clickOnSearchiconFromHighlightPopup = false;
        }
    }

    /**
     * initialize Search dialog
     *
     * @param query : searched text
     * @param view  : anchor view
     */
    private void initSearchDialog(String query, View view) {

        FragmentTransaction ft = getFragmentManager().beginTransaction();
        Fragment prev = getFragmentManager().findFragmentByTag("search");
        if (prev != null) {
            ft.remove(prev);
        }
        ft.addToBackStack(null);
        SearchDialog searchview = SearchDialog.newInstance("search", view, mSeachdata, isMobile, themeUserSettingVo);

        int[] params = setDilaoglayout();
        int width = view == null ? params[1] : view.getWidth();
        if (isMobile) {
            searchview.setParams(params[0], params[1]);
        } else {
            searchview.setParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        }
        searchview.setSearchText(query);
        searchview.setListener(this);
        mDialog = searchview;
        mDialog.show(getSupportFragmentManager(), "search");
    }

    /**
     * Responsible to open thumbnail panel
     */
    private void showThumbnail() {
        if (isMobile) {
            if (mReadPause != null && mAudioManager != null) {
                //mAudioManager.playAudio();
                if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                    mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                    audioIsPause = false;
                } else {
                    mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                    audioIsPause = true;
                }
            }
            String mPreviousChapterTitle = "";
            for (int i = 0; i < mThumbnailColl.size(); i++) {
                if (!mThumbnailColl.get(i).getChapterName().equalsIgnoreCase(mPreviousChapterTitle)) {
                    mPreviousChapterTitle = mThumbnailColl.get(i).getChapterName();
                } else {
                    mThumbnailColl.get(i).setChapterName("");
                }
            }
            Intent intent = new Intent(PlayerActivity.this, CustomMobileBackEnabledActivity.class);
            intent.putExtra("thumbnaildata", mThumbnailColl);
            intent.putExtra("currentviewpagerindex", currentviewpagerindex);
            // intent.putExtra("themedata", readerThemeSettingVo);
            startActivityForResult(intent, Constants.THUMBNAIL_OPEN_REQUESTCODE);
            overridePendingTransition(R.anim.activity_right_in, R.anim.out_to_left);
        } else {
            String mPreviousChapterTitle = "";
            for (int i = 0; i < mThumbnailColl.size(); i++) {
                if (mThumbnailColl.get(i).getPageColl() == null) {
                    mThumbnailColl.remove(i);
                }
            }
            for (int i = 0; i < mThumbnailColl.size(); i++) {
                if (!mThumbnailColl.get(i).getChapterName().equalsIgnoreCase(mPreviousChapterTitle)) {
                    mPreviousChapterTitle = mThumbnailColl.get(i).getChapterName();
                } else {
                    mThumbnailColl.get(i).setChapterName("");
                }
            }

            tabThumbnailFragment = CustomTabThumbnailFragment.newInstance("thumbnail", mThumbnailColl, mthumbnailpath, currentviewpagerindex, currentviewpagerindexl1, currentviewpagerindexl2, mTotalPage.size());
            tabThumbnailFragment.setThemeColor(readerThemeSettingVo);
            tabThumbnailFragment.showHistoryButtons(true);
            tabThumbnailFragment.setThumbListener(this);

            try {
                fragmentManager = getSupportFragmentManager();
                mThumbnailFragmentTransaction = fragmentManager.beginTransaction();
                mPageThumbnailcontainer.setVisibility(View.VISIBLE);
                mThumbnailFragmentTransaction.add(R.id.thumbnailview, tabThumbnailFragment, "thumbnail");
                mThumbnailFragmentTransaction.addToBackStack("thumbnail");
                mThumbnailFragmentTransaction.setCustomAnimations(R.anim.fade_in, R.anim.fade_out);
                mThumbnailFragmentTransaction.commit();
                ObjectAnimator transAnimation = ObjectAnimator.ofFloat(mPageThumbnailcontainer, "translationY",
                        mPageThumbnailcontainer.getTranslationY(), 0);

                transAnimation.addListener(new Animator.AnimatorListener() {
                    @Override
                    public void onAnimationStart(Animator animation) {
                    }

                    @Override
                    public void onAnimationEnd(Animator animation) {
                    }

                    @Override
                    public void onAnimationCancel(Animator animation) {
                    }

                    @Override
                    public void onAnimationRepeat(Animator animation) {
                    }
                });
                transAnimation.start();
            } catch (Exception e) {
                if (Constants.IS_DEBUG_ENABLED) {
                    e.printStackTrace();
                }
            }
            isThumbnailVisible = true;
        }
        hideDialog();
    }

    private void showEpubThumbnail() {

        SDKManager.getInstance().setIspageThumbPressed(true);

        if (mPageThumbnailcontainer != null)
            mPageThumbnailcontainer.setBackgroundColor(getResources().getColor(R.color.trans_parent));
        seekBarFragment = SeekBarFragment.Companion.newInstance();
        seekBarFragment.setData(SDKManager.getInstance().getThumnailPage());
        seekBarFragment.setThemeColor(readerThemeSettingVo);
        seekBarFragment.showHistoryButtons(true);
        seekBarFragment.setThumbListener(this);

        try {
            fragmentManager = getSupportFragmentManager();
            mThumbnailFragmentTransaction = fragmentManager.beginTransaction();
            mPageThumbnailcontainer.setVisibility(View.VISIBLE);
            mThumbnailFragmentTransaction.add(R.id.thumbnailview, seekBarFragment, "thumbnail");
            mThumbnailFragmentTransaction.addToBackStack("thumbnail");
            mThumbnailFragmentTransaction.setCustomAnimations(R.anim.fade_in, R.anim.fade_out);
            mThumbnailFragmentTransaction.commit();
            ObjectAnimator transAnimation = ObjectAnimator.ofFloat(mPageThumbnailcontainer, "translationY",
                    mPageThumbnailcontainer.getTranslationY(), 0);

            transAnimation.addListener(new Animator.AnimatorListener() {
                @Override
                public void onAnimationStart(Animator animation) {
                }

                @Override
                public void onAnimationEnd(Animator animation) {
                }

                @Override
                public void onAnimationCancel(Animator animation) {
                }

                @Override
                public void onAnimationRepeat(Animator animation) {
                }
            });
            transAnimation.start();
        } catch (Exception e) {
            if (Constants.IS_DEBUG_ENABLED) {
                e.printStackTrace();
            }
        }
        isThumbnailVisible = true;

        hideDialog();

        if (SDKManager.getInstance().getPageHistory().size() == 0) {
            SDKManager.getInstance().setPageHistoryPosition(SDKManager.getInstance().getHistoryPageIndex());
            SDKManager.getInstance().updateHistory(SDKManager.getInstance().getPageHistoryPosition());
        }
    }

    /**
     * Responsible to open Mydata Dialog
     *
     * @param menu
     */
    private void showMydataView(View menu) {

        //get all highlight/note data from Database and pass to mydataview
        if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
            hideDialog();
            hideFragment();
        } else {
            ArrayList<HighlightVO> datalist = DatabaseManager.getInstance(this).getHighlight(userID, bookId);
            if (isMobile) {
                mydata = CustomMyDataFragment.newInstance("mydata", menu, isMobile);
                mydata.setThemeColor(readerThemeSettingVo);
                int[] params = setDilaoglayout();

                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                    mydata.setParams(params[1], params[1], Gravity.TOP | Gravity.LEFT);
                } else {
                    mydata.setParams(params[0], params[1], Gravity.TOP | Gravity.LEFT);
                }

                if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                    if (getResources().getBoolean(R.bool.is_AAO) ||
                            getResources().getBoolean(R.bool.is_ADA_Client) ||
                            getResources().getBoolean(R.bool.is_ACEP_client) ||
                            getResources().getBoolean(R.bool.is_islamic_publication)) {
                        mydata.setSharingSettingVisibility(INVISIBLE);
                    } else {
                        mydata.setSharingSettingVisibility(VISIBLE);
                    }
                } else {
                    mydata.setSharingSettingVisibility(INVISIBLE);
                }

                //mydata.setSharingSettingVisibility(UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled());
                mydata.setListener(new CustomMyDataFragment.MydataitemClickListner() {
                    @Override
                    public void onMydataItemClick(HighlightVO vo) {
                        if (mDialog != null)
                            mDialog.dismiss();
                        renderView.mydataNavigatePage(vo);

                    }

                    @Override
                    public void onSettingbtnClick() {
                        openSharingSettingScreen(mydata);
                    }

                    @Override
                    public void onSharebtnClick(HighlightVO vo) {
                        highlightVo = vo;
                        openItemSharingSettingScreen(mydata);
                    }

                    @Override
                    public void onMyDataCommentBtnClick(HighlightVO vo) {
                        onNoteClick(vo);
                    }

                    @Override
                    public void onNotificationClicked(ArrayList<HighlightVO> list) {
                        openUGCAcceptRejectView(mydata, list);
                    }

                    @Override
                    public void onAcceptRejectBtnClicked(boolean accept, HighlightVO vo) {

                        if (Utils.isOnline(PlayerActivity.this)) {
                            int mStatus = Constants.SHARE_DATA_ACCEPTED;
                            if (!accept) {
                                mStatus = Constants.SHARE_DATA_REJECTED;
                            }
                            mServicehandler.SendAcceptCollaborationDataRequest(vo, mStatus, KitabooSDKModel.getInstance().getUserToken(), PlayerActivity.this);

                            if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                                AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_RECEIVED.toString(), vo.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", "");
                            } else {
                                AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_RECEIVED.toString(), vo.getLocalID() + "", vo.getFolioID() + "", "");
                            }


                        } else {
                            DialogUtils.displayToast(PlayerActivity.this,
                                    getResources().getString(R.string.network_not_available_msg),
                                    Toast.LENGTH_LONG, Gravity.CENTER);
                        }
                    }
                });
                mydata.setData(datalist);
                mDialog = mydata;
                mDialog.show(getSupportFragmentManager(), "mydata");
            } else {
                tabMyDataFragment = CustomMyDataTabDialogFragment.newInstance("mydata", menu, isMobile);
                tabMyDataFragment.setThemeColor(readerThemeSettingVo);

                tabMyDataFragment.setListener(new CustomMyDataTabDialogFragment.MydataitemClickListner() {
                    @Override
                    public void onMydataItemClick(HighlightVO vo) {
                        if (tabMyDataFragment != null)
                            tabMyDataFragment.dismiss();
                        /* if (mReaderType == EBookType.REFLOWEPUB) {
                         *//* if(!getBaseUrl(vo.getChapterName()).isEmpty()){
                                renderView.navigatePage(0, getBaseUrl(vo.getChapterName()), anchor, isMobile, false);
                            }*//*
                        }else*/
                        renderView.mydataNavigatePage(vo);

                    }

                    @Override
                    public void onSettingbtnClick() {
                        openSharingSettingScreen(tabMyDataFragment);
                    }

                    @Override
                    public void onNotificationClicked(ArrayList<HighlightVO> notificationList) {
                        openUGCAcceptRejectView(tabMyDataFragment, notificationList);
                    }

                    @Override
                    public void onMyDataCommentBtnClick(HighlightVO vo) {
                        onNoteClick(vo);
                    }

                    @Override
                    public void onSharebtnClick(HighlightVO vo) {
                        highlightVo = vo;
                        openSticyNoteShareScreenFromMyData(vo, vo.getColor());
                    }

                    @Override
                    public void onAcceptRejectBtnClicked(boolean accept, HighlightVO vo) {

                        if (Utils.isOnline(PlayerActivity.this)) {
                            int mStatus = Constants.SHARE_DATA_ACCEPTED;
                            if (!accept) {
                                mStatus = Constants.SHARE_DATA_REJECTED;
                            }
                            mServicehandler.SendAcceptCollaborationDataRequest(vo, mStatus, KitabooSDKModel.getInstance().getUserToken(), PlayerActivity.this);
                            if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                                AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_RECEIVED.toString(), vo.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", "");
                            } else {
                                AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_RECEIVED.toString(), vo.getLocalID() + "", vo.getFolioID() + "", "");
                            }


                        } else {
                            DialogUtils.displayToast(PlayerActivity.this,
                                    getResources().getString(R.string.network_not_available_msg),
                                    Toast.LENGTH_LONG, Gravity.CENTER);
                        }
                    }
                });
                if (UserController.getInstance(mContext).getUserSettings().getIsUgcShareEnabled()) {
                    if (getResources().getBoolean(R.bool.is_AAO) ||
                            getResources().getBoolean(R.bool.is_ADA_Client) ||
                            getResources().getBoolean(R.bool.is_ACEP_client) ||
                            getResources().getBoolean(R.bool.is_islamic_publication)) {
                        tabMyDataFragment.setSharingSettingVisibility(INVISIBLE);
                    } else {
                        tabMyDataFragment.setSharingSettingVisibility(VISIBLE);
                    }
                } else {
                    tabMyDataFragment.setSharingSettingVisibility(INVISIBLE);
                }
                tabMyDataFragment.setData(datalist);
                tabMyDataFragment.show(getSupportFragmentManager(), "mydata");
            }


        }
    }

    private void openItemSharingSettingScreen(final CustomMyDataFragment mydata) {
        _ugcEnterpriseItemSharingScreen = new CustomUGCEnterpriseItemSharingScreen(mydata.getContext(), mydata, readerThemeSettingVo, true);
        _ugcEnterpriseItemSharingScreen.setUgcItemData(highlightVo, arrayListforSharingSetting, userID, accountType);
        _ugcEnterpriseItemSharingScreen.setShareSettingListenr(PlayerActivity.this);
        _ugcEnterpriseItemSharingScreen.setOnclickListner(new CustomUGCEnterpriseItemSharingScreen.OnShareViewItemClickListener() {

            @Override
            public void onShareClicked(View clikedview) {
                // _ugcEnterpriseItemSharingScreen.shareData();
                /*//String eventname =  highlightVo
                //AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.HIGHLIGHT_SHARED.toString(),highlightVo.getLocalID()+"",bookId+"","");*/

                _ugcEnterpriseItemSharingScreen.myDataSharehareClicked();
                if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                    AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_SHARED.toString(), highlightVo.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", "");
                } else {
                    AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_SHARED.toString(), highlightVo.getLocalID() + "", highlightVo.getFolioID() + "", "");
                }
                //onSharePostClick(highlightVo);
                if (mydata != null)
                    mydata.refreshMyDataNoteFragment();

                _ugcEnterpriseItemSharingScreen.cancelClicked();
            }

            @Override
            public void onCancelClicked(View view) {
                _ugcEnterpriseItemSharingScreen.cancelClicked();
            }

            @Override
            public void onBackbtnClicked(View view) {
                _ugcEnterpriseItemSharingScreen.cancelClicked();
            }
        });
        mydata.buildViewForSharingSetting(_ugcEnterpriseItemSharingScreen);
    }

    /**
     * Callback when any shared note is accepted or rejected
     *
     * @param value    Boolean true\false Accepted\Rejected
     * @param position Note list order
     */
    @Override
    public void onUGCAcceptRejectData(boolean value, int position) {

    }

    /**
     * Callback is responsible to handle notes when it's is accepted or rejected
     *
     * @param accept   Boolean true\false Accepted\Rejected
     * @param vo       Current Highlight\Note object
     * @param mUGClist All shared note arraylist
     */
    @Override
    public void onAcceptRejectViewClicked(boolean accept, HighlightVO vo, ArrayList<HighlightVO> mUGClist) {
        this.mUGClist = mUGClist;
        if (Utils.isOnline(PlayerActivity.this)) {
            int mStatus = Constants.SHARE_DATA_ACCEPTED;
            if (!accept) {
                mStatus = Constants.SHARE_DATA_REJECTED;
            }
            mServicehandler.SendAcceptCollaborationDataRequest(vo, mStatus, KitabooSDKModel.getInstance().getUserToken(), PlayerActivity.this);

            if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_RECEIVED.toString(), vo.getLocalID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1) + "", "");
            } else {
                AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.NOTE_RECEIVED.toString(), vo.getLocalID() + "", vo.getFolioID() + "", "");
            }


        } else {
            DialogUtils.displayToast(PlayerActivity.this,
                    getResources().getString(R.string.network_not_available_msg),
                    Toast.LENGTH_LONG, Gravity.CENTER);
        }
    }

    private void openUGCAcceptRejectView(CustomMyDataFragment mydata, ArrayList<HighlightVO> ugcList) {
        mMobileAcceptRejectView = new UGCDataAcceptRejectView(mydata.getContext(),
                mydata, themeUserSettingVo, true, ugcList);
        mMobileAcceptRejectView.setListener(this);
        mydata.buildViewForSharingSetting(mMobileAcceptRejectView);
    }


    private void openUGCAcceptRejectView(CustomMyDataTabDialogFragment mydatatab, ArrayList<HighlightVO> ugcList) {
        mTabAcceptRejectView = new UGCDataAcceptRejectView(mydatatab.getContext(),
                mydatatab, themeUserSettingVo, false, ugcList);
        mTabAcceptRejectView.setListener(this);
        mydatatab.buildViewForSharingSetting(mTabAcceptRejectView);
    }

   /* private void openItemSharingSettingScreen(CustomMyDataTabFragment mydata) {
        _ugcEnterpriseItemSharingScreen = new CustomUGCEnterpriseItemSharingScreen(mydata.getContext(), mydata, readerThemeSettingVo, false);
        _ugcEnterpriseItemSharingScreen.setUgcItemData(highlightVo, arrayListforSharingSetting, userID, accountType);
        _ugcEnterpriseItemSharingScreen.setShareSettingListenr(PlayerActivity.this);
        _ugcEnterpriseItemSharingScreen.setOnclickListner(new CustomUGCEnterpriseItemSharingScreen.OnShareViewItemClickListener() {

            @Override
            public void onShareClicked(View clikedview) {
                _ugcEnterpriseItemSharingScreen.shareData();
                //String eventname =  highlightVo
                //AnalyticsManager.getInstance(PlayerActivity.this).TrackEvent(EventName.HIGHLIGHT_SHARED.toString(),highlightVo.getLocalID()+"",bookId+"","");
            }

            @Override
            public void onCancelClicked(View view) {
                _ugcEnterpriseItemSharingScreen.cancelClicked();
            }

            @Override
            public void onBackbtnClicked(View view) {
                _ugcEnterpriseItemSharingScreen.cancelClicked();
            }
        });
        mydata.buildViewForSharingSetting(_ugcEnterpriseItemSharingScreen);
    }*/

    @Override
    protected void onStop() {
        Log.d("PlayerActivity", "onStop called");

        super.onStop();

        //Pause Audio
        if (null != mAudioManager) mAudioManager.pauseAudioSync();
    }

    private void openSharingSettingScreen(CustomMyDataFragment mydata) {
        _ugcSharingSettingScreen = new CustomUGCSharingSettingsScreen(mydata.getContext(), mydata, readerThemeSettingVo, true);
        _ugcSharingSettingScreen.setData(arrayListforSharingSetting, userID, accountType);
        _ugcSharingSettingScreen.setShreSettingListener(this);
        mydata.buildViewForSharingSetting(_ugcSharingSettingScreen);
    }

    private void openSharingSettingScreen(CustomMyDataTabDialogFragment tabMyData) {

        ugcShareSettingDialog = new Dialog(PlayerActivity.this);

        _ugcSharingSettingScreen = new CustomUGCSharingSettingsScreen(tabMyData.getContext(), tabMyData, readerThemeSettingVo, false, ugcShareSettingDialog);
        _ugcSharingSettingScreen.setData(arrayListforSharingSetting, userID, accountType);
        _ugcSharingSettingScreen.setShreSettingListener(this);

        ugcShareSettingDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        ugcShareSettingDialog.setContentView(_ugcSharingSettingScreen);

        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
        lp.copyFrom(ugcShareSettingDialog.getWindow().getAttributes());

        DisplayMetrics displayMetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);

        if (!isMobile && this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
            lp.width = displayMetrics.widthPixels - 370 - 370;
            lp.height = displayMetrics.heightPixels - 80 - 80;
        } else {
            lp.width = displayMetrics.widthPixels - 80 - 80;
            lp.height = displayMetrics.heightPixels - 340 - 340;
        }

        lp.gravity = Gravity.CENTER;
        ugcShareSettingDialog.getWindow().setAttributes(lp);
        ugcShareSettingDialog.show();

        //tabMyData.buildViewForSharingSetting(_ugcSharingSettingScreen);
    }


    /**
     * Responsible to hide Thumbnail panel
     */
    private void hideThumbanilPanel() {
        if (tabThumbnailFragment != null) {
            if (fragmentManager.getBackStackEntryCount() > 0)
                fragmentManager.popBackStackImmediate();
            isThumbnailVisible = false;
        } else if (seekBarFragment != null) {
            if (fragmentManager.getBackStackEntryCount() > 0)
                fragmentManager.popBackStackImmediate();
            isThumbnailVisible = false;
        }


    }

    private void hideFragment() {
        if (tabThumbnailFragment != null) {
            if (fragmentManager.getBackStackEntryCount() > 0)
                fragmentManager.popBackStackImmediate();
            isThumbnailVisible = false;
        } else if (seekBarFragment != null) {
            if (fragmentManager.getBackStackEntryCount() > 0)
                fragmentManager.popBackStackImmediate();
            isThumbnailVisible = false;
        }

        SDKManager.getInstance().setIspageThumbPressed(false);
    }

    /**
     * Called on  Click of Toc item list
     *
     * @param folioId :
     * @param pageid
     */
    @Override
    public void onTocitemClick(String folioId, String baseUrl, String anchor, boolean isMobile, int pageid) {
        SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
        GlobalDataManager.getInstance().setClickedFromTOCItem(true);
        if (mReaderType == EBookType.FIXEDKITABOO) {
            // navigatePageByFolioId(folioId, pageid);
            /* navigation of toc item on pageId*/
            navigatePageByPageId(pageid);
        } else {
            renderView.navigatePage(0, baseUrl, anchor, isMobile, false);
        }
        if (mDialog != null) {
            mDialog.dismiss();
            mDialog = null;
            toc = null;
        }

        if (mBottomBookmarkFragment != null) {
            mBottomBookmarkFragment.dismiss();
        }
        playAudioAfterNavigation();

    }

    /**
     * Responsible to naviagte to specific pages from thumbnail panel
     *
     * @param pageid
     */
    @Override
    public void ThumbnailpageNavigation(long pageid) {


        if (!isMobile && this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
            SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
            renderView.navigatePage((int) pageid, "", "", false, false);
            hideFragment();
        } else {
            SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
            navigatePageByFolioId("", (int) pageid);
            //renderView.navigatePage((int) pageid, "", "", false, false);
            hideFragment();
        }
        hideDialog();
        playAudioAfterNavigation();
    }


    /**
     * Call back once thumbnail view created
     *
     * @param view : thumbnail view
     */
    @Override
    public void onThumbnailViewCreated(View view) {
        //Can Customize the thumbnail layout
    }

    /**
     * Call back once Seekbar view created
     *
     * @param seekBarHint : Seekbar view
     */
    @Override
    public void onSeekbarViewCreated(SeekBar seekBarHint) {
    }

    /**
     * Call back on click of GoTo thumbnail panel
     *
     * @param Pageno : User entered Page Number
     */
    @Override
    public void onGotoClick(String Pageno) {

        if (mReaderType == EBookType.FIXEDEPUB) {
            if (checkPageExists(Pageno)) {
                renderView.navigatePage(0, mThumbMapColl.get(Pageno), "", isMobile, false);
            } else {
                com.hurix.commons.utils.DialogUtils.showOKAlert(new View(PlayerActivity.this), 1, PlayerActivity.this, PlayerActivity.this.getResources()
                        .getString(R.string.alert_error), getResources().getString(R.string.page_not_found), null);
            }
        } else {
            int pageidforgoto = getCurrPageIDByDisplayNum(Pageno);
            if (isMobile) {
                if (pageidforgoto > -1) {
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                    renderView.navigatePage(pageidforgoto, "", "", true, false);
                } else {
                    Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                }
            } else {
                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    if (pageidforgoto > -1) {
                        if (pageidforgoto <= 1) {
                            pageidforgoto = 0;
                            SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                            renderView.navigatePage(pageidforgoto, "", "", true, false);
                        } else {
                            SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                            pageidforgoto = pageidforgoto / 2;
                            renderView.navigatePage(pageidforgoto + 1, "", "", true, false);
                        }
                    } else {
                        Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                    }
                } else {
                    if (pageidforgoto > -1) {
                        SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                        renderView.navigatePage(pageidforgoto, "", "", true, false);
                    } else {
                        Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                    }
                }
            }
            playAudioAfterNavigation();
        }

    }

    private boolean checkPageExists(String page) {

        return mThumbMapColl.get(page.trim().toLowerCase()) != null;

    }

    /**
     * Call back on click of Previous button  [PageHistory]
     */
    @Override
    public void NavigatePreviousPage() {
        navigatepreviouspage();
        if (mReaderType == EBookType.FIXEDKITABOO)
            playAudioAfterNavigation();
    }

    @Override
    public void navigate(String baseUrl) {

        if (mReaderType == EBookType.FIXEDEPUB) {
            renderView.navigatePage(0, baseUrl, "", isMobile, false);
        }
    }

    private void navigatepreviouspage() {

        int prevpageID = SDKManager.getInstance().getPreviousHistoryPage();
        if (mReaderType == EBookType.FIXEDEPUB) {
            prevpageID = SDKManager.getInstance().getPreviousPage();
            if (mThumbListColl == null)
                mThumbListColl = SDKManager.getInstance().getThumnailPage();

            if (mThumbListColl != null && mThumbListColl.size() > prevpageID) {
                if (isMobile) {
                    if (prevpageID != -1) {
                        SDKManager.getInstance().setIspageHistoryRequired(false);
                        renderView.navigatePage(0, mThumbListColl.get(prevpageID).getSrc(), "", isMobile, false);
                        SDKManager.getInstance().updateBackHistory();
                    } else {
                        hideFragment();
                    }
                } else {
                    if (prevpageID != -1) {
                        SDKManager.getInstance().setIspageHistoryRequired(false);
                        renderView.navigatePage(0, mThumbListColl.get(prevpageID).getSrc(), "", isMobile, false);
                        SDKManager.getInstance().updateBackHistory();
                    } else {
                        hideFragment();
                    }
                }
            }
        } else {
            SDKManager.getInstance().setHistoryNavigationRecordRequired(false);

            if (isMobile) {
                renderView.navigatePage(prevpageID, "", "", true, true);
            } else {
                if (prevpageID != -1) {
                    renderView.navigatePage(calculatePagewithIdexvalue(prevpageID), "", "", true, true);
                } else {
                    hideFragment();
                }
            }
        }
    }

    /**
     * Call back on click of Next button  [PageHistory]
     */
    @Override
    public void NavigateNextPage() {

        navigatenextpage();
        if (mReaderType == EBookType.FIXEDKITABOO)
            playAudioAfterNavigation();
    }

    /**
     * Responsible to naviagte to next page
     */
    private void navigatenextpage() {

        int nextPageID = SDKManager.getInstance().getNextHistoryPage();
        if (mReaderType == EBookType.FIXEDEPUB) {
            nextPageID = SDKManager.getInstance().getNextPage();
            if (mThumbListColl == null)
                mThumbListColl = SDKManager.getInstance().getThumnailPage();

            if (mThumbListColl != null && mThumbListColl.size() > nextPageID) {
                if (isMobile) {
                    if (nextPageID != -1) {
                        SDKManager.getInstance().setIspageHistoryRequired(false);
                        renderView.navigatePage(0, mThumbListColl.get(nextPageID).getSrc(), "", isMobile, false);
                        // SDKManager.getInstance().updateBackHistory();
                    } else {
                        hideFragment();
                    }
                } else {
                    if (nextPageID != -1) {
                        SDKManager.getInstance().setIspageHistoryRequired(false);
                        renderView.navigatePage(0, mThumbListColl.get(nextPageID).getSrc(), "", isMobile, false);
                        // SDKManager.getInstance().updateBackHistory();
                    } else {
                        hideFragment();
                    }
                }
            }

        } else {

            SDKManager.getInstance().setHistoryNavigationRecordRequired(false);

            if (isMobile) {
                renderView.navigatePage(nextPageID, "", "", true, true);
            } else {
                if (nextPageID != -1) {
                    renderView.navigatePage(calculatePagewithIdexvalue(nextPageID), "", "", true, true);
                } else {
                    hideFragment();
                }
            }
        }

    }

    /**
     * Call back once pagehistory  button created
     *
     * @param mPageHistNext     Pagehistory next button
     * @param mPageHistPrevious Pagehistory Previous  button
     */
    @Override
    public void onPageHistoryButtonsCreated(Button mPageHistNext, Button mPageHistPrevious) {

        if (mReaderType == EBookType.FIXEDKITABOO) {

            mPageHistNext.setEnabled(true);
            mPageHistPrevious.setEnabled(true);
            mPageHistNext.setAlpha(1f);
            mPageHistPrevious.setAlpha(1f);

            if (SDKManager.getInstance().getHistoryStack().size() < 1) {
                mPageHistNext.setAlpha(0.5f);
                mPageHistPrevious.setAlpha(0.5f);
                mPageHistNext.setEnabled(false);
                mPageHistPrevious.setEnabled(false);
            } else {

                if (SDKManager.getInstance().getHistoryStack().size() > 0 &&
                        (SDKManager.getInstance().getHistoryStackPosition() <= 0)) {
                /*
                Make Next button Enabled
                 */
                    mPageHistPrevious.setAlpha(0.5f);
                    mPageHistPrevious.setEnabled(false);
                }
                if (SDKManager.getInstance().getHistoryStackPosition() + 1 == SDKManager.getInstance().getHistoryStack().size()) {
                 /*
                Make Previous button Enabled
                 */
                    mPageHistNext.setAlpha(0.5f);
                    mPageHistNext.setEnabled(false);
                }
            }
        } else if (mReaderType == EBookType.FIXEDEPUB) {

            //Modified by Amit B
            //Initial
            if (SDKManager.getInstance().getPageHistory().size() <= 1 &&
                    SDKManager.getInstance().getHistoryCount() == -1) {
                mPageHistNext.setAlpha(0.5f);
                mPageHistPrevious.setAlpha(0.5f);
                mPageHistNext.setEnabled(false);
                mPageHistPrevious.setEnabled(false);
                return;
            }

            //History size 1 and count 1 - previous should be enabled
            if (SDKManager.getInstance().getPageHistory().size() <= 2 &&
                    SDKManager.getInstance().getHistoryCount() <= 2) {
                if (SDKManager.getInstance().getHistoryCount() == 0) {
                    mPageHistNext.setAlpha(1f);
                    mPageHistPrevious.setAlpha(0.5f);
                    mPageHistNext.setEnabled(true);
                    mPageHistPrevious.setEnabled(false);
                    return;
                }
                mPageHistNext.setAlpha(0.5f);
                mPageHistPrevious.setAlpha(1f);
                mPageHistNext.setEnabled(false);
                mPageHistPrevious.setEnabled(true);
                return;
            }
            //History size > 1
            if (SDKManager.getInstance().getPageHistory().size() > 1) {
                if (SDKManager.getInstance().getHistoryCount() == SDKManager.getInstance().getPageHistory().size()) {
                    mPageHistNext.setAlpha(0.5f);
                    mPageHistPrevious.setAlpha(1f);
                    mPageHistNext.setEnabled(false);
                    mPageHistPrevious.setEnabled(true);
                    return;
                }
                //if we click next button and page history size is same then make next button disable
                //If we dont do this.. it shows next button enabled on last page
                if (SDKManager.getInstance().getHistoryCount() + 1 == SDKManager.getInstance().getPageHistory().size()) {
                    mPageHistNext.setAlpha(0.5f);
                    mPageHistPrevious.setAlpha(1f);
                    mPageHistNext.setEnabled(false);
                    mPageHistPrevious.setEnabled(true);
                    return;
                }

                if (SDKManager.getInstance().getHistoryCount() > 1) {
                    mPageHistNext.setAlpha(1f);
                    mPageHistPrevious.setAlpha(1f);
                    mPageHistNext.setEnabled(true);
                    mPageHistPrevious.setEnabled(true);
                    return;
                }
                if (SDKManager.getInstance().getHistoryCount() == 0) {
                    mPageHistNext.setAlpha(1f);
                    mPageHistPrevious.setAlpha(0.5f);
                    mPageHistNext.setEnabled(true);
                    mPageHistPrevious.setEnabled(false);
                    return;
                }
            }


            /*mPageHistNext.setEnabled(false); //making next false for first time
            mPageHistNext.setAlpha(0.5f);

            mPageHistPrevious.setEnabled(true);
//            mPageHistNext.setAlpha(1f);
            mPageHistPrevious.setAlpha(1f);


            if (SDKManager.getInstance().getPageHistory().size() < 1) {
                mPageHistNext.setAlpha(0.5f);
                mPageHistPrevious.setAlpha(0.5f);
                mPageHistNext.setEnabled(false);
                mPageHistPrevious.setEnabled(false);
            } else {

                if (SDKManager.getInstance().getPageHistory().size() > 0) { //First checking with page history
                    if (SDKManager.getInstance().getPageHistory().size() > 1) {
                        mPageHistNext.setEnabled(true);
                        mPageHistNext.setAlpha(1f);
                    }
                    if ((SDKManager.getInstance().getHistoryCount() <= 0)) {
                *//*
                Make Next button Enabled
                 *//*
                        mPageHistPrevious.setAlpha(0.5f);
                        mPageHistPrevious.setEnabled(false);
                        mPageHistNext.setEnabled(true);
                    }
                }
                if (SDKManager.getInstance().getHistoryCount() + 1 == SDKManager.getInstance().getPageHistory().size()) {
                 *//*
                Make Previous button Enabled
                 *//*
                    mPageHistNext.setAlpha(0.5f);
                    mPageHistNext.setEnabled(false);
                }

                if (SDKManager.getInstance().getPageHistory().size() == 1) {
                    mPageHistPrevious.setAlpha(0.5f);
                    mPageHistPrevious.setEnabled(false);
                }

            }*/

        }

    }


    /**
     * Validate page id and return respective page number
     *
     * @param dispNum :
     * @return : -1 if invalid pageid or respective page id
     */
    private int getCurrPageIDByDisplayNum(String dispNum) {
        if (gotopagecollection != null) {
            for (int i = 0; i < gotopagecollection.size(); i++) {
                ThumbnailVO vo = gotopagecollection.get(i);
                String fname = vo.getFolioID();
                if (dispNum.equalsIgnoreCase(fname)) {
                    if (fname != null && !fname.isEmpty() && dispNum.equalsIgnoreCase(fname)) {
                        return vo.getPageID();
                    }
                }
            }
            return -1;
        }
        return -1;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQ_YOUTUBE_PLAYER && resultCode != RESULT_OK) {
            YouTubeInitializationResult errorReason =
                    YouTubeStandalonePlayer.getReturnedInitializationResult(data);
            if (errorReason.isUserRecoverableError()) {
                errorReason.getErrorDialog(this, 0).show();
            } else {
                String errorMessage = errorReason.toString();
                //"String.format(getString(R.string.error_player), errorReason.toString());"
                Toast.makeText(this, errorMessage, Toast.LENGTH_LONG).show();
            }
        } else if (requestCode == Constants.THUMBNAIL_OPEN_REQUESTCODE) {
            if (resultCode == Activity.RESULT_OK) {
                String currentresult = data.getStringExtra("result");
                int pageId = -1;
                if (currentresult != null) {
                    if (((currentresult).equalsIgnoreCase("Previous")) || (currentresult).equalsIgnoreCase("Next")) {
                        if ((currentresult).equalsIgnoreCase("Previous")) {
                            pageId = SDKManager.getInstance().getPreviousHistoryPage();
                            navigatepreviouspage();
                        } else {
                            pageId = SDKManager.getInstance().getNextHistoryPage();
                            navigatenextpage();
                        }
                    }
                } else {
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                    pageId = data.getIntExtra("thumnbnailpagenavigationresult", 0);
                    renderView.navigatePage(pageId, "", "", true, false);
                }

               /* Bundle bundle = new Bundle();
                bundle.putString(FirebaseConstants.THUMBNAIL_DATA, pageId + "");

                FirebaseAnalyticsEvents.INSTANCE.sendFireBaseNAEvents(FirebaseConstants.THUMBNAIL_DATA_CLICK);*/
            }
        } else if (requestCode == Constants.CAMERA_GALLERY_ALL_REQUEST_CODE) {

            drawImage();

        } else if (requestCode == Constants.BOOKPLAYER_OPEN_PDF_REQUESTCODE) {
            if (mBottomBookmarkFragment != null) {
                mBottomBookmarkFragment.dismiss();
            }

            if (actionView != null) {
                actionView.dismiss();
            }

        }
    }

    private int calculatePagewithIdexvalue(int pageid) {
        if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
            if (pageid == 0) {
                pageid = 0;
            } else {
                if (pageid == 1) {
                    pageid = 1;
                }
                if (pageid >= 2) {
                    double roundof = pageid;
                    double roundof1 = Math.round(roundof / 2);
                    pageid = (int) roundof1;
                }
            }
        } else {
            /*
            For portrait page index navigation
             */
            return pageid;
        }
        return pageid;
    }

    /**
     * Callback when pen-color is selected from pentool bar
     *
     * @param color Selected color
     */
    @Override
    public void onColorSelected(int color, boolean isPenActive) {

        if (isPenActive) {
            mPenSelectedColor = color;
            String hexColor = String.format("%06X", (0xFFFFFF & color));
            if (!hexColor.contains("#")) {
                renderView.setPenColor("#" + hexColor);
            } else {
                renderView.setPenColor(hexColor);
            }
            mColorPopupButton.getColorIndicator(mPenSelectedSize).setBackgroundColor(color);
        } else {

            String hexColor = String.format("%06X", (0xFFFFFF & color));

            if (!hexColor.contains("#")) {
                setaudioSyncColor("#" + hexColor);
                setColorPickerItemColor("#" + hexColor);
            } else {
                setaudioSyncColor(hexColor);
                setColorPickerItemColor(hexColor);
            }
        }

    }

    private void setColorPickerItemColor(String color) {
        if (mColorPickerView != null) {
            mColorPicker = Color.parseColor(color);
            mColorPickerView.getColorPopupText().setTypeface(bottomActionbar.defaultActionbarTypeface(this));
            mColorPickerView.getColorPopupText().setText(CustomPlayerUIConstants.AS_UNSELECTED_COLOR);
            mColorPickerView.getColorPopupText().setAllCaps(false);
            mColorPickerView.getColorPopupText().setTextSize(18);
            mColorPickerView.getColorPopupText().setTextColor(mColorPicker);

            mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).post(() -> {
                mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTextSize(10);
                mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTypeface(bottomActionbar.defaultActionbarTypeface(this));
                mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setText(CustomPlayerUIConstants.AS_COLOR_PICKER);
            });
        }

    }

    /**
     * Callback when Pentool bar is dismissed
     */
    @Override
    public void onDismiss() {
        if (isPentoolColorStateCliced) {
            isPentoolColorStateCliced = false;
            if (mColorPopupButton != null) {
                mColorPopupButton.getParnet().setBackgroundColor(getResources().getColor(R.color.transparent));
                mColorPopupButton.getColorPopupText().setTextColor(Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor()));
            }

        } else if (isColorPickerClicked) {

            isColorPickerClicked = false;
            if (mColorPickerView != null) {
                mColorPickerView.getmParent().setBackgroundColor(getResources().getColor(R.color.transparent));
                setColorPickerItemColor(GlobalDataManager.getInstance().getCurrentASMenucolor());
                mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTextColor(mPentoolToolbarItemColor);
            }
        }


    }

    /**
     * Callback when pentool-thickness is changed
     *
     * @param size Pentool thickness size
     */
    @Override
    public void OnSizeChanged(int size) {
        Log.d("pen size changed : ", size + "");
        renderView.setPenSize(size);
        mPenSelectedSize = size;
        if (mColorPopupButton != null)
            mColorPopupButton.getColorIndicator(size).setBackgroundColor(mPenSelectedColor);

    }

    /**
     * Callback when pentool-size view dismissed
     */
    @Override
    public void onSizeDismiss() {
        if (isPentoolSizeCliced) {
            isPentoolSizeCliced = false;
            mPentoolSize.setBackgroundColor(getResources().getColor(R.color.transparent));
            mPentoolSize.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                    getDayMode().getPentool().getToolbar().getIconsColor())));
        }

    }

    private void getPenFromDB(String folioId) {
        String fId = folioId;
        ArrayList<PentoolVO> penlistlist = DatabaseManager.getInstance(this).getAllPenMarkersByPage(userID,
                fId, bookId);
        if (penlistlist != null) {
            SDKManager.getInstance().setAllPenMarkerVO(folioId, penlistlist);
        }
    }

    private void replaceActionBarwithPenBar(boolean removeTopActionBarItem) {

        if (removeTopActionBarItem) {
            if (topActionbar != null) {
                topActionbar.removeAllActionBarItem();
            }
        }
        addPentBarItem();
    }

    private void replaceActionBarwithTeacherReviewBar(boolean removeTopActionBarItem) {

        if (removeTopActionBarItem) {
            if (topActionbar != null) {
                topActionbar.removeAllActionBarItem();
            }
        }
        if (bottomActionbar != null) {
            bottomActionbar.removeAllActionBarItem();
        }


        addTeacherReviewTopBar();
    }

    private void replaceActionBarwithReadAloudBar(boolean removeTopActionBarItem) {


        if (mReaderType == EBookType.REFLOWEPUB) {

            if (removeTopActionBarItem) {
                if (bottomActionbar != null) {
                    bottomActionbar.removeAllActionBarItem();
                }
            }

            addReadAloudBottomBar();

        } else if (mReaderType == EBookType.FIXEDKITABOO) {

            if (removeTopActionBarItem) {
                if (bottomActionbar != null) {
                    bottomActionbar.removeAllActionBarItem();
                }
            }

            addReadAloudBottomBar();

        } else {

            if (removeTopActionBarItem) {
                if (topActionbar != null) {
                    topActionbar.removeAllActionBarItem();
                }
            }

            addReadAloudTopBar();
        }


    }

    private void replaceTopBarWithCustomBar() {
        if (topActionbar != null) {
            topActionbar.removeAllActionBarItem();
        }
        setTopActionbarItem();
    }

    private void replaceCustomBarwithActionBar() {
        if (bottomActionbar != null) {
            bottomActionbar.removeAllActionBarItem();
        }
        if (topActionbar != null) {
            topActionbar.removeAllActionBarItem();
        }

        setTopActionbarItem();
        setUpBottomBar();

    }

    private void addPentBarItem() {
        mPentoolDone = new KitabooActionItemView(this);
        mPentoolColor = new KitabooActionItemView(this);
        mPentoolSize = new KitabooActionItemView(this);
        mPentoolEraser = new KitabooActionItemView(this);
        mPentoolUndo = new KitabooActionItemView(this);
        mPentoolClearAll = new KitabooActionItemView(this);
        mColorPopupButton = new CustomCompoundView(PlayerActivity.this);
        initializeColorPopupButton();
        if (isMobile) {
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                setTopActionbar(mPentoolDone, R.id.action_pentool_done, "F", CustomPlayerUIConstants.ACTION_PEN_DONE_TEXT,
                        mPentoolToolbarItemColor, Gravity.LEFT, 0, 22);

                setCustomViewActionbar(mColorPopupButton, R.id.action_pentool_color, "",
                        mPentoolToolbarItemColor, Gravity.LEFT, 40);

                setTopActionbar(mPentoolSize, R.id.action_pentool_size, "G", CustomPlayerUIConstants.
                        PT_THICKNESS_BIG_IC_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 40, 22);

                setTopActionbar(mPentoolEraser, R.id.action_pentool_eraser, "D", PlayerUIConstants.
                        PT_ERASER_IC_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 40, 22);

                setTopActionbar(mPentoolUndo, R.id.action_pentool_undo, "E", PlayerUIConstants.
                        UNDO_PENTOOL_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 40, 22);

                setTopActionbar(mPentoolClearAll, R.id.action_pentool_clear_all, "C",
                        CustomPlayerUIConstants.PT_CLEAR_ALL_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 0, 22);
            } else {
                setTopActionbar(mPentoolDone, R.id.action_pentool_done, "F", CustomPlayerUIConstants.
                        ACTION_PEN_DONE_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.mobile_bottombar_left_margin), 22);

                setCustomViewActionbar(mColorPopupButton, R.id.action_pentool_color, "",
                        mPentoolToolbarItemColor, Gravity.LEFT, 0);

                setTopActionbar(mPentoolSize, R.id.action_pentool_size, "G", CustomPlayerUIConstants.
                        PT_THICKNESS_BIG_IC_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 0, 22);

                setTopActionbar(mPentoolEraser, R.id.action_pentool_eraser, "D",
                        PlayerUIConstants.PT_ERASER_IC_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 0, 22);

                setTopActionbar(mPentoolUndo, R.id.action_pentool_undo, "E", PlayerUIConstants.
                        UNDO_PENTOOL_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 0, 22);

                setTopActionbar(mPentoolClearAll, R.id.action_pentool_clear_all, "C",
                        CustomPlayerUIConstants.PT_CLEAR_ALL_TEXT, mPentoolToolbarItemColor, Gravity.LEFT, 0, 22);
            }


        } else {
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                setCustomViewActionbar(mColorPopupButton, R.id.action_pentool_color, "",
                        mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_pen_left_margin));
            } else {
                setCustomViewActionbar(mColorPopupButton, R.id.action_pentool_color, "",
                        mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_top_pen_land_margin));
            }

            setTopActionbar(mPentoolSize, R.id.action_pentool_size, "G", CustomPlayerUIConstants.PT_THICKNESS_BIG_IC_TEXT,
                    mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_pen_common_margin), 22);

            setTopActionbar(mPentoolEraser, R.id.action_pentool_eraser, "D", PlayerUIConstants.PT_ERASER_IC_TEXT,
                    mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_pen_common_margin), 22);

            setTopActionbar(mPentoolUndo, R.id.action_pentool_undo, "E", PlayerUIConstants.UNDO_PENTOOL_TEXT,
                    mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_pen_common_margin), 22);

            setTopActionbar(mPentoolClearAll, R.id.action_pentool_clear_all, "C", CustomPlayerUIConstants.PT_CLEAR_ALL_TEXT,
                    mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.action_bar_pen_common_margin), 22);

            setTopActionbar(mPentoolDone, R.id.action_pentool_done, "F", CustomPlayerUIConstants.ACTION_PEN_DONE_TEXT,
                    mPentoolToolbarItemColor, Gravity.RIGHT, 0, 22);
        }
        topActionbar.setBackgroundColor(mPentoolToolbarBackgroundColor);
        topActionbar.setBackgroundDrawable(Utils.getRectAngleDrawable(mPentoolToolbarBackgroundColor,
                new float[]{2, 2, 2, 2, 2, 2, 2, 2}, 1, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTableofcontents().getPopupBorder())));
        topActionbar.build();
        mColorPopupButton.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setBackgroundColor(mPenSelectedColor);
    }


    private void addAsColorItem(View menu) {
        mColorPopupButton = new CustomCompoundView(PlayerActivity.this);
        initializeColorPopupButton();
        mColorPopupButton.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setBackgroundColor(mPenSelectedColor);

        if (!isColorPickerClicked) {
            int[] color;
            isColorPickerClicked = true;
            if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                hideDialog();
            }

            color = new int[5];
            String[] penColors = new String[]{"#D17D00", "#FC5454", "#C061FF", "#6F9C21", "#009CC7"};
            //String[] penColors = new String[]{"#E8BD7F", "#FDA9A9", "#DFAFFF", "#B6CD8F", "#7FCDE3"};
            for (int i = 0; i < penColors.length; i++) {
                color[i] = Color.parseColor(penColors[i]);
            }

            int numberOfColumn = 5;
            FragmentManager fm = getSupportFragmentManager();
            openASColorPopup(menu, fm, PlayerActivity.this, color, color.length);
            mColorPickerView.getmParent().setBackgroundColor((Color.parseColor(readerThemeSettingVo.getReader().
                    getDayMode().getPentool().getToolbar().getSelectedIconBackground())));
            mColorPickerView.getColorPopupText().setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                    getDayMode().getPentool().getToolbar().getSelectedIconColor())));
            setColorPickerItemColor(GlobalDataManager.getInstance().getCurrentASMenucolor());
            mColorPickerView.getmColorIndicator1().setTextColor(getResources().getColor(R.color.white));
            mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTextColor(getResources().getColor(R.color.white));
        }
         /*else {
            isColorPickerClicked = false;
            if(mPentoolColor!=null){
                mPentoolColor.setBackgroundColor(getResources().getColor(R.color.transparent));
                mPentoolColor.setTextColor((Color.parseColor(readerThemeSettingVo.getReader().
                        getDayMode().getPentool().getToolbar().getIconsColor())));
            }
        }*/
    }


    private void addTeacherReviewTopBar() {

        mTeacherEraser = new KitabooActionItemView(this);
        mTeacherUndo = new KitabooActionItemView(this);
        mTeacherRedo = new KitabooActionItemView(this);
        mTeacherPrevious = new KitabooActionItemView(this);
        mTeacherNext = new KitabooActionItemView(this);
        mTeacherReviewGreen = new KitabooActionItemView(this);
        mTeacherReviewRed = new KitabooActionItemView(this);
        mTeacherReviewDone = new KitabooActionItemView(this);
        mTeacherReviewFirstname = new KitabooActionItemView(this);
        mTeacherReviewPage = new KitabooActionItemView(this);
        mTeacherReviewProfileImage = new ImageView(PlayerActivity.this);
        mTeacherClearAll = new KitabooActionItemView(this);

        if (isMobile) {
            setTopActionbar(mTeacherPrevious, R.id.teacher_review_previous, "C", CustomPlayerUIConstants.TEACHER_ACTIONBAR_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

            setTopActionbar(mTeacherReviewPage, R.id.teacher_review_page, "", "Page", mPentoolToolbarItemColor, Gravity.LEFT, 20, 12);

            setTopActionbar(mTeacherNext, R.id.teacher_review_next, "E", CustomPlayerUIConstants.TEACHER_ACTIONBAR_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

            setCustomViewActionbar(mTeacherReviewProfileImage, R.id.teacher_review_profile_image, "", mPentoolToolbarItemColor, Gravity.RIGHT, 100);

            setTopActionbar(mTeacherReviewFirstname, R.id.teacher_review_firstname, "", " ", mPentoolToolbarItemColor, Gravity.RIGHT, 30, 15);

            setBottomActionbar(mTeacherReviewGreen, R.id.teacher_review_green, "F", CustomPlayerUIConstants.PT_COLOR_IC_TEXT, (Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTeacherSettings().getPen2Color())), Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_bottombar_margin), 18);

            setBottomActionbar(mTeacherReviewRed, R.id.teacher_review_red, "F", CustomPlayerUIConstants.PT_COLOR_IC_TEXT, (Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTeacherSettings().getPen1Color())), Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_bottombar_margin), 18);

            mTeacherReviewRed.setPadding(2, 2, 2, 2);
            drawable.setShape(GradientDrawable.OVAL);
            drawable.setStroke(2, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().
                    getPentool().getToolbar().getSelectedIconBackground()));
            mTeacherReviewRed.setBackgroundDrawable(drawable);

            setBottomActionbar(mTeacherEraser, R.id.teacher_review_eraser, "D", CustomPlayerUIConstants.TEACHER_ACTIONBAR_ERASER, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_bottombar_margin), 20);

            setBottomActionbar(mTeacherUndo, R.id.teacher_review_undo, "A", "<", mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_bottombar_margin), 20);

            setBottomActionbar(mTeacherClearAll, R.id.teacher_review_clear_all, "", CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_bottombar_margin), 20);

            setBottomActionbar(mTeacherReviewDone, R.id.teacher_review_done, "G", getResources().getString(R.string.done), mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_bottombar_margin), 15);


        } else {


            setCustomViewActionbar(mTeacherReviewProfileImage, R.id.teacher_review_profile_image, "", mPentoolToolbarItemColor, Gravity.LEFT, 60);

            setTopActionbar(mTeacherReviewFirstname, R.id.teacher_review_firstname, "", "Page", mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 15);

            setTopActionbar(mTeacherReviewGreen, R.id.teacher_review_green, "F", CustomPlayerUIConstants.PT_COLOR_IC_TEXT, (Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTeacherSettings().getPen2Color())), Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);
            mTeacherReviewGreen.setPadding(2, 2, 2, 2);

            setTopActionbar(mTeacherReviewRed, R.id.teacher_review_red, "F", CustomPlayerUIConstants.PT_COLOR_IC_TEXT, (Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getTeacherSettings().getPen1Color())), Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);

            mTeacherReviewRed.setPadding(2, 2, 2, 2);
            drawable.setShape(GradientDrawable.OVAL);
            drawable.setStroke(2, Color.parseColor(readerThemeSettingVo.getReader().getDayMode().getPentool().getToolbar().getSelectedIconBackground()));
            mTeacherReviewRed.setBackgroundDrawable(drawable);

            setTopActionbar(mTeacherPrevious, R.id.teacher_review_previous, "C", CustomPlayerUIConstants.TEACHER_ACTIONBAR_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);

            setTopActionbar(mTeacherReviewPage, R.id.teacher_review_page, "", "Page", mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 13);

            setTopActionbar(mTeacherNext, R.id.teacher_review_next, "E", CustomPlayerUIConstants.TEACHER_ACTIONBAR_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);

            setTopActionbar(mTeacherEraser, R.id.teacher_review_eraser, "D", CustomPlayerUIConstants.TEACHER_ACTIONBAR_ERASER, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);

            setTopActionbar(mTeacherUndo, R.id.teacher_review_undo, "", "<", mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);

            //setTopActionbar(mTeacherRedo, R.id.teacher_review_redo, " ", ">", mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin),20);

            setTopActionbar(mTeacherClearAll, R.id.teacher_review_clear_all, "", CustomPlayerUIConstants.TEACHER_ACTIONBAR_CLEARALL, mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);

            setTopActionbar(mTeacherReviewDone, R.id.teacher_review_done, "", getResources().getString(R.string.done), mPentoolToolbarItemColor, Gravity.LEFT, getResources().getInteger(R.integer.teacher_review_topbar_margin), 20);
        }
        topActionbar.setBackgroundColor(mPentoolToolbarBackgroundColor);
       /* topActionbar.setBackgroundDrawable(Utils.getRectAngleDrawable(mPentoolToolbarBackgroundColor,
                new float[]{2, 2, 2, 2, 2, 2, 2, 2}, 1, Color.parseColor(themeUserSettingVo.getmKitabooMainColor())));*/
        topActionbar.build();
        bottomActionbar.build();

    }

    private void addReadAloudTopBar() {

        mReadSpeed = new KitabooActionItemView(this);
        mReadPause = new KitabooActionItemView(this);
        mReadNext = new KitabooActionItemView(this);
        mReadPrevoius = new KitabooActionItemView(this);
        mReadClose = new KitabooActionItemView(this);
        mSpeedInc = new KitabooActionItemView(this);
        mSpeedDec = new KitabooActionItemView(this);

        /*  As of now below functionality not implemented so making Visibility gone*/

        // mReadSpeed.setVisibility(View.GONE);
        mReadNext.setVisibility(View.GONE);
        mReadPrevoius.setVisibility(View.GONE);

        if (mReaderType == EBookType.REFLOWEPUB) {

            if (isMobile) {
                setTopActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (!audioIsPause)
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                else
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);


                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                    setTopActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 300, 18);
                } else {
                    setTopActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 50, 18);
                }

                setTopActionbar(mReadSpeed, R.id.read_speed, "", "1x", mPentoolToolbarItemColor, Gravity.LEFT, 20, 20);

                setTopActionbar(mSpeedInc, R.id.speed_inc, "SI", CustomPlayerUIConstants.SPEED_INC, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            } else {

                setTopActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (!audioIsPause)
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                else
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                    setTopActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 400, 18);
                } else {
                    setTopActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 150, 18);
                }

                setTopActionbar(mReadSpeed, R.id.read_speed, "", "1x", mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mSpeedInc, R.id.speed_inc, "SI", CustomPlayerUIConstants.SPEED_INC, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            }

        } else {
            if (isMobile) {
                setTopActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (!audioIsPause)
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                else
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadSpeed, R.id.read_speed, "", "SPEED", mPentoolToolbarItemColor, Gravity.CENTER_HORIZONTAL, 20, 20);

                setTopActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            } else {

                setTopActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (!audioIsPause)
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                else
                    setTopActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setTopActionbar(mReadSpeed, R.id.read_speed, "", "SPEED", mPentoolToolbarItemColor, Gravity.CENTER_HORIZONTAL, 20, 20);

                setTopActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            }
        }

        topActionbar.setBackgroundColor(mPentoolToolbarBackgroundColor);
        topActionbar.build();
        // bottomActionbar.build();

    }

    private void addReadAloudBottomBar() {

        mReadSpeed = new KitabooActionItemView(this);
        mReadPause = new KitabooActionItemView(this);
        mReadNext = new KitabooActionItemView(this);
        mReadPrevoius = new KitabooActionItemView(this);
        mReadClose = new KitabooActionItemView(this);
        mSpeedInc = new KitabooActionItemView(this);
        mSpeedDec = new KitabooActionItemView(this);

        if (mReaderType == EBookType.FIXEDKITABOO || audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
            mASYellowCol = new KitabooActionItemView(this);
            mASRedCol = new KitabooActionItemView(this);
            mASVioletCol = new KitabooActionItemView(this);
            mASGreenCol = new KitabooActionItemView(this);
            mASBlueCol = new KitabooActionItemView(this);
            mAScolorPicker = new KitabooActionItemView(this);
            mColorPickerView = new CustomColorPickerView(PlayerActivity.this);
            initializeColorPickerButton();
        }

        /*  As of now below functionality not implemented so making Visibility gone*/

        mReadNext.setVisibility(View.GONE);
        mReadPrevoius.setVisibility(View.GONE);

        if (mReaderType == EBookType.REFLOWEPUB) {

            if (isMobile) {
                setBottomReadAloudActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);


                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                    setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                    if (!audioIsPause)
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                    else
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 40, 18);
                } else {
                    if (!audioIsPause)
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                    else
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                    setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                }


                setBottomReadAloudActionbar(mReadSpeed, R.id.read_speed, "", "1x", mPentoolToolbarItemColor, Gravity.LEFT, 20, 20);

                setBottomReadAloudActionbar(mSpeedInc, R.id.speed_inc, "SI", CustomPlayerUIConstants.SPEED_INC, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            } else {

                setBottomReadAloudActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (!audioIsPause)
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                else
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);


                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 40, 18);
                } else {
                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 40, 18);
                }

                setBottomReadAloudActionbar(mReadSpeed, R.id.read_speed, "", "1x", mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mSpeedInc, R.id.speed_inc, "SI", CustomPlayerUIConstants.SPEED_INC, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            }

        } else if (mReaderType == EBookType.FIXEDKITABOO || audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
            if (isMobile) {
                setBottomReadAloudActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 10, 18);


                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                    if (!audioIsPause)
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                    else
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                    setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 40, 18);
                } else {
                    if (!audioIsPause)
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 10, 18);
                    else
                        setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 10, 18);

                    setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 10, 18);
                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 10, 18);
                }


                setBottomReadAloudActionbar(mReadSpeed, R.id.read_speed, "", "1x", mPentoolToolbarItemColor, Gravity.LEFT, 20, 20);

                setBottomReadAloudActionbar(mSpeedInc, R.id.speed_inc, "SI", CustomPlayerUIConstants.SPEED_INC, mPentoolToolbarItemColor, Gravity.LEFT, 0, 18);

                // setBottomReadAloudActionbar(mASYellowCol, R.id.yellow_col, "YC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_orange_col)), Gravity.LEFT, 0, 18);
                setCustomViewActionbar(mColorPickerView, R.id.color_picker, "",
                        mPentoolToolbarItemColor, Gravity.LEFT, 40, bottomActionbar);

                /*setBottomReadAloudActionbar(mASRedCol, R.id.red_col, "RC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_pink_col)), Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mASVioletCol, R.id.violet_col, "VC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_purple_col)), Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mASGreenCol, R.id.green_col, "GC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_green_col)), Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mASBlueCol, R.id.blue_col, "BC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_blue_col)), Gravity.LEFT, 0, 18);*/
                //setBottomReadAloudActionbar(mAScolorPicker, R.id.color_picker, "CP", CustomPlayerUIConstants.AS_COLOR_PICKER, mPentoolToolbarItemColor, Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 0, 18);

            } else {

                setBottomReadAloudActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 5, 18);

                if (!audioIsPause)
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 5, 18);
                else
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 5, 18);

                setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 5, 18);

                if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {

                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 40, 18);
                } else {
                    setBottomReadAloudActionbar(mSpeedDec, R.id.speed_dec, "SD", CustomPlayerUIConstants.SPEED_DEC, mPentoolToolbarItemColor, Gravity.LEFT, 40, 18);
                }

                setBottomReadAloudActionbar(mReadSpeed, R.id.read_speed, "", "1x", mPentoolToolbarItemColor, Gravity.LEFT, 5, 18);

                setBottomReadAloudActionbar(mSpeedInc, R.id.speed_inc, "SI", CustomPlayerUIConstants.SPEED_INC, mPentoolToolbarItemColor, Gravity.LEFT, 5, 18);

                setBottomReadAloudActionbar(mASYellowCol, R.id.yellow_col, "YC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_orange_col)), Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mASRedCol, R.id.red_col, "RC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_pink_col)), Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mASVioletCol, R.id.violet_col, "VC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_purple_col)), Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mASGreenCol, R.id.green_col, "GC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_green_col)), Gravity.LEFT, 0, 18);
                setBottomReadAloudActionbar(mASBlueCol, R.id.blue_col, "BC", CustomPlayerUIConstants.AS_UNSELECTED_COLOR, Color.parseColor(getResources().getString(R.string.as_menu_blue_col)), Gravity.LEFT, 0, 18);

                setBottomReadAloudActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 5, 18);

            }
        } else {
            if (isMobile) {
                setBottomReadAloudActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (!audioIsPause)
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                else
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mReadSpeed, R.id.read_speed, "", "SPEED", mPentoolToolbarItemColor, Gravity.CENTER_HORIZONTAL, 20, 20);

                setBottomReadAloudActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            } else {

                setBottomReadAloudActionbar(mReadPrevoius, R.id.read_previous, "RP", CustomPlayerUIConstants.READ_PREVIOUS, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mReadNext, R.id.read_next, "RPN", CustomPlayerUIConstants.READ_NEXT, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                if (!audioIsPause)
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PAUSE, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);
                else
                    setBottomReadAloudActionbar(mReadPause, R.id.read_pause, "RPA", CustomPlayerUIConstants.READ_PLAY, mPentoolToolbarItemColor, Gravity.LEFT, 20, 18);

                setBottomReadAloudActionbar(mReadSpeed, R.id.read_speed, "", "SPEED", mPentoolToolbarItemColor, Gravity.CENTER_HORIZONTAL, 20, 20);

                setBottomReadAloudActionbar(mReadClose, R.id.read_close, "RPC", CustomPlayerUIConstants.READ_CLOSE, mPentoolToolbarItemColor, Gravity.RIGHT, 20, 18);

            }
        }

        bottomActionbar.setBackgroundColor(mPentoolToolbarBackgroundColor);
        bottomActionbar.build();
        // bottomActionbar.build();

    }

    private void initializeColorPopupButton() {
        mColorPopupButton.getColorPopupText().setTypeface(topActionbar.defaultActionbarTypeface(this));
        mColorPopupButton.getColorPopupText().setText(CustomPlayerUIConstants.PT_DEFAULT_IC_TEXT);
        mColorPopupButton.getColorPopupText().setTextColor(mTopActionBarItemColor);
        mColorPopupButton.getColorPopupText().setGravity(Gravity.CENTER);
        mColorPopupButton.getColorPopupText().setAllCaps(false);
        mColorPopupButton.getColorPopupText().setTextSize(25);
        if (GlobalDataManager.getInstance().getPenColor() != null && !GlobalDataManager.getInstance().getPenColor().isEmpty()) {
            int tempColor = 0;
            if (GlobalDataManager.getInstance().getPenColor().contains("#")) {
                tempColor = Color.parseColor(GlobalDataManager.getInstance().getPenColor());
            } else {
                tempColor = Color.parseColor("#" + GlobalDataManager.getInstance().getPenColor());
            }
            mColorPopupButton.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setBackgroundColor(tempColor);
            mPenSelectedColor = tempColor;
        } else {
            mColorPopupButton.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setBackgroundColor(Color.parseColor("#000000"));
            mPenSelectedColor = Color.parseColor("#000000");
        }

    }

    private void initializeColorPickerButton() {
        mColorPicker = Color.parseColor(getResources().getString(R.string.as_menu_orange_col));
        mColorPickerView.getColorPopupText().setTypeface(bottomActionbar.defaultActionbarTypeface(this));
        mColorPickerView.getColorPopupText().setText(CustomPlayerUIConstants.AS_UNSELECTED_COLOR);
        //mColorPickerView.getColorPopupText().setGravity(Gravity.CENTER);
        mColorPickerView.getColorPopupText().setAllCaps(false);
        mColorPickerView.getColorPopupText().setTextSize(18);
        mColorPickerView.getColorPopupText().setTextColor(mColorPicker);
        // mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setBackgroundColor(Color.parseColor("#000000"));

        mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).post(() -> {
            mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTextSize(10);
            mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTypeface(bottomActionbar.defaultActionbarTypeface(this));
            mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setText(CustomPlayerUIConstants.AS_COLOR_PICKER);
            mColorPickerView.getColorIndicator(penHelper.getCurrPenColorSizeInt()).setTextColor(mPentoolToolbarItemColor);
        });
    }

    /*
    Handle onStickyNoteDataSaveToDataBase()
     */

    /**
     * @param _mNoteVO Save StickyNoteData ToDataBase
     */
    @Override
    public void onStickyNoteDataSaveToDataBase(HighlightVO _mNoteVO, UserClassVO _userPageVO) {


        // sticky and contextual
        if (_mNoteVO.getUserShareColl().size() > 0) {
            _mNoteVO.setNoteShared(true);
        }
        if (_mNoteVO != null) {


            _mNoteVO.setSyncStatus(false);
            _mNoteVO.setSharedDataChanged(true);
            if (_mNoteVO.getUGCID() > 0) {
                _mNoteVO.setMode(Constants.UGC_ITEM_MODE_MODIFIED);
            } else {
                _mNoteVO.setMode(Constants.UGC_ITEM_MODE_NEW);
            }
            if (_mNoteVO.getStartWordId() == -1) {
                if (_mNoteVO.getLocalID() == 0) {
                    addHighlightToDB(_mNoteVO, _userPageVO);
                } else {
                    updateHighlightToDB(_mNoteVO, _userPageVO);
                }
            } else {
                if (_mNoteVO.isFirstHighlightNote() && _mNoteVO.isImportant()) {
                    _userPageVO.setTotalImpHightlightCreated(_userPageVO.getTotalImpHightlightCreated() == 0 ? 0
                            : _userPageVO.getTotalImpHightlightCreated() - 1);
                    _userPageVO.setTotalImpHighlightsShared(_userPageVO.getTotalImpHighlightsShared() == 0 ? 0
                            : _userPageVO.getTotalImpHighlightsShared() - 1);
                } else {
                    _userPageVO.setTotalNormalHightlightCreated(_userPageVO.getTotalNormalHightlightCreated() == 0 ? 0
                            : _userPageVO.getTotalNormalHightlightCreated() - 1);
                    _userPageVO.setTotalHighlightsShared(_userPageVO.getTotalHighlightsShared() == 0 ? 0
                            : _userPageVO.getTotalHighlightsShared() - 1);
                }
                updateHighlightToDB(_mNoteVO, _userPageVO);
            }
            saveHighlight(_mNoteVO);
            getHighlightFromDB(_mNoteVO.getFolioID());
            renderView.drawNote(_mNoteVO);
            if (mStickyNotePopup != null) {
                mStickyNotePopup.dismiss();
            }
        }

    }

    private void addHighlightToDB(HighlightVO data, UserClassVO userPageVO) {
        setNoteCreatedSharedCount(TYPE_INCREASE, data, userPageVO);
        if (data.getUserShareColl().size() > 0) {
            data.setNoteShared(true);
        }
      /*  DatabaseManager.getInstance(this).insertHighlight(data,
                bookId,
                userID);*/
    }

    private void updateHighlightToDB(HighlightVO data, UserClassVO userPageVO) {
        setNoteCreatedSharedCount(TYPE_INCREASE, data, userPageVO);
        if (data.getUserShareColl().size() > 0) {
            data.setNoteShared(true);
        }
       /* DatabaseManager.getInstance(this).updateHighlight(data,
                userID);*/
    }

    private void setNoteCreatedSharedCount(String type, HighlightVO data, UserClassVO userPageVO) {
        int currentNoteCount = userPageVO.getTotalNotesCreated();
        int noteDeletedCount = userPageVO.getTotalNotesDeleted();
        int currentNoteShareCount = userPageVO.getTotalNotesShared();

        int currentHighlightShareCount = userPageVO.getTotalHighlightsShared();
        //int highlightDeletedCount = userPageVO.getHighlight
        if (type.equals(TYPE_INCREASE)) {
            userPageVO.setTotalNotesCreated(currentNoteCount + 1);
            if (!data.isNoteShared() && data.getUserShareColl().size() > 0) {
                userPageVO.setTotalNotesShared(currentNoteShareCount + 1);
                if (data.isImportant()) {
                    userPageVO.setTotalImpHighlightsShared(currentHighlightShareCount + 1);
                } else {
                    userPageVO.setTotalHighlightsShared(currentHighlightShareCount + 1);
                }

            }
        } else if (type.equals(TYPE_SHARED)) {
            if (!data.isNoteShared() && data.getUserShareColl().size() > 0) {
                userPageVO.setTotalNotesShared(currentNoteShareCount + 1);
                userPageVO.setTotalHighlightsShared(currentHighlightShareCount + 1);
            }
            if (data.isFirstHighlightNote()) {
                userPageVO.setTotalNotesCreated(currentNoteCount + 1);
                data.setFirstHighlightNote(false);
            }
        } else if (type.equals(TYPE_DECREASE)) {
            if (currentNoteCount >= 0) {
                currentNoteShareCount = currentNoteShareCount - 1;
                userPageVO.setTotalNotesDeleted(noteDeletedCount + 1);
                if (currentNoteShareCount > 0) {
                    userPageVO.setTotalNotesShared(currentNoteShareCount);
                }
            }

        }

    }

    /**
     * @param _mNoteVO Save MydataHiglightedNotetoDatabase
     */
    @Override
    public void saveMydataHiglightedNotetoDatabase(HighlightVO _mNoteVO, UserClassVO _userPageVO, CustomMyDataFragment mUgcHolder) {
        if (_mNoteVO.getUserShareColl().size() > 0) {
            _mNoteVO.setNoteShared(true);
        }
        if (_mNoteVO != null) {
            _mNoteVO.setSyncStatus(false);
            _mNoteVO.setSharedDataChanged(true);
            if (_mNoteVO.getUGCID() > 0) {
                _mNoteVO.setMode(Constants.UGC_ITEM_MODE_MODIFIED);
            } else {
                _mNoteVO.setMode(Constants.UGC_ITEM_MODE_NEW);
            }
            if (_mNoteVO.getStartWordId() == -1) {
                if (_mNoteVO.getLocalID() == 0) {
                    addHighlightToDB(_mNoteVO, _userPageVO);
                } else {
                    updateHighlightToDB(_mNoteVO, _userPageVO);
                }
            } else {
                if (_mNoteVO.isFirstHighlightNote() && _mNoteVO.isImportant()) {
                    _userPageVO.setTotalImpHightlightCreated(_userPageVO.getTotalImpHightlightCreated() == 0 ? 0
                            : _userPageVO.getTotalImpHightlightCreated() - 1);
                    _userPageVO.setTotalImpHighlightsShared(_userPageVO.getTotalImpHighlightsShared() == 0 ? 0
                            : _userPageVO.getTotalImpHighlightsShared() - 1);
                } else {
                    _userPageVO.setTotalNormalHightlightCreated(_userPageVO.getTotalNormalHightlightCreated() == 0 ? 0
                            : _userPageVO.getTotalNormalHightlightCreated() - 1);
                    _userPageVO.setTotalHighlightsShared(_userPageVO.getTotalHighlightsShared() == 0 ? 0
                            : _userPageVO.getTotalHighlightsShared() - 1);
                }
                updateHighlightToDB(_mNoteVO, _userPageVO);
            }
            mUgcHolder.setData(DatabaseManager.getInstance(this).getHighlight(userID, bookId));
            mUgcHolder.openMainScreen();
        }
    }

    @Override
    public void saveMydataHiglightedNotetoDatabase(HighlightVO _mNoteVO, UserClassVO _userPageVO, CustomMyDataTabFragment mUgcHolder) {
        if (_mNoteVO.getUserShareColl().size() > 0) {
            _mNoteVO.setNoteShared(true);
        }
        if (_mNoteVO != null) {
            _mNoteVO.setSyncStatus(false);
            _mNoteVO.setSharedDataChanged(true);
            if (_mNoteVO.getUGCID() > 0) {
                _mNoteVO.setMode(Constants.UGC_ITEM_MODE_MODIFIED);
            } else {
                _mNoteVO.setMode(Constants.UGC_ITEM_MODE_NEW);
            }
            if (_mNoteVO.getStartWordId() == -1) {
                if (_mNoteVO.getLocalID() == 0) {
                    addHighlightToDB(_mNoteVO, _userPageVO);
                } else {
                    updateHighlightToDB(_mNoteVO, _userPageVO);
                }
            } else {
                if (_mNoteVO.isFirstHighlightNote() && _mNoteVO.isImportant()) {
                    _userPageVO.setTotalImpHightlightCreated(_userPageVO.getTotalImpHightlightCreated() == 0 ? 0
                            : _userPageVO.getTotalImpHightlightCreated() - 1);
                    _userPageVO.setTotalImpHighlightsShared(_userPageVO.getTotalImpHighlightsShared() == 0 ? 0
                            : _userPageVO.getTotalImpHighlightsShared() - 1);
                } else {
                    _userPageVO.setTotalNormalHightlightCreated(_userPageVO.getTotalNormalHightlightCreated() == 0 ? 0
                            : _userPageVO.getTotalNormalHightlightCreated() - 1);
                    _userPageVO.setTotalHighlightsShared(_userPageVO.getTotalHighlightsShared() == 0 ? 0
                            : _userPageVO.getTotalHighlightsShared() - 1);
                }
                updateHighlightToDB(_mNoteVO, _userPageVO);
            }
            mUgcHolder.setData(DatabaseManager.getInstance(this).getHighlight(userID, bookId));
            mUgcHolder.openMainScreen();
        }
    }

    /**
     * @param arrayList                : Current marked user list
     * @param iServiceResponseListener : service callback
     */
    @Override
    public void syncUserForHighlightSettingService(ArrayList<IClass> arrayList, IServiceResponseListener iServiceResponseListener) {
        mServicehandler.sendHighlightSettingRequest(arrayList, bookId, iServiceResponseListener);
    }

    /**
     * Responsible to save the lastvisited page
     *
     * @param lastvisitedpage Last visited object
     */
    @Override
    public void saveLastVisitedPage(IPage lastvisitedpage) {

        //Save last visited data in bookshelf database or any type of storage
        if (null != lastvisitedpage) {
            setLastVisitedPageID(lastvisitedpage.getFolioID());
        }
    }

    private boolean setLastVisitedPageID(String s) {
        String data = s;
        if (!data.isEmpty()) {
            SDKPreferences mSharedPreferences = SDKPreferences.getInstance(getBaseContext());
            mSharedPreferences.savePreferences(bookId + "", data);
        }
        return false;
    }

    private String getLastVisitedPageID() {

        SDKPreferences mSharedPreferences = SDKPreferences.getInstance(getBaseContext());
        if (mSharedPreferences.getPreferences(bookId + "").isEmpty()) {
            return "0";
        } else {
            return mSharedPreferences.getPreferences(bookId + "");
        }

    }

    /**
     * Callback for closing TeacherAssesmentbar
     *
     * @param mAnnotationpages All data of teacher review-mode
     */
    @Override
    public void closeTeacherAssesmentbar(ArrayList<UserPageVO> mAnnotationpages) {
        cleanAllReviewData();
        if (mAnnotationpages != null) {
            mAnnotationpages.clear();
        }
        int pageid = mCurrentPageData != null ? mCurrentPageData.getPageID() : 1;
        //navigatePageByFolioId(currentFoliId, pageid);
        String[] pageCollection = new String[2];
        if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
            pageCollection[0] = currentFoliId;
            pageCollection[1] = currentFoliIdPrev;
        } else
            pageCollection[0] = currentFoliId;


       /* for (int i = 0; i < pageCollection.length; i++) {
            if (pageCollection[i] != null) {
                getPenFromDB(pageCollection[i]);
                getHighlightFromDB(pageCollection[i]);
                getDataFromDB(pageVo);
                renderView.loadAsset(AssetType.HighlightNote, pageCollection[i]);
            }
        }*/
        for (IPage page : mListOfLoadedPage) {
            setMarksUpsList(page);
            getPenFromDB(page.getFolioID());
            getHighlightFromDB(page.getFolioID());
            getBookmarkDataFromDB(page, page.getFolioID());
            getProtractorFromDB(page.getFolioID());
            renderView.loadAsset(AssetType.HighlightNote, page.getFolioID());
        }


      /*  new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                //renderView.loadAsset(AssetType.HighlightNote,currentFoliId);
                getPenFromDB(currentFoliId);
                getHighlightFromDB(currentFoliId);
                getBookmarkDataFromDB(pageVo);
                penHelper.refreshAssestOnPage();
            }
        }, 50);*/
        /*new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                SDKManager.getInstance().setReviewMode(false);
                SDKManager.getInstance().refreshHighLightOnPage();
            }
        }, 2000);*/
    }

    public void navigatePageForTeacherReview(String Pageno) {
        int pageidforgoto = getCurrPageIDByDisplayNum(Pageno);
        if (isMobile) {
            if (pageidforgoto > -1) {
                renderView.navigatePage(pageidforgoto, "", "", true, false);
            } else {
                if (!SDKManager.getInstance().isNewTeacherReviewModeOn())
                    Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                else
                    Toast.makeText(this, getResources().getString(R.string.page_not_exist), Toast.LENGTH_SHORT).show();
            }
        } else {
            if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                if (pageidforgoto > -1) {
                    if (pageidforgoto <= 1) {
                        pageidforgoto = 0;
                        renderView.navigatePage(pageidforgoto, "", "", true, false);
                    } else {
                        pageidforgoto = pageidforgoto / 2;
                        renderView.navigatePage(pageidforgoto + 1, "", "", true, false);
                    }
                } else {
                    if (!SDKManager.getInstance().isNewTeacherReviewModeOn())
                        Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                    else
                        Toast.makeText(this, getResources().getString(R.string.page_not_exist), Toast.LENGTH_SHORT).show();
                }
            } else {
                if (pageidforgoto > -1) {
                    renderView.navigatePage(pageidforgoto, "", "", true, false);
                } else {
                    if (!SDKManager.getInstance().isNewTeacherReviewModeOn())
                        Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                    else
                        Toast.makeText(this, getResources().getString(R.string.page_not_exist), Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    /**
     * Callback for loading Current Page object to review
     *
     * @param mCurrentAnnotationpage Current Page object to review
     */
    @Override
    public void loadReviewdataToPage(final UserPageVO mCurrentAnnotationpage) {
        if (com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getCurrentTeacherAssesment() == 0)
            setNextAndPreviousDisable(false, true);
        final ArrayList<String> activeLandscapePages = new ArrayList<>();
        SDKManager.getInstance().setNewTeacherReviewModeOn(true);
        this.mCurrentAnnotationpage = mCurrentAnnotationpage;
        replaceActionBarwithTeacherReviewBar(true);
        if (mTeacherHolder != null)
            mTeacherHolder.dismiss();
        int time = 0;
        if (currentFoliId != mCurrentAnnotationpage.getFolioID() || currentFoliIdPrev != mCurrentAnnotationpage.getFolioID()) {
            navigatePageForTeacherReview(mCurrentAnnotationpage.getFolioID());
            time = 500;
        } else {
            time = 50;
        }

        final int pageid = getCurrPageIDByDisplayNum(mCurrentAnnotationpage.getFolioID());


        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if (PlayerActivity.this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    if (pageid > 0) {
                        if (isMobile) {
                            SDKManager.getInstance().setAllPenMarkerVO(mCurrentAnnotationpage.getFolioID(), mCurrentAnnotationpage.getPenColl());
                            renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    setTeacherTopBarDetails();
                                }
                            }, 100);
                        } else {
                            if (pageid % 2 == 0) {
                                activeLandscapePages.add(mCurrentAnnotationpage.getFolioID());
                                setTeacherTopBarDetails();
                                SDKManager.getInstance().setAllPenMarkerVO(mCurrentAnnotationpage.getFolioID(), mCurrentAnnotationpage.getPenColl());
                                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                                new Handler().postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        ArrayList<UserPageVO> allAssessmentPages = GlobalDataManager.getInstance().getAssessmentPenMarks();
                                        int nextPageIndex = com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getCurrentTeacherAssesment() + 1;
                                        if (nextPageIndex > 0 && nextPageIndex < allAssessmentPages.size()) {
                                            String nextFolioId = allAssessmentPages.get(nextPageIndex).getFolioID();
                                            if (nextFolioId != null && !nextFolioId.isEmpty() && currentFoliId.equalsIgnoreCase(nextFolioId)) {
                                                activeLandscapePages.add(nextFolioId);
                                                SDKManager.getInstance().setActiveLandscapePages(activeLandscapePages);

                                                if (allAssessmentPages.size() > nextPageIndex && nextFolioId.equalsIgnoreCase(allAssessmentPages.get(nextPageIndex).getFolioID())) {
                                                    SDKManager.getInstance().setAllPenMarkerVO(nextFolioId, allAssessmentPages.get(nextPageIndex).getPenColl());
                                                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, nextFolioId);

                                                    com.hurix.commons.notifier.GlobalDataManager.getInstance().setNextCountRequired(true);
                                                    if (mTeacherHolder != null)
                                                        mTeacherHolder.changeCount();
                                                }
                                            } else {
                                                ArrayList<PentoolVO> listofemptypenmarks = new ArrayList<>();
                                                SDKManager.getInstance().setAllPenMarkerVO(currentFoliId, listofemptypenmarks);
                                                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, currentFoliId);
                                            }
                                        }

                                    }
                                }, 1000);
                                SDKManager.getInstance().setActiveLandscapePages(activeLandscapePages);
                            } else {
                                activeLandscapePages.add(mCurrentAnnotationpage.getFolioID());
                                setTeacherTopBarDetails();
                                SDKManager.getInstance().setAllPenMarkerVO(mCurrentAnnotationpage.getFolioID(), mCurrentAnnotationpage.getPenColl());
                                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                                new Handler().postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        int prevPageIndex = com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getCurrentTeacherAssesment() - 1;
                                        ArrayList<UserPageVO> allAssessmentPages = GlobalDataManager.getInstance().getAssessmentPenMarks();
                                        if (prevPageIndex > 0 && prevPageIndex < allAssessmentPages.size()) {
                                            String prevFolioId = allAssessmentPages.get(prevPageIndex).getFolioID();
                                            if (prevFolioId != null && !prevFolioId.isEmpty() && currentFoliIdPrev.equalsIgnoreCase(prevFolioId)) {
                                                activeLandscapePages.add(prevFolioId);
                                                SDKManager.getInstance().setActiveLandscapePages(activeLandscapePages);
                                                if (prevPageIndex >= 0 && prevFolioId.equalsIgnoreCase(allAssessmentPages.get(prevPageIndex).getFolioID())) {
                                                    SDKManager.getInstance().setAllPenMarkerVO(prevFolioId, allAssessmentPages.get(prevPageIndex).getPenColl());
                                                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, prevFolioId);
                                                    com.hurix.commons.notifier.GlobalDataManager.getInstance().setNextCountRequired(false);
                                                    if (mTeacherHolder != null)
                                                        mTeacherHolder.changeCount();
                                                }
                                            } else {
                                                ArrayList<PentoolVO> listofemptypenmarks = new ArrayList<>();
                                                SDKManager.getInstance().setAllPenMarkerVO(currentFoliIdPrev, listofemptypenmarks);
                                                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, currentFoliIdPrev);
                                            }
                                        }

                                    }
                                }, 1000);
                                SDKManager.getInstance().setActiveLandscapePages(activeLandscapePages);
                            }

                        }
                    }
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                           /* if (!DBController.getInstance(PlayerActivity.this).getManager().isBookPlayerHelpScreenSeen(UserController
                                    .getInstance(PlayerActivity.this).getUserVO().getUserID()) || Utils.getSharedPreferenceBooleanValue(getBaseContext(), Constants.HELPSCREEN_REQUIRED_REVIEW, false)) {
                                if (SDKManager.getInstance().isNewTeacherReviewModeOn()) {
                                    helpScreenViewsReviewLandscape();
                                }
                            }*/
                        }
                    }, 500);
                } else {
                    SDKManager.getInstance().setAllPenMarkerVO(mCurrentAnnotationpage.getFolioID(), mCurrentAnnotationpage.getPenColl());
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
                            setTeacherTopBarDetails();
                            new Handler().postDelayed(new Runnable() {
                                @Override
                                public void run() {
                                    if (getResources().getBoolean(R.bool.isHelpvisible)) {
                                        /*if (!DBController.getInstance(PlayerActivity.this).getManager().isBookPlayerHelpScreenSeen(UserController
                                                .getInstance(PlayerActivity.this).getUserVO().getUserID()) || Utils.getSharedPreferenceBooleanValue(getBaseContext(), Constants.HELPSCREEN_REQUIRED_REVIEW, false)) {
                                            if (SDKManager.getInstance().isNewTeacherReviewModeOn())
                                                helpScreenViewsReview();
                                        }*/

                                    }
                                }
                            }, 500);
                        }
                    }, 500);


                }
            }
        }, time);

       /* new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, mCurrentAnnotationpage.getFolioID());
               // penHelper.refreshAssestOnPage();
            }
        }, 50);*/
    }

    private String getNextFoliId(String currentFoliId) {
        if (mTotalPage != null) {
            for (int i = 0; i < mTotalPage.size(); i++) {
                IPage vo = mTotalPage.get(i);
                String fname = vo.getFolioID();
                if (currentFoliId.equalsIgnoreCase(fname)) {
                    if (mTotalPage.size() > i + 1) {
                        IPage prevVo = mTotalPage.get(i + 1);
                        String prevFolioId = prevVo.getFolioID();
                        return null != prevFolioId ? prevFolioId : "";
                    }
                }
            }
            return "";
        }
        return "";
    }

    private String getNextASFoliId(String currentFoliId) {
        if (mTotalPage != null) {
            for (int i = 0; i < mTotalPage.size(); i++) {
                IPage vo = mTotalPage.get(i);
                String fname = vo.getFolioID();
                if (currentFoliId.equalsIgnoreCase(fname)) {
                    if (mTotalPage.size() > i) {
                        for (int j = i; j < mTotalPage.size(); j++) {
                            IPage prevVo = mTotalPage.get(j);
                            if (tempASFolioList.contains(prevVo.getFolioID()))
                                return null != prevVo.getFolioID() ? prevVo.getFolioID() : "";
                        }
                    }
                }
            }
            return "";
        }
        return "";
    }

    private String getPreviousFolioId(String currentFoliId) {
        if (mTotalPage != null) {
            for (int i = 0; i < mTotalPage.size(); i++) {
                IPage vo = mTotalPage.get(i);
                String fname = vo.getFolioID();
                if (i > 0 && currentFoliId.equalsIgnoreCase(fname)) {
                    IPage prevVo = mTotalPage.get(i - 1);
                    String prevFolioId = prevVo.getFolioID();
                    return null != prevFolioId ? prevFolioId : "";
                }
            }
            return "";
        }
        return "";
    }


    private void setTeacherTopBarDetails() {
        showTopBottomBar();
        showBottomBar();
        if (StudentListFragment.selectedStudentInfo != null) {
            mTeacherReviewFirstname.setText(StudentListFragment.selectedStudentInfo.getFirstName() + StudentListFragment.selectedStudentInfo.getLastName());
            mTeacherReviewFirstname.setSingleLine(false);
            mTeacherReviewFirstname.setEllipsize(TextUtils.TruncateAt.END);
            mTeacherReviewFirstname.setLines(1);
            if (StudentListFragment.selectedStudentInfo.getProfilePic().isEmpty()) {
                Bitmap defaultIcon = BitmapFactory.decodeResource(PlayerActivity.this.getResources(), R.drawable.default_icon);
                mTeacherReviewProfileImage.setImageBitmap(defaultIcon);
            } else {
                mTeacherReviewProfileImage.setImageResource(Integer.parseInt((StudentListFragment.selectedStudentInfo.getProfilePic())));
            }
        }

        if (!(mTeacherReviewPage == null) && !(currentFoliId.isEmpty()))
            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT || isMobile || currentFoliId.equalsIgnoreCase("1")) {
                mTeacherReviewPage.setText(getResources().getString(R.string.average_pages_read_per_session_unit) + " " + currentFoliId);
            } else {
                mTeacherReviewPage.setText(getResources().getString(R.string.average_pages_read_per_session_unit) + " " + currentFoliIdPrev + "-" + currentFoliId);
            }
    }

    /**
     * Sync Teacher data to Server
     *
     * @param learnerID                Userid
     * @param pentoolVOs               Pentool Object
     * @param linkVOs                  Links Object
     * @param iServiceResponseListener Service Callback Context
     */
    @Override
    public void sendTeacherDataForSyncing(long learnerID, ArrayList<PentoolVO> pentoolVOs, ArrayList<LinkVO> linkVOs, IServiceResponseListener iServiceResponseListener) {

        showOkAlert(getResources().getString(R.string.alert_successfully_submit_data));
        //call fetch ugc requst
        mServicehandler.sendRequestsubmitTeacherAnnotation(SDKManager.getInstance().getGetLocalBookData(), learnerID, bookId, pentoolVOs, linkVOs, bookVersion, iServiceResponseListener);
    }

    /**
     * Service Request for Student data to Review
     *
     * @param learnerID                User ID
     * @param iServiceResponseListener Service Callback Context
     */
    @Override
    public void sendRequestForUserData(long learnerID, IServiceResponseListener iServiceResponseListener) {
        mServicehandler.getStudentAnnotation(bookId, accountType, learnerID, bookVersion, iServiceResponseListener);
    }

    /**
     * Service Request for Student list to Review
     *
     * @param iServiceResponseListener Service Callback Context
     */
    @Override
    public void sendRequestForStudentList(IServiceResponseListener iServiceResponseListener) {
        mServicehandler.sendFetchBookClassRequest(userID, bookId, iServiceResponseListener);
    }

    private void navigatePageByFolioId(String folioId, int _pageid) {

        int pageid;
        if (!folioId.isEmpty()) {
            pageid = getCurrPageIDByDisplayNum(folioId);
        } else {
            pageid = _pageid;
        }

        if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand))) {
            if (pageid > -1) {
                if (pageid <= 1) {
                    pageid = 0;
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                    renderView.navigatePage(pageid, "", "", true, false);
                } else {
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                    if (isMobile) {
                        pageid = pageid;
                        renderView.navigatePage(pageid, "", "", true, false);
                    } else {
                        pageid = pageid / 2;
                        renderView.navigatePage(pageid + 1, "", "", true, false);
                    }
                    // pageid = pageid;
                    // renderView.navigatePage(pageid + 1, "", "", true, false);
                }
            } else {
                if (!SDKManager.getInstance().isReviewMode()) {
                    Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                }
            }
        } else {
            if (pageid > -1) {
                SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                renderView.navigatePage(pageid, "", "", true, false);
            } else {
                if (!SDKManager.getInstance().isReviewMode()) {
                    Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    private void navigatePageByPageId(int _pageid) {
        int pageid;
        pageid = _pageid;

        if (this.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand))) {
            if (pageid > -1) {
                if (pageid <= 1) {
                    pageid = 0;
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                    renderView.navigatePage(pageid, "", "", true, false);
                } else {
                    SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                    if (isMobile) {
                        pageid = pageid;
                        renderView.navigatePage(pageid, "", "", true, false);
                    } else {
                        pageid = pageid / 2;
                        renderView.navigatePage(pageid + 1, "", "", true, false);
                    }
                    // pageid = pageid;
                    // renderView.navigatePage(pageid + 1, "", "", true, false);
                }
            } else {
                if (!SDKManager.getInstance().isReviewMode()) {
                    Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                }
            }
        } else {
            if (pageid > -1) {
                SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
                renderView.navigatePage(pageid, "", "", true, false);
            } else {
                if (!SDKManager.getInstance().isReviewMode()) {
                    Toast.makeText(this, getResources().getString(R.string.page_not_found), Toast.LENGTH_SHORT).show();
                }
            }
        }
    }

    @Override
    public void onOKClick(View v) {

    }

    private void callDefaultHighlightSettingServiceForTeacher() {
        try {
            SDKManager.getInstance().setAnyStudentHvPermissionToShareData(false);
            if (!com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getHighlightClassList().isEmpty()) {
                for (int i = 0; i < com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getHighlightClassList().size(); i++) {
                    UserClassVO userClass = ((UserClassVO) com.hurix.commons.notifier.GlobalDataManager.getInstance().
                            getLocalBookData().getHighlightClassList().get(i));
                    for (com.hurix.customui.interfaces.IUser iuser : userClass.getStudentList()) {
                        if (iuser.getRoleName().equals(Constants.TEACHER)) {
                            if (!iuser.ishighlightSharedWithUser()) {
                                userClass.getShareUserList().add((int) iuser.getUserID());
                            }
                            if (!iuser.ishighlightRecieveWithUser()) {
                                userClass.getRecieveUserList().add((int) iuser.getUserID());
                            }
                        }
                        if (iuser.getRoleName().equals(Constants.STUDENT)) {
                            if (getHighlightSharedChecked(iuser.getUserID(),
                                    userClass.getShareUserList())) {
                                SDKManager.getInstance().setAnyStudentHvPermissionToShareData(true);
                            }
                        }
                    }

                }
            }
            mServicehandler.sendHighlightSettingRequest(com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().
                    getHighlightClassList(), bookId, PlayerActivity.this);

        } catch (Exception e) {
            if (Constants.IS_DEBUG_ENABLED) {
                e.printStackTrace();
            }
        }

    }

    private boolean getHighlightSharedChecked(long refUserID, HashSet<Integer> shareUserList) {
        for (Integer integer : shareUserList) {
            if (integer.intValue() == refUserID) {
                return true;
            }
        }
        return false;
    }

    /**
     * Callback when service request is completed
     *
     * @param response Service response
     */
    @Override
    public void requestCompleted(IServiceResponse response) {
        if (mProgressDialog != null)
            mProgressDialog.dismiss();
        if (response.getResponseRequestType().equals(SERVICETYPES.FETCHBOOKCLASSES)) {
            FetchbookClassesServieResponse responseObj = (FetchbookClassesServieResponse) response;
            arrayListforSharingSetting = responseObj.getClassesList();

            com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData()
                    .setClassListFromResponse(UserController.getInstance(getApplicationContext())
                            .getUserVO().getUserID(), responseObj.getClassesList());

            callDefaultHighlightSettingServiceForTeacher();

        } else if (response.getResponseRequestType().equals(SERVICETYPES.ACCEPT_COLLABORATION_DATA_REQUSET)) {
            AcceptCollaborationDataResponse responseObj = (AcceptCollaborationDataResponse) response;
            if (responseObj.isSuccess()) {
                DatabaseManager.getInstance(this).updateActionTakenForHighlights(responseObj.getUgcID(), responseObj.getStatus() == 1 ? "Y" : "R", userID, bookId);
                ArrayList<HighlightVO> datalist = DatabaseManager.getInstance(this).getHighlight(userID, bookId);
                HighlightVO accept_rejectVo = DatabaseManager.getInstance(this).getHighlightByUGCID(responseObj.getUgcID());
                if (accept_rejectVo != null && accept_rejectVo.getActionTakenStatus().equals("Y") && !accept_rejectVo.getMode().equals('D')) {
                    if (SDKManager.getInstance().getAllHighlightVO(accept_rejectVo.getFolioID()) != null) {
                        SDKManager.getInstance().getAllHighlightVO(accept_rejectVo.getFolioID()).add(accept_rejectVo);
                    }

                }
                if (mReaderType == EBookType.FIXEDKITABOO) {
                    SDKManager.getInstance().refreshHighLightOnPage();
                    SDKManager.getInstance().broadcastRefresh();
                } else {
                    if (accept_rejectVo != null) {
                        renderView.loadAsset(AssetType.HighlightNote, accept_rejectVo.getFolioID());
                    }
                }
                if (isMobile) {
                    mydata.setData(datalist);
                    mydata.upDateData();
                    mMobileAcceptRejectView.removeHighlightVo();
                    if (mUGClist != null && mUGClist.size() <= 0)
                        mydata.openMainScreen();
                } else {
                    tabMyDataFragment.setData(datalist);
                    tabMyDataFragment.upDateData();
                    mTabAcceptRejectView.removeHighlightVo();
                    if (mUGClist != null && mUGClist.size() <= 0)
                        tabMyDataFragment.openMainScreen();

                }
            }
        } else if (response.getResponseRequestType().equals(SERVICETYPES.SECURE_URL_REQUEST)) {
            try {
                fetchClientSecureUrlResponse = (FetchClientSecureUrlResponse) response;
                if (linkVO.getType() == LinkVO.LinkType.SURVEY) {
                    openLocalHTMLFile(fetchClientSecureUrlResponse.getURL(), linkVO.getWidth(), linkVO.getHeight(), linkVO.isOpenByDefault(), linkVO);
                } else {
                    if (linkVO.isInline()) {
                        if (linkVO.getType() == LinkVO.LinkType.KALTURASTREAMING) {
                            ((InlineVideoPlayer) linkVO.getLinkView()).playInlineVideo(fetchVimeoUrlResponse.getURL(), 0, true);
                        } else {
                            linkVO.setmVideoPath(fetchClientSecureUrlResponse.getURL());
                            initOnlineVideo(linkVO);
                        }
                    } else {
                        linkVO.setmVideoPath(fetchClientSecureUrlResponse.getURL());
                        initOnlineVideo(linkVO);
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (response.getResponseRequestType().equals(SERVICETYPES.VIMEO_URL_REQUEST)) {
            try {
                fetchVimeoUrlResponse = (FetchVimeoUrlResponse) response;
                linkVO.setmVideoPath(fetchVimeoUrlResponse.getURL());
                if (linkVO.isInline()) {
                    ((InlineVideoPlayer) linkVO.getLinkView()).playInlineVideo(fetchVimeoUrlResponse.getURL(), 0, true);
                } else {
                    initOnlineVideo(linkVO);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else if (response.getResponseRequestType().equals(SERVICETYPES.EXTERNAL_LINK_SECURE_URL)) {
            externalSecureUrlResponse = (ExternalSecureUrlResponse) response;
            exturl = externalSecureUrlResponse.getURL();
            if (externalSecureUrlResponse.getURL().contains(".pdf") || (externalSecureUrlResponse.getURL().contains(".doc"))) {
                exturl = ServiceConstants.GOOGLE_DOC + externalSecureUrlResponse.getURL().replace("http://", "https://");
            }
            openLocalHTMLFile(exturl, linkVO.getWidth(), linkVO.getHeight(), linkVO.isOpenByDefault(), linkVO);
        } else if (response.getResponseRequestType().equals(SERVICETYPES.USER_SETTING_REQUEST)) {
            UserSetttingResponse responseObj = (UserSetttingResponse) response;
        } else if (response.getResponseRequestType().equals(SERVICETYPES.REFRESH_USER_TOKEN)) {
            RefreshUserTokenResponse responseObj = (RefreshUserTokenResponse) response;
            KitabooSDKModel.getInstance().setUserToken(responseObj.getUserVO().getToken());
            String token = responseObj.getUserVO().getToken();
            long userId = responseObj.getUserVO().getUserID();
           /* com.hurix.kitaboocloud.datamodel.UserVO vo = new com.hurix.kitaboocloud.datamodel.UserVO();
            vo.setUserID(userId);
            vo.setToken(token);
            DBController.getInstance(PlayerActivity.this).getManager().updateUserToken(vo);*/

            if (responseObj.getCallbackRequestType().equalsIgnoreCase(SERVICETYPES.FETCHBOOKCLASSES.toString())) {
                //mServicehandler.sendFetchBookClassRequest(userID, bookId, PlayerActivity.this);
            } else if (responseObj.getCallbackRequestType().equalsIgnoreCase(SERVICETYPES.SECURE_URL_REQUEST.toString())) {
                mServicehandler.getSecureUrl(this, params);
            } else if (responseObj.getCallbackRequestType().equalsIgnoreCase(SERVICETYPES.VIMEO_URL_REQUEST.toString())) {
                mServicehandler.getVimeoUrl(PlayerActivity.this, params);
            } else if (responseObj.getCallbackRequestType().equalsIgnoreCase(SERVICETYPES.EXTERNAL_LINK_SECURE_URL.toString())) {
                mServicehandler.sendSecureUrlForExternallink(mObjVO, PlayerActivity.this);
            }

        } else if (response.getResponseRequestType().equals(SERVICETYPES.BOOK_READING_SPEED)) {
            GetBookReadingResponse responseObj = (GetBookReadingResponse) response;
            SDKManager.getInstance().setTotalTimeSpend(Long.parseLong(responseObj.getTotalTimeSpend()));
            SDKManager.getInstance().setNumberOfPagesRead(Long.parseLong(responseObj.getPagesRead()));


            /* double d1 = (double) SDKManager.getInstance().getTotalTimeSpend();*/
            if (SDKManager.getInstance().getNumberOfPagesRead() != 0) {
                SDKManager.getInstance().setAverageTimeFromServer(SDKManager.getInstance().getTotalTimeSpend() / SDKManager.getInstance().getNumberOfPagesRead());
                //  Log.d("RAVITEJA-AverageTime", SDKManager.getInstance().getAverageTimeFromServer() + "");

                com.hurix.commons.utils.Utils.insertSharedPrefernceStringValues(this,
                        Constants.SHELF_PREFS_NAME, Constants.SERVER_AVERAGE_TIME, SDKManager.getInstance().getAverageTimeFromServer() + "");


                /*DatabaseManager.getInstance(this).DeleteServerAverageTime(bookId, userID);
                DatabaseManager.getInstance(this).SaveServerAverageTime(bookId, userID, SDKManager.getInstance().getAverageTimeFromServer());*/
            }
        }
    }

    private void initOnlineVideo(LinkVO objVO) {

        try {
            Intent intent = new Intent(this, LinkVideoPlayer.class);
            Bundle b = new Bundle();
            b.putBoolean("isOriantationLocked", false);
            b.putString("videopath", objVO.getmVideoPath());
            b.putString("isbnNo", isbn);
            b.putBoolean("error", objVO.isError());
            b.putBoolean("isInline", objVO.isInline());
            b.putBoolean("isOnline", objVO.getmResourceClickMode().equalsIgnoreCase("online"));

            intent.putExtras(b);
            this.startActivityForResult(intent,
                    Constants.BOOKPLAYER_PROCESS_LINKTYPE_REQUESTCODE);
        } catch (Exception e) {
            e.printStackTrace();
        }
      /*  if (objVO.isInline()){
            try {
                inlineVideoPlayer.playInlineVideo(objVO.getmVideoPath().toString(), 0, true);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }else {
            try {
                Intent intent = new Intent(this, LinkVideoPlayer.class);
                Bundle b = new Bundle();
                b.putBoolean("isOriantationLocked", false);
                b.putString("videopath", objVO.getmVideoPath());
                b.putString("isbnNo", isbn);
                b.putBoolean("error", objVO.isError());
                b.putBoolean("isInline", objVO.isInline());
                if (objVO.getmResourceClickMode().equalsIgnoreCase("online")) {
                    b.putBoolean("isOnline", true);
                } else {
                    b.putBoolean("isOnline", false);
                }
                if (GlobalDataManager.getInstance().getLocalBookData().getClassList().size() > 0)
                    b.putString("classID", GlobalDataManager.getInstance().getLocalBookData().getClassList().get(0).getID());
                else
                    b.putString("classID", "0");
                intent.putExtras(b);
                ((Activity) this).startActivityForResult(intent,
                        Constants.BOOKPLAYER_PROCESS_LINKTYPE_REQUESTCODE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }*/
    }

    /**
     * Callback when service request error occurs
     *
     * @param exeption Service error exeption
     */
    @Override
    public void requestErrorOccured(ServiceException exeption) {
        if (mProgressDialog != null)
            mProgressDialog.dismiss();
        if (exeption != null) {
            ServiceException exceptionObj = exeption;
            Map.Entry<String, Integer> entry = exceptionObj.getInvalidFields().entrySet().iterator().next();

            if (!exceptionObj.getInvalidFields().isEmpty()) {
                if (UserController.getInstance(PlayerActivity.this).getUserSettings().getIsAutoLogOffEnabled() && entry.getValue() == 103) {
                    showSessionExpiredAlert();
                } else if (entry.getValue() == 103 && (!exeption.getResponseRequestType().equals(SERVICETYPES.REFRESH_USER_TOKEN))) {
                    mServicehandler.refreshUserToken(UserController.getInstance(getBaseContext()).getUserVO().getToken(), exeption.getResponseRequestType().toString(),
                            this);
                } else if (entry.getValue() == 103) {
                    showErrorAlertDialog(entry.getValue());
                }
            } else if (exeption != null && exeption.getResponseRequestType().equals(SERVICETYPES.SECURE_URL_REQUEST)) {
                if (entry.getValue() != 103) {
                    showErrorAlertDialog(entry.getValue());
                    linkVO.setmVideoPath(serviceException.getMessage());
                    try {
                        if (linkVO.getType() == LinkVO.LinkType.SURVEY) {
                            openLocalHTMLFile(fetchClientSecureUrlResponse.getURL(), linkVO.getWidth(), linkVO.getHeight(), linkVO.isOpenByDefault(), linkVO);
                        } else {
                            if (linkVO.isInline()) {
                                if (linkVO.getType() == LinkVO.LinkType.KALTURASTREAMING) {
                                    DialogUtils.displayToast(this, getResources()
                                            .getString(R.string.msg_unable_to_play_video), Toast.LENGTH_SHORT, Gravity.CENTER);
                                    ((InlineVideoPlayer) linkVO.getLinkView()).stopVIdeo();
                                } else {
                                    linkVO.setmVideoPath(linkVO.getmVideoPath());
                                    initOnlineVideo(linkVO);
                                }
                            } else {
                                linkVO.setmVideoPath(linkVO.getmVideoPath());
                                initOnlineVideo(linkVO);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            } else if (exeption != null && exeption.getResponseRequestType().equals(SERVICETYPES.VIMEO_URL_REQUEST)) {
                if (entry.getValue() != 103) {
                    showErrorAlertDialog(entry.getValue());
                    linkVO.setmVideoPath(serviceException.getMessage());
                    try {
                        linkVO.setmVideoPath(linkVO.getmVideoPath());
                        if (linkVO.isInline()) {
                            DialogUtils.displayToast(this, getResources()
                                    .getString(R.string.msg_unable_to_play_video), Toast.LENGTH_SHORT, Gravity.CENTER);
                            ((InlineVideoPlayer) linkVO.getLinkView()).stopVIdeo();
                        } else {
                            initOnlineVideo(linkVO);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

            } else if (exeption != null && exeption.getResponseRequestType().equals(SERVICETYPES.EXTERNAL_LINK_SECURE_URL)) {
                if (entry.getValue() != 103) {
                   /* DialogUtils.displayToast(this, utils.Utils.getMessageForError(mContext, errorValue),
                            Toast.LENGTH_LONG, Gravity.CENTER);*/
                    showErrorAlertDialog(entry.getValue());
                }
            } else if (exeption != null) {
                if (entry.getValue() != null) {
                    showErrorAlertDialog(entry.getValue());
                }
            }
        }

    }

    /**
     * Callback on TOB item is pressed
     *
     * @param bookMarkVO pressed TOB object
     */
    @Override
    public void onTobitemClick(BookMarkVO bookMarkVO) {
        SDKManager.getInstance().setHistoryNavigationRecordRequired(true);
        SDKManager.getInstance().setOnTobitemclick(true);
        if (mReaderType == EBookType.FIXEDKITABOO) {
            navigatePageByFolioId(bookMarkVO.getFolioID(), bookMarkVO.getBookmarkPageID());
        } else {
            renderView.tobNavigatePage(bookMarkVO);
        }
        if (mDialog != null) {
            mDialog.dismiss();
            mDialog = null;
            toc = null;
        }

        if (mBottomBookmarkFragment != null) {
            mBottomBookmarkFragment.dismiss();
        }
        playAudioAfterNavigation();
    }

    private void jumpToBookOnchapterClickForOup(TableOfResourceVo tableOfResourceVo) {
        torlink = new LinkVO();
        torlink.setType(tableOfResourceVo.getType().toString());
        torlink.setFolioID(tableOfResourceVo.getFolioNo());
        torlink.setProperties(tableOfResourceVo.getProperties());
        torlink.setUrl(tableOfResourceVo.getUrl());
        torlink.setIconUrl(tableOfResourceVo.getIconUrl());
        torlink.setPageID(tableOfResourceVo.getPageID());
        torlink.setLinkID(tableOfResourceVo.getResourceID());
        torlink.setmIsExternal(tableOfResourceVo.getUrl().contains("http") || tableOfResourceVo.getUrl().contains("Http"));

        playClickedMarkUpByResourceId(torlink);
    }

    /**
     * Callback on TOR item is pressed
     *
     * @param tableOfResourceVo pressed TOR object
     */
    @Override
    public void onTorItemClick(TableOfResourceVo tableOfResourceVo) {
        if (isJumpToBookInNative && tableOfResourceVo != null && tableOfResourceVo.getType() != null
                && tableOfResourceVo.getType().toString().equalsIgnoreCase(String.valueOf(LinkVO.LinkType.JUMP_TO_BOOK))) {
            jumpToBookOnchapterClickForOup(tableOfResourceVo);
        } else {
            if (tableOfResourceVo != null) {
                torlink = new LinkVO();
                torlink.setType(tableOfResourceVo.getType().toString());
                torlink.setFolioID(tableOfResourceVo.getFolioNo());
                torlink.setProperties(tableOfResourceVo.getProperties());
                torlink.setUrl(tableOfResourceVo.getUrl());
                torlink.setIconUrl(tableOfResourceVo.getIconUrl());
                torlink.setPageID(tableOfResourceVo.getPageID());
                torlink.setLinkID(tableOfResourceVo.getResourceID());
                torlink.setmIsExternal(tableOfResourceVo.getUrl().contains("http") || tableOfResourceVo.getUrl().contains("Http"));

            }

            if (mBottomBookmarkFragment != null) {
                mBottomBookmarkFragment.dismiss();
            }

            if (!Utils.isDeviceTypeMobile(this) && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                if (currentFoliId.equals(tableOfResourceVo.getFolioNo())) {
                    playClickedMarkUpByResourceId(torlink);
                } else {
                    if (currentFoliIdPrev.equals(tableOfResourceVo.getFolioNo())) {
                        playClickedMarkUpByResourceId(torlink);
                    } else {
                        navigatePageByFolioId(tableOfResourceVo.getFolioNo(), tableOfResourceVo.getPageID());
                    }

                }
            } else {
                if (currentFoliId.equals(tableOfResourceVo.getFolioNo())) {
                    playClickedMarkUpByResourceId(torlink);
                } else {
                    navigatePageByFolioId(tableOfResourceVo.getFolioNo(), tableOfResourceVo.getPageID());
                }
            }

            if (mDialog != null) {
                mDialog.dismiss();
                mDialog = null;
                toc = null;
            }
            playAudioAfterNavigation();
        }
    }

    /**
     * Callback when External resource of page is pressed
     *
     * @param urlPath External resource url
     * @param _data   TOR object
     */
    @Override
    public void onExternalResourceClick(String urlPath, TableOfExternalResourcesVo _data) {
        // TableOfExternalResourcesVo _data = new TableOfExternalResourcesVo();
        if (_data.getType().equalsIgnoreCase(LinkVO.LinkType.WEB_ADDRESSES.toString())) {

            Intent intent = new Intent(this, LinkWebViewPlayer.class);
            //Intent intent = new Intent(this, PortoWebViewPlayer.class);
            Bundle b = new Bundle();
            b.putBoolean("isOriantationLocked", false);
            b.putString("path", _data.getUrl());

            b.putString("streamType", "");

            intent.putExtras(b);
            startActivity(intent);


            if (mBottomBookmarkFragment != null) {
                mBottomBookmarkFragment.dismiss();
            }


        } else {
            Intent intent = new Intent(android.content.Intent.ACTION_VIEW);
            String extension = android.webkit.MimeTypeMap
                    .getFileExtensionFromUrl(Uri.parse(urlPath).toString());
            String mimetype = android.webkit.MimeTypeMap.getSingleton()
                    .getMimeTypeFromExtension(extension);
            if (extension.equalsIgnoreCase("") || mimetype == null) {
                intent.setDataAndType(Uri.parse(urlPath), "text/*");
            } else {
                intent.setDataAndType(Uri.parse(urlPath), mimetype);
            }

            PackageManager packageManager = getPackageManager();
            List<ResolveInfo> list = packageManager
                    .queryIntentActivities(intent, 0);

            if (list.size() == 0) {
                DialogUtils.displayToast(this, getResources()
                        .getString(R.string.no_application_available), Toast.LENGTH_LONG, Gravity.CENTER);
                GlobalDataManager.getInstance().setAnyPopupVisible(false);
            } else {
                if (Build.VERSION.SDK_INT >= 24) {
                    try {
                        Method m = StrictMode.class.getMethod("disableDeathOnFileUriExposure");
                        m.invoke(null);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                startActivityForResult(intent, Constants.BOOKPLAYER_OPEN_PDF_REQUESTCODE);
            }
        }

        if (toc != null) {
            toc.dismiss();
        }
    }

    private void playClickedMarkUpByResourceId(final LinkVO _torlink) {

        /*if (mCurrentPageData != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection() != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection().size() > 0 && currASList!=null)
            currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[0]).getLinkCollection());*/

        int time;
        if (currASList != null && currASList.size() > 0)
            time = 1500;
        else {
            time = 500;
        }

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if (!isPentoolBarOpen) {
                    handleClickByType(_torlink, new LinkVideoView(PlayerActivity.this, false), 0);
                    torlink = null;
                }

            }
        }, time);

    }

    /**
     * Call back on click of Markup resources.
     *
     * @param linkVO Markup Object
     * @param view   view of Clicked Markup
     */
    @Override
    public void OnMarkupClick(LinkVO linkVO, View view) {
        if (!isPentoolBarOpen) {
            if (linkVO != null) {
                linkVO.getType();
                handleClickByType(linkVO, view, 0);

                Bundle bundle = new Bundle();


                /*if (linkVO.getType() == (LinkVO.LinkType.IMAGE)) {

                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_IMAGE);
                } else if (linkVO.getType() == (LinkVO.LinkType.SLIDESHOW)) {

                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_IMAGE_SLIDE);
                } else if (linkVO.getType() == (LinkVO.LinkType.STANDALONE_INSTRUCTION)) {

                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_INSTRUCTION);
                } else if (linkVO.getType() == (LinkVO.LinkType.AUDIO)) {

                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_AUDIO);

                } else if (linkVO.getType() == (LinkVO.LinkType.WEB_LINK)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_WEB_LINK);
                } else if (linkVO.getType() == (LinkVO.LinkType.VIDEO)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_NORMAL_VIDEO);
                } else if (linkVO.getType() == (LinkVO.LinkType.YOUTUBESTREAMING)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_YOUTUBE_VIDEO);
                } else if (linkVO.getType() == (LinkVO.LinkType.KALTURASTREAMING)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_KALTURA_VIDEO);
                } else if (linkVO.getType() == (LinkVO.LinkType.PDF)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_DOC_PDF);
                } else if (linkVO.getType() == (LinkVO.LinkType.AUDIO_SYNC)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_AUDIO_SYNC);
                } else if (linkVO.getType() == (LinkVO.LinkType.KITABOO_WIDGET)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_KITABOO_WIDGET);
                } else if (linkVO.getType() == (MULTIPLE_LINK)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_MULTI_LINK);
                } else if (linkVO.getType() == (LinkVO.LinkType.HTML_WRAP)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_IMAGE_MAGNIFICATION);
                } else if (linkVO.getType() == (LinkVO.LinkType.ZOOMIMAGE)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_IMAGE_MAGNIFICATION);
                } else if (linkVO.getType() == (LinkVO.LinkType.JUMP_TO_BOOK)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_JUMP_TO_BOOK);
                } else if (linkVO.getType() == (LinkVO.LinkType.QAACTIVITY)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_HTML_ACTIVITY_QUER_PARAM);
                }

                // newly added some constants in enums

                else if (linkVO.getType() == (LinkVO.LinkType.FIB)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_FIB);
                } else if (linkVO.getType() == (LinkVO.LinkType.DROP_DOWN)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_DROPDOWN);
                } else if (linkVO.getType() == (LinkVO.LinkType.DOC_PPT)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_DOC_PPT);
                } else if (linkVO.getType() == (LinkVO.LinkType.DOC_EXCEL)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_DOC_EXCEL);
                } else if (linkVO.getType() == (LinkVO.LinkType.INLINE_VIDEO)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_INLINE_VIDEO);
                } else if (linkVO.getType() == (LinkVO.LinkType.HTML_ACTIVITY_FLOATABLE)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_HTML_ACTIVITY_FLOATABLE);
                } else if (linkVO.getType() == (LinkVO.LinkType.HTML_ACTIVITY)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_HTML_ACTIVITY);
                } else if (linkVO.getType() == (LinkVO.LinkType.GOTO_PAGE)) {
                    bundle.putString(FirebaseConstants.MARKUP_TYPE, FirebaseConstants.MARKUP_GOTO_PAGE);
                }


                FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.MARKUP_BUTTON_CLICK, bundle);*/


            } else
                handleClickByType(linkVoReadAloud, view, 0);

        }


    }

    /**
     * Callback when long press on markups
     *
     * @param linkVO   object
     * @param linkView Markup view
     */
    @Override
    public void onMarkupLongPress(LinkVO linkVO, LinkView linkView) {

    }

    /**
     * Responsible to play the Markup on click event.
     *
     * @param objVO
     * @param linkView
     * @param audioType
     */
    private void handleClickByType(LinkVO objVO, View linkView, int audioType) {
        mObjVO = objVO;
        SDKManager.getInstance().setAutoScrollPageForAudioSync(false);
        LinkVO.LinkType type = objVO.getType();
        objVO.setmResourceClickMode(Utils.isOnline(this) == true ? "online" : "offline");
        //Dismiss snackbar
        if (snackbar != null) {
            snackbar.dismiss();
        }
        //Stop audio
        if (null != mAudioManager && mAudioManager.getMediaPlayer().isPlaying()) {
            //Markups should not work while media player is playing
        } else {
            // mAudioManager.close();
            // mAudioManager = null;
            if (objVO.getIsSecured()) {
                if (type.toString().equalsIgnoreCase(LinkVO.LinkType.AUDIO.toString())) {
                    if (objVO.getUrl() != null && !objVO.getUrl().isEmpty()) {
                        if (Utils.isOnline(this)) {
                            mProgressDialog.show();
                            mServicehandler.sendSecureUrlForExternallink(objVO, this);
                            linkVO = objVO;
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.VIDEO.toString())) {
                    if (objVO.getUrl() != null && !objVO.getUrl().isEmpty()) {
                        if (Utils.isOnline(this)) {
                            mProgressDialog.show();
                            mServicehandler.sendSecureUrlForExternallink(objVO, this);
                            linkVO = objVO;
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.WEB_ADDRESSES.toString())) {
                    if (Utils.isOnline(this)) {
                        openLocalHTMLFile(objVO.getUrl(), objVO.getWidth(), objVO.getHeight(), objVO.isOpenByDefault(), objVO);
                    } else {
                        customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                    }

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.IMAGE.toString())) {
                    if (objVO.getUrl() != null && !objVO.getUrl().isEmpty()) {
                        if (objVO.isExternal()) {
                            if (Utils.isOnline(this)) {
                                openLocalHTMLFile(objVO.getUrl(), objVO.getWidth(), objVO.getHeight(), objVO.isOpenByDefault(), objVO);
                            } else {
                                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                            }
                        } else {
                            processImage(objVO, linkView);
                        }
                    }

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.DOCUMENTS.toString())) {
                    if (!SDKManager.getInstance().isAnyPopVisible()) {
                        if (Utils.isOnline(this)) {
                            mProgressDialog.show();
                            mServicehandler.sendSecureUrlForExternallink(objVO, this);
                            linkVO = objVO;
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.HTML_WRAP.toString())) {
                    if (!SDKManager.getInstance().isAnyPopVisible()) {
                        if (Utils.isOnline(this)) {
                            mProgressDialog.show();
                            mServicehandler.sendSecureUrlForExternallink(objVO, this);
                            linkVO = objVO;
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    }
                }
            } else {
                if (!type.toString().equalsIgnoreCase(LinkVO.LinkType.STANDALONE_INSTRUCTION.toString())) {
                    SDKManager.getInstance().getGetLocalBookData().closePopUp();
                }

                if (InlineVideoHelper.getVideoInstance(this).getPlayerRef() != null
                        && InlineVideoHelper.getVideoInstance(this).getPlayerRef()
                        .getPlayerHelper() != null) {
                    InlineVideoHelper.getVideoInstance(this).getPlayerRef()
                            .getPlayerHelper().close();
                }

                if (type.toString().equalsIgnoreCase(LinkVO.LinkType.COMMENTS.toString())) {
                    if (!SDKManager.getInstance().isAnyPopVisible()) {
                        SDKManager.getInstance().setAnyPopVisible(true);
                        //setPageTrackingResource(objVO);
                        //processCommentsMarkUp(objVO);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.AUDIO.toString()) ||
                        type.toString().equalsIgnoreCase(LinkVO.LinkType.AUDIO_SYNC.toString())) {
                    if (objVO.getUrl() != null && !objVO.getUrl().isEmpty()) {
                        if (objVO.isExternal()) {
                            if (Utils.isOnline(this)) {
                                openLocalHTMLFile(objVO.getUrl(), objVO.getWidth(), objVO.getHeight(), objVO.isOpenByDefault(), objVO);
                            } else {
                                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                            }
                        } else {
                            if (!(mAudioPopup != null && mAudioPopup.isShowing())) {
                                if (objVO.getTooltip().contains("Read Aloud") || isAudioSyncObj(objVO) || audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
                                    audioIsPause = false;
                                    replaceActionBarwithReadAloudBar(true);
                                    if (isAudioSyncObj(objVO)) {
                                        playSentenceLevelAudioSync(objVO);
                                        if (readAloudType != null && (!readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME) && !readAloudType.equals(KitabooFixedBook.ReadAloudType.LETMEREAD)))
                                            readAloudType = KitabooFixedBook.ReadAloudType.AUTOPLAY;
                                    } else {
                                        if (mASYellowCol != null) {
                                            mASYellowCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
                                            mASYellowCol.setTextSize(25);
                                        }
                                        if (!com.hurix.commons.notifier.GlobalDataManager.getInstance().getCurrentASMenucolor().isEmpty()) {
                                            setColorPickerItemColor(com.hurix.commons.notifier.GlobalDataManager.getInstance().getCurrentASMenucolor());
                                            setaudioSyncColor(com.hurix.commons.notifier.GlobalDataManager.getInstance().getCurrentASMenucolor());
                                        } else {
                                            com.hurix.commons.notifier.GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
                                            com.hurix.commons.notifier.GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));
                                        }
                                    }
                                    //SDKManager.getInstance().setReadAloudPlaying(true);
                                    // if(audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)){
                                    int pageidsync = getCurrPageIDByDisplayNum(objVO.getFolioID());
                                    SDKManager.getInstance().setPageIndexforAudioSync(pageidsync - 1);
                                    showBottomBar();
                                    // }
                                } else {

                                    if (currASList != null && currASList.size() > 0 && currASList.get(0).getLinkID() > 0 && sentenceAudioMap != null && sentenceAudioMap.size() > 0 && sentenceAudioMap.get((int) currASList.get(0).getLinkID()) != null && sentenceAudioMap.get((int) objVO.getLinkID()) != null) {
                                        SDKManager.getInstance().setAudioSyncPlaying(true);
                                        playAudiosyncTOC(objVO);
                                    } else {
                                        SDKManager.getInstance().setReadAloudPlaying(false);
                                    }

                                }
                                // disableAllAudioSyncIconBorder();
                                /*if (type.toString().equalsIgnoreCase(LinkVO.LinkType.AUDIO.toString())) {
                                    linkView.setBackground(getAudioSelectedBackground());
                                } else {
                                    linkView.setBackground(getAudioSyncSelectedBackground());
                                }*/
                                processAudio(objVO, linkView);
                            }
                        }

                    } else {
                        DialogUtils.showOKAlert(linkView, 0, this, this.getResources().getString(R.string.alert_error),
                                getResources().getString(R.string.alert_tor_no_resources_found), this);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.VIDEO.toString())) {
                    if (objVO.isInline()) {
                        //processVideo(objVO);
                        if (objVO.getLinkView() == null) {
                            if (((PDFPage) mcurrentPageData[0]).getLinkCollection() != null) {
                                for (int i = 0; i < ((PDFPage) mcurrentPageData[0]).getLinkCollection().size(); i++) {
                                    if (((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView() != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView().getClass().equals(InlineVideoPlayer.class) && objVO.getFolioID().equalsIgnoreCase(((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getFolioID())) {
                                        objVO = (LinkVO) ((InlineVideoPlayer) ((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView()).getData();
                                        ((InlineVideoPlayer) ((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView()).setLinkData(objVO);
                                        ((InlineVideoPlayer) ((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView()).playdefaultVideo(objVO, bookId, isbn, 0, true);
                                    }
                                }
                            }
                        } else {
                            ((InlineVideoPlayer) objVO.getLinkView()).setLinkData(objVO);
                            ((InlineVideoPlayer) objVO.getLinkView()).playdefaultVideo(objVO, bookId, isbn, 0, true);
                        }
                    } else {
                        if (objVO.getUrl() != null && !objVO.getUrl().isEmpty()) {
                            initDefaultVideoPlayer(objVO);
                        } else {
                            DialogUtils.showOKAlert(linkView, 0, this, getResources().getString(R.string.alert_error),
                                    getResources().getString(R.string.alert_tor_no_resources_found), this);
                        }
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.WEB_ADDRESSES.toString())) {
                    if (!SDKManager.getInstance().isAnyPopVisible()) {
                        if (Utils.isOnline(this)) {
                            openLocalHTMLFile(objVO.getUrl(), objVO.getWidth(), objVO.getHeight(), objVO.isOpenByDefault(), objVO);
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.IMAGE.toString())) {
                    if (objVO.getUrl() != null && !objVO.getUrl().isEmpty()) {
                        if (objVO.isExternal()) {
                            if (Utils.isOnline(this)) {
                                openLocalHTMLFile(objVO.getUrl(), objVO.getWidth(), objVO.getHeight(), objVO.isOpenByDefault(), objVO);
                            } else {
                                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                            }
                        } else {
                            if (objVO.isGrouped()) {
                                //processGroupImage(objVO);
                            } else {
                                processImage(objVO, linkView);
                            }
                        }
                    } else {
                        DialogUtils.showOKAlert(linkView, 0, this, getResources().getString(R.string.alert_error),
                                getResources().getString(R.string.alert_tor_no_resources_found), this);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.TOC.toString())) {
                    navigatePageByFolioId(objVO.getUrl(), objVO.getPageID());
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.DOCUMENTS.toString())) {
                    if (objVO.isExternal()) {
                        if (Utils.isOnline(this)) {
                            openLocalHTMLFile(objVO.getUrl(), objVO.getWidth(), objVO.getHeight(), objVO.isOpenByDefault(), objVO);
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    } else {
                        String path = "file://"
                                + getBookFolderPathCompat(bookId
                                + "", isbn)
                                + File.separator + objVO.getUrl();
                        openDocument(path);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.ACTIVITY_INJECTION.toString())) {
                    if (!objVO.IsSubmitted()) {
                        //processFIB(objVO, linkView, true);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.SLIDESHOW.toString())) {
                    processSlideShow(objVO);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.YOUTUBESTREAMING.toString())) {
                    if (Utils.isOnline(this)) {
                        if (!SDKManager.getInstance().isAnyPopVisible()) {
                            String pattern = "(?<=watch\\?v=|/videos/|embed\\/)[^#\\&\\?]*";
                            Pattern compiledPattern = Pattern.compile(pattern);
                            Matcher matcher = compiledPattern.matcher(youtubeUrl + objVO.getUrl());
                            if (matcher.find()) {
                                String key = "QUl6YVN5RDQ1M0hoU2lHOW82RUY4VTdEUVZ6R2hSSU0xTTd2bDlZ";
                                byte[] data = Base64.decode(key, Base64.DEFAULT);
                                String youtubeDeveloperKey = new String(data, StandardCharsets.UTF_8);
                                Intent youtubeIntent = YouTubeStandalonePlayer.createVideoIntent(this, youtubeDeveloperKey, objVO.getUrl(), 0, true, true);
                                if (youtubeIntent != null) {
                                    startActivityForResult(youtubeIntent, REQ_YOUTUBE_PLAYER);
                                }
                            }
                        }
                    } else {
                        customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                    }

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.KALTURASTREAMING.toString())) {
                    linkVO = objVO;
                    if (objVO.isInline()) {
                        if (Utils.isOnline(this)) {
                            processVideo(objVO);
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    } else {
                        if (Utils.isOnline(this)) {
                            processVideo(objVO);
                        } else {
                            customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                        }
                    }

                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.SURVEY.toString())) {
                    if (Utils.isOnline(this)) {
                        processWebAddress(objVO);
                    } else {
                        customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.MULTIPLE_LINK.toString())) {
                    createMultiLinkPopUP(objVO, linkView);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.JUMP_TO_BOOK.toString())) {
                    if (isJumpToBookInNative) {
                        String str = objVO.getUrl() != null ? objVO.getUrl() : "";
                        String[] separatedURL = str.split("bookID=");

                        if (separatedURL.length > 0) {

                            callFetchCollectionCBMIdRequest(separatedURL[1]);

                            /*CBMDetailsVo cbmDetailsVo = DBController.getInstance(PlayerActivity.this).getManager().fetchCBMDetails(UserController
                                    .getInstance(PlayerActivity.this).getUserVO().getUserID(),bookId);
                            if(cbmDetailsVo != null)
                            {
                                bookIdForJumpToBook = Integer.parseInt(cbmDetailsVo.getCollectionCBMId() != null ? cbmDetailsVo.getCollectionCBMId() : "");
                                boolean isBookDownloaded = DBController.getInstance(PlayerActivity.this).getManager().getBookDownloadStatus(UserController
                                        .getInstance(PlayerActivity.this).getUserVO().getUserID(),bookIdForJumpToBook);

                                if(isBookDownloaded) // Book available to open
                                {
                                    onBackPressed();
                                }
                                else { // Book is not downloaded yet
                                    bookIdForJumpToBook = 0;
                                    Toast.makeText(PlayerActivity.this,"Book is not yet downoaded.",Toast.LENGTH_SHORT).show();
                                }
                            }else { // Book is not downloaded yet
                                bookIdForJumpToBook = 0;
                                Toast.makeText(PlayerActivity.this,"Book is not yet downoaded.",Toast.LENGTH_SHORT).show();
                            }*/

                        }
                    } else {
                        jumpToBook(objVO);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.STANDALONE_INSTRUCTION.toString())) {
                    openInstruction(objVO, linkView);
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.VIMEO_VIDEO.toString())) {
                    linkVO = objVO;
                    if (objVO.isInline()) {
                        if (linkVO.getLinkView() != null) {
                            if (Utils.isOnline(this)) {
                                ((InlineVideoPlayer) linkVO.getLinkView()).setLinkData(objVO);
                                processVideo(objVO);
                            } else {
                                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                            }
                        } else {
                            if (objVO.getLinkView() == null) {
                                if (Utils.isOnline(this)) {
                                    if (((PDFPage) mcurrentPageData[0]).getLinkCollection() != null) {
                                        for (int i = 0; i < ((PDFPage) mcurrentPageData[0]).getLinkCollection().size(); i++) {
                                            if (((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView() != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView().getClass().equals(InlineVideoPlayer.class) && objVO.getFolioID().equalsIgnoreCase(((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getFolioID())) {
                                                objVO = (LinkVO) ((InlineVideoPlayer) ((PDFPage) mcurrentPageData[0]).getLinkCollection().get(i).getLinkView()).getData();
                                                linkVO.setLinkView(null, null, ((InlineVideoPlayer) objVO.getLinkView()), null, null, null, linkVideoView);
                                                ((InlineVideoPlayer) objVO.getLinkView()).setLinkData(objVO);
                                                processVideo(objVO);
                                            }
                                        }
                                    }
                                } else {
                                    customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                                }

                            }
                        }
                    } else {
                        if (objVO.getUrl() != null && !objVO.getUrl().isEmpty()) {
                            SDKManager.getInstance().setAnyPopVisible(true);

                            if (Utils.isOnline(this)) {
                                processVideo(objVO);
                            } else {
                                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                            }
                        } else
                            DialogUtils.showOKAlert(linkView, 0, this, getResources().getString(R.string.alert_error),
                                    getResources().getString(R.string.alert_tor_no_resources_found), this);
                    }
                } else if (type.toString().equalsIgnoreCase(LinkVO.LinkType.HTML_WRAP.toString()) || type.toString().equalsIgnoreCase(LinkVO.LinkType.KITABOO_WIDGET.toString())) {


                    String scormPath = com.hurix.commons.utils.Utils.getBookFolderPathCompat(com.hurix.commons.notifier.GlobalDataManager
                            .getInstance().getLocalBookData().getBookID() + "", com.hurix.commons.notifier.GlobalDataManager.getInstance()
                            .getLocalBookData().getBookISBN()) + File.separator + objVO.getUrl();

                    File scormFile = new File(scormPath);
                    String scormPathWithImsmanifest = scormFile.getParent();
                    File destinationFolder = new File(scormPathWithImsmanifest);
                    File scormFileWithImsmanifest = new File(scormPathWithImsmanifest + "/imsmanifest.xml");

                    if (scormFileWithImsmanifest.getAbsoluteFile().exists()) {
                        GlobalDataManager.getInstance().setAnyLinkClicked(true);
                        GlobalDataManager.getInstance().setAnyPopupVisible(true);
                        DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
                        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                        DocumentBuilder builder = null;
                        if (scormFileWithImsmanifest.getAbsoluteFile().exists()) {
                            try {
                                builder = factory.newDocumentBuilder();
                            } catch (ParserConfigurationException e) {
                                e.printStackTrace();
                            }
                            Document doc = null;
                            try {
                                doc = builder.parse(scormFileWithImsmanifest);
                            } catch (SAXException e) {
                                e.printStackTrace();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            XPathFactory xPathfactory = XPathFactory.newInstance();
                            XPath xpath = xPathfactory.newXPath();
                            XPathExpression expr = null;
                            try {
                                expr = xpath.compile("//manifest/resources/resource[@href]");
                            } catch (XPathExpressionException e) {
                                e.printStackTrace();
                            }
                            NodeList nl = null;
                            try {
                                nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
                            } catch (XPathExpressionException e) {
                                e.printStackTrace();
                            }

                            String indexFileString = null;
                            for (int i = 0; i < nl.getLength(); i++) {
                                Node currentItem = nl.item(i);
                                indexFileString = currentItem.getAttributes().getNamedItem("href").getNodeValue();
                                //System.out.println(indexFileString);
                            }
                            File indexFile = new File(indexFileString);


                            if (scormFileWithImsmanifest.getPath().contains("kitabooscormplayer.html")) {

                            } else {
                                copyAssets(destinationFolder);
                                Intent intent = new Intent(mContext, ScormActivity.class);
                                intent.putExtra("destinationFolder", destinationFolder);
                                if (indexFile.exists()) {
                                    intent.putExtra("indexFile", indexFile);
                                } else {
                                    intent.putExtra("indexFile", scormFile);
                                }
                                intent.putExtra("scormID", objVO.getLinkID());
                                intent.putExtra("isSynced", objVO.getSyncStatus());
                                intent.putExtra("usetToken", UserController.getInstance(mContext).getUserVO().getToken());
                                intent.putExtra("bookID", com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getBookID());
                                intent.putExtra("classID", mClassId);
                                intent.putExtra("expiryDate", bookExpiryDate);
                                intent.putExtra("currentTimeInMillis", CurrentTimeInMillis);
                                startActivity(intent);
                            }

                        }
                    } else {
                        if (objVO.isExternal()) {
                            if (Utils.isOnline(this)) {
                                openLocalHTMLFile(objVO.getUrl(), objVO.getWidth(), objVO.getHeight(), objVO.isOpenByDefault(), objVO);
                                linkVO = objVO;
                            } else {
                                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                            }
                        } else {
                            String newUrl = objVO.getUrl();
                            if (objVO.getUrl().contains("?")) {
                                newUrl = objVO.getUrl().substring(0, objVO.getUrl().indexOf("?"));
                            } else {
                                newUrl = objVO.getUrl();
                            }
                            String path = getBookFolderPathCompat(bookId
                                    + "", isbn)
                                    + File.separator + newUrl;
                            String data = getBookFolderPathCompat(bookId
                                    + "", isbn) + File.separator + newUrl;

                            if (new File(data).exists()) {
                                if (new File(new File(data).getParent() + "/encryption.xml").exists()) {
                                    File newpath = decryptFilePath(path);
                                    try {
                                        //  convertNodesFromXml("file://"+new File(path).getParent()+"/encryption.xml");
                                        openLocalHTMLFile("file://" + newpath.getAbsolutePath(), objVO.getX(), objVO.getY(), objVO.isOpenByDefault(), objVO);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                } else {
                                    path = "file://"
                                            + getBookFolderPathCompat(bookId
                                            + "", isbn)
                                            + File.separator + newUrl;
                                    openLocalHTMLFile(path, objVO.getX(), objVO.getY(), objVO.isOpenByDefault(), objVO);
                                }
                            }
                        }
              /*  if (!GlobalDataManager.getInstance().IsAnyPopupVisible()) {
                    if (!GlobalDataManager.getInstance().IsAnyLinkClicked()) {

                        String scormPath = getBookFolderPathCompat(bookId + "", isbn) + File.separator + objVO.getUrl();

                        File scormFile = new File(scormPath);
                        String scormPathWithImsmanifest = scormFile.getParent();
                        File destinationFolder = new File(scormPathWithImsmanifest);
                        File scormFileWithImsmanifest = new File(scormPathWithImsmanifest + "/imsmanifest.xml");

                        if (scormFileWithImsmanifest.getAbsoluteFile().exists()) {
                            GlobalDataManager.getInstance().setAnyLinkClicked(true);
                            GlobalDataManager.getInstance().setAnyPopupVisible(true);
                            DocumentBuilderFactory domFactory = DocumentBuilderFactory.newInstance();
                            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
                            DocumentBuilder builder = null;
                            if (scormFileWithImsmanifest.getAbsoluteFile().exists()) {
                                try {
                                    builder = factory.newDocumentBuilder();
                                } catch (ParserConfigurationException e) {
                                    e.printStackTrace();
                                }
                                Document doc = null;
                                try {
                                    doc = builder.parse(scormFileWithImsmanifest);
                                } catch (SAXException e) {
                                    e.printStackTrace();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                                XPathFactory xPathfactory = XPathFactory.newInstance();
                                XPath xpath = xPathfactory.newXPath();
                                XPathExpression expr = null;
                                try {
                                    expr = xpath.compile("//manifest/resources/resource[@href]");
                                } catch (XPathExpressionException e) {
                                    e.printStackTrace();
                                }
                                NodeList nl = null;
                                try {
                                    nl = (NodeList) expr.evaluate(doc, XPathConstants.NODESET);
                                } catch (XPathExpressionException e) {
                                    e.printStackTrace();
                                }

                                String indexFileString = null;
                                for (int i = 0; i < nl.getLength(); i++) {
                                    Node currentItem = nl.item(i);
                                    indexFileString = currentItem.getAttributes().getNamedItem("href").getNodeValue();
                                    //System.out.println(indexFileString);
                                }
                                File indexFile = new File(indexFileString);



                                if (scormFileWithImsmanifest.getPath().contains("kitabooscormplayer.html")) {

                                } else {
                                    copyAssets(destinationFolder);
                                    Intent intent = new Intent(this, ScormActivity.class);
                                    intent.putExtra("destinationFolder", destinationFolder);
                                    intent.putExtra("indexFile", indexFile);
                                    intent.putExtra("scormID", objVO.getLinkID());
                                    intent.putExtra("isSynced", objVO.getSyncStatus());
                                    intent.putExtra("bookID", bookId);
                                    if (GlobalDataManager.getInstance().getLocalBookData()
                                            .getClassList().size() > 0 && GlobalDataManager.getInstance().getLocalBookData()
                                            .getClassList().get(0) != null) {
                                        intent.putExtra("classID", GlobalDataManager.getInstance().getLocalBookData()
                                                .getClassList().get(0).getID());
                                    } else {
                                        intent.putExtra("classID", "0");
                                    }
                                   startActivity(intent);
                                }
                            }
                        }
                        else {
                            if (!GlobalDataManager.getInstance().IsAnyPopupVisible()) {
                                GlobalDataManager.getInstance().setAnyPopupVisible(true);
                                //setPageTrackingResource(objVO);
                                String path = "file://"
                                        + getBookFolderPathCompat(GlobalDataManager
                                        .getInstance().getLocalBookData().getBookID()
                                        + "", isbn)
                                        + File.separator + objVO.getUrl();
                                openLocalHTMLFile(path, objVO.getX(), objVO.getY(), objVO.isOpenByDefault(), objVO);
                            }
                        }
                    }
                }*/
                    }
                }
                JSONObject obj = new JSONObject();
                try {

                    obj.put("title", objVO.getTooltip());
                    obj.put("type", objVO.getmResourceClickMode());
                    obj.put("category", objVO.getType().toString());
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                if (mReaderType == EBookType.REFLOWEPUB && (mCFIDArrayList != null && mCFIDArrayList.size() > 0)) {
                    AnalyticsManager.getInstance(this).TrackEvent(EventName.RESOURCE_CLICKED.toString(), objVO.getLinkID() + "", mCFIDArrayList.get(mCFIDArrayList.size() - 1), obj.toString());
                } else {
                    AnalyticsManager.getInstance(this).TrackEvent(EventName.RESOURCE_CLICKED.toString(), objVO.getLinkID() + "", objVO.getFolioID(), obj.toString());
                }
            }
        }
    }

    private void playAudiosyncTOC(LinkVO objVO) {
        audioIsPause = false;
        replaceActionBarwithReadAloudBar(true);
        //if(isAudioSyncObj(objVO)){
        playSentenceLevelAudioSync(objVO);
        readAloudType = KitabooFixedBook.ReadAloudType.AUTOPLAY;
        //}
        int pageidsync = getCurrPageIDByDisplayNum(objVO.getFolioID());
        SDKManager.getInstance().setPageIndexforAudioSync(pageidsync - 1);
    }

    private boolean isAudioSyncObj(LinkVO objVO) {
        boolean isAudioSync = false;

        if (objVO.getTooltip().toLowerCase().contains("Sentence Level".toLowerCase()) || objVO.getTooltip().toLowerCase().contains("Word level".toLowerCase()) || objVO.getTooltip().toLowerCase().contains("Line level".toLowerCase()) || objVO.getTooltip().toLowerCase().contains("Word-Sentence level".toLowerCase()))
            isAudioSync = true;

        return isAudioSync;
    }

    private void playSentenceLevelAudioSync(LinkVO objVO) {

        createAudioSyncList(objVO.getFolioID());
        SDKManager.getInstance().setAudioSyncPlaying(true);
        /*if (mCurrentPageData != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection() != null && ((PDFPage) mcurrentPageData[0]).getLinkCollection().size() > 0 && currASList!=null)
            currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[0]).getLinkCollection());*/

        /*if(currASList!=null && currASList.size()>0 && currASList.get(0).getLinkID()>0 && sentenceAudioMap.get((int)currASList.get(0).getLinkID())!=null)
            computeAudioSyncAsWordId(((ArrayList<AudioSyncWordInfo>) sentenceAudioMap.get((int)currASList.get(0).getLinkID())),currASList.get(0).getPageID());*/

        if (mASYellowCol != null) {
            mASYellowCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
            mASYellowCol.setTextSize(25);
        }
        if (!com.hurix.commons.notifier.GlobalDataManager.getInstance().getCurrentASMenucolor().isEmpty()) {
            setColorPickerItemColor(com.hurix.commons.notifier.GlobalDataManager.getInstance().getCurrentASMenucolor());
            setaudioSyncColor(com.hurix.commons.notifier.GlobalDataManager.getInstance().getCurrentASMenucolor());
        } else {
            com.hurix.commons.notifier.GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
            com.hurix.commons.notifier.GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));
        }
    }

    private void callFetchCollectionCBMIdRequest(String cbmBookId) {
        /*CBMDetailsVo cbmDetailsVo = DBController.getInstance(mContext).getManager().fetchCBMDetails(UserController
                .getInstance(mContext).getUserVO().getUserID(),mBookDao.getBookID());*/
        if (cbmBookId != null && !cbmBookId.isEmpty()) {
            new ServiceHandler(PlayerActivity.this, getResources().getString(R.string.clientid)).fetchCollectionCBMIdRequest(Long.parseLong(cbmBookId), UserController.getInstance(mContext).getUserVO().getToken(), new com.hurix.service.Interface.IServiceResponseListener() {
                @Override
                public void requestCompleted(com.hurix.service.Interface.IServiceResponse response) {
                    if (response != null && response.getResponseRequestType().equals(SERVICETYPES.FETCH_COLLECTION_CBMID_REQUEST)) {
                        FetchCollectionCBMIdResponse responseObj = (FetchCollectionCBMIdResponse) response;
                        bookIdForJumpToBook = Long.parseLong(responseObj.getAssignedKitabooId());
                        /*boolean isBookDownloaded = DBController.getInstance(PlayerActivity.this).getManager().getBookDownloadStatus(UserController
                                .getInstance(PlayerActivity.this).getUserVO().getUserID(), bookIdForJumpToBook);

                        if (isBookDownloaded) // Book available to open
                        {
                            onBackPressed();
                        } else { // Book is not downloaded yet
                            bookIdForJumpToBook = 0;
                            DialogUtils.showAlertWithCloseButton(null, 0, PlayerActivity.this, getResources().getString(R.string.sync_title),
                                    "The selected book is not downloaded yet.\n Please download it from Bookshelf.", typeface, PlayerActivity.this);
                        }*/
                        //Toast.makeText(mContext,"Id : "+responseObj.getAssignedKitabooId(),Toast.LENGTH_SHORT).show();
                        /*DBController.getInstance(mContext).getManager().updateOrAddBookIdCollectionCBMIdMappingTable(UserController
                                .getInstance(mContext).getUserVO().getUserID(),mBookDao.getBookID(),responseObj.getAssignedKitabooId(),"");*/
                    }
                }

                @Override
                public void requestErrorOccured(com.hurix.service.exception.ServiceException exeption) {
                    if (exeption != null) {
                        ServiceException exceptionObj = exeption;
                        Map.Entry<String, Integer> entry = exceptionObj.getInvalidFields().entrySet().iterator().next();

                        if (!exceptionObj.getInvalidFields().isEmpty()) {
                            if (UserController.getInstance(PlayerActivity.this).getUserSettings().getIsAutoLogOffEnabled() && entry.getValue() == 103) {
                                showSessionExpiredAlert();
                            } else if (entry.getValue() == 103 && (!exeption.getResponseRequestType().equals(SERVICETYPES.REFRESH_USER_TOKEN))) {
                                mServicehandler.refreshUserToken(UserController.getInstance(getBaseContext()).getUserVO().getToken(), exeption.getResponseRequestType().toString(),
                                        this);
                            } else {
                                DialogUtils.displayToast(PlayerActivity.this, exeption.getMessage(), Toast.LENGTH_LONG, Gravity.CENTER);
                            }
                        }
                    }
                }
            });
        }
    }

    private void customSnackBar(final View rootview, final String message, final String actionText) {
        new Handler(getMainLooper()).post(new Runnable() {
            @Override
            public void run() {
                snackbar = Snackbar.make(rootview, message, Snackbar.LENGTH_LONG);
                snackbar.setAction(actionText, PlayerActivity.this);
                snackbar.setActionTextColor(getResources().getColor(R.color.kitaboo_main_color));
                snackbar.show();
                if (snackbar.getView() == null)
                    snackbar = Snackbar.make(rootview, message, Snackbar.LENGTH_LONG);
                snackbar.setAction(actionText, PlayerActivity.this);
                snackbar.setActionTextColor(getResources().getColor(R.color.kitaboo_main_color));
                snackbar.show();
            }
        });
    }


    private void copyAssets(File destinationFolder) {
        AssetManager assetManager = getAssets();
        String[] files = null;
        try {
            files = assetManager.list("");
        } catch (IOException e) {
            // Log.e("tag", "Failed to get asset file list.", e);
        }
        for (String filename : files) {
            if (filename.equals("kitabooscormplayer.html")) {
                InputStream in = null;
                OutputStream out = null;
                if (destinationFolder.exists()) {
                    try {
                        File destinationFile = new File(destinationFolder, filename);
                        if (!destinationFile.exists()) {
                            destinationFile.createNewFile();
                        }
                        out = new FileOutputStream(destinationFile);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
                try {
                    in = assetManager.open("kitabooscormplayer.html");
                    //File outFile = new File(mContext.getExternalFilesDir(null), filename);
                    //out = new FileOutputStream(outFile);
                    copyFile(in, out);
                    in.close();
                    in = null;
                    out.flush();
                    out.close();
                    out = null;
                } catch (IOException e) {
                    //  Log.e("tag", "Failed to copy asset file: " + filename, e);
                }
                break;
            }

        }
    }

    private void copyFile(InputStream in, OutputStream out) throws IOException {
        byte[] buffer = new byte[1024];
        int read;
        while ((read = in.read(buffer)) != -1) {
            out.write(buffer, 0, read);
        }
    }

    private String getBookFolderPathCompat(String bookID, String bookISBN) {
        /*try {
            File Destination =  getExternalFilesDir("");
            String convertedString = null;
            try {
                convertedString = String.valueOf(Destination);
                Constants.DATA = convertedString;
                Constants.ALLBOOKROOTPATH=Constants.DATA+"/"+Constants.ROOTFOLDER;
            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }*/

       /* File file = new File(Constants.ALLBOOKROOTPATH + bookISBN);
        if (file.exists()) {
            return Constants.ALLBOOKROOTPATH + bookISBN;
        }
        return Constants.ALLBOOKROOTPATH + bookID;*/
        return mthumbnailpath;
    }

    /*    public void processFIB(final com.hurix.database.datamodel.LinkVO objVO, final TextView linkView,
                               final boolean editMode) {
            try {
                mQuickActionPage = new QuickAction(mContext);

                mQuickActionPage.setAlertLayoutBottom(R.layout.fill_the_blanks);
                mQuickActionPage.getDialog().setCanceledOnTouchOutside(true);
                mQuickActionPage.getDialog().setCanceledOnTouchOutside(true);
                mQuickActionPage.getArrowUp().setImageResource(
                        R.drawable.transparent);
                mQuickActionPage.getArrowDown().setImageResource(
                        R.drawable.transparent);
                final EditText edtfib = (EditText) mQuickActionPage
                        .findViewById(R.id.edtfib);
                if (!editMode) {
                    edtfib.setKeyListener(new NumberKeyListener() {
                        public int getInputType() {
                            return InputType.TYPE_NULL;
                        }

                        protected char[] getAcceptedChars() {
                            return new char[]
                                    {};
                        }
                    });
                    mQuickActionPage.show(linkView);
                } else {
                    mQuickActionPage.showonBottom(linkView);
                }

                if (linkView.getText().length() != 0) {
                    edtfib.setCursorVisible(true);
                    edtfib.setText(linkView.getText());
                    edtfib.setSelection(linkView.getText().toString().length());
                }

                Button btnDone = (Button) mQuickActionPage
                        .findViewById(R.id.btndone);
                btnDone.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        if (editMode) {
                            String answer = edtfib.getText().toString().trim();
                            objVO.setDateTime(utils.Utils
                                    .getDateTime());
                            objVO.setSyncStatus(false);
                            objVO.setMode(getFIBMode(objVO, answer));
                            objVO.setUserAnswer(answer);
                            DBController
                                    .getInstance(mContext)
                                    .getManager()
                                    .manupulateFIBData(
                                            objVO,
                                            UserController.getInstance(mContext)
                                                    .getUserVO().getUserID(), GlobalDataManager
                                                    .getInstance().getLocalBookData().getBookID());
                            linkView.setText(answer);
                        }
                        mQuickActionPage.dismiss();
                    }
                });

            } catch (Exception e) {
                e.printStackTrace();
            }

        }*/

    private void jumpToBook(LinkVO objVO) {
        String url = objVO.getUrl() + ServiceConstant.SHARED_TOKEN + Utils.escapeString(token) + ServiceConstant.SHARED_USER_ID + userID + ServiceConstant.SHARED_USER_NAME + userName + ServiceConstant.SHARED_FIRST_NAME +
                firstName + ServiceConstant.SHARED_LAST_NAME
                + lastName
                + ServiceConstant.SHARED_ROLE_NAME + accountType
                + ServiceConstant.SHARED_PROFILE_PIC + profilePic;

        openLocalHTMLFile(url, objVO.getX(), objVO.getY(), objVO.isOpenByDefault(), objVO);
    }

    private void openInstruction(LinkVO objVO, View view) {
        String[] data = objVO.getProperties().split(";");
        String instructString = "";
        for (String str : data) {
            if (!TextUtils.isEmpty(str) && str.contains(INSTRUCTION)) {
                instructString = str;
                break;
            }
        }
        if (mInstructionPopup == null) {
            SDKManager.getInstance().getGetLocalBookData().closePopUp();
            if (!instructString.isEmpty()) {
                String[] instructData = instructString.split(":");
                if (instructData.length > 1) {
                    if (!TextUtils.isEmpty(instructData[1])) {
                        StandaloneInstruction mStandaloneInstruction = new StandaloneInstruction(PlayerActivity.this, instructData[1]);
                        mStandaloneInstruction.buildView(R.layout.instructionlayout);
                        View instructionView = mStandaloneInstruction.getView();
                        int mDeviceDensity = this.getResources().getDisplayMetrics().densityDpi;
                        int mWidth = (int) (200 * ((mDeviceDensity * 1f) / (PlayerUIConstants.BASE_DPI * 1f)));
                        mInstructionPopup = new PopupWindow(instructionView, mWidth, (int) (mWidth * 0.88f));
                        mInstructionPopup.setContentView(instructionView);
                        mStandaloneInstruction.setPopupWindow(mInstructionPopup);
                        mStandaloneInstruction.setLinkView(view);
                        mInstructionPopup.setFocusable(false);
                        mStandaloneInstruction.setPosition(view);
                        mInstructionPopup.setOutsideTouchable(false);

                    } else {
                        Toast.makeText(PlayerActivity.this, PlayerActivity.this.getResources().getString(R.string.no_instruction_markup), Toast.LENGTH_SHORT).show();
                    }
                }
            } else {
                Toast.makeText(PlayerActivity.this, PlayerActivity.this.getResources().getString(R.string.no_instruction_markup), Toast.LENGTH_SHORT).show();
            }
        } else {
            hideDialog();
        }
    }

    private void createMultiLinkPopUP(LinkVO objVO, View linkView) {
        try {
            mPopup = new MultiLinkPopup(this);
            mPopup.setData(objVO.getMultiLink(), objVO.getIconType());
            //mPopup.setListner(this);
            mPopup.showHidePopup(linkView);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String encryptExternalLinkUrl(LinkVO objVO) {
        String BookGUID = String.valueOf(isbn);
        String time_stamp = "" + (System.currentTimeMillis());
        String URL = objVO.getUrl() + "?bat=";
        Random rand = new Random();
        int rand_number = rand.nextInt(1000);
        String final_string = BookGUID + "|" + time_stamp + "|" + rand_number;
        String encoded_url = "";
        try {
            ConversionUtils.setKey("PORTO_ENCRYPTION");
            String encryptedString = ConversionUtils.encrypt_external_link(final_string);
            encoded_url = URLEncoder.encode(encryptedString);
            URL = URL.concat(encoded_url);
            if (URL.contains(".pdf") || URL.contains(".doc")) {
                URL = ServiceConstants.GOOGLE_DOCS + URL;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return URL;
    }

    private void openLocalHTMLFile(String path, float x, float y, boolean isDefaultOpen, LinkVO objVo) {


        Bundle b = new Bundle();
        b.putBoolean("isOriantationLocked", false);
        b.putString("path", path);
        b.putFloat("Xval", x);
        b.putFloat("Yval", y);

        if (isDefaultOpen) {
            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M || Settings.canDrawOverlays(this)) {
                SDKManager.getInstance().setAnyPopVisible(false);
                htmlIntent = new Intent(this, FloatingHTMLViewService.class);
                htmlIntent.putExtras(b);
                startService(htmlIntent);
            } else {
                Activity thisAct;
                thisAct = this;
                SDKManager.getInstance().setmLastClickedLinkVo(objVo);
                String packageName = this.getPackageName();
                Intent per_intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse("package:" + packageName));
                thisAct.startActivityForResult(per_intent, REQUEST_ALERTWINDOW_HTMLWRAP);
                SDKManager.getInstance().setAnyPopVisible(false);
            }

        } else {
            Intent intent;
            /*TODO RAVITEJA Below line of code needs to comment for Porto*/

            intent = new Intent(this, Webplayer.class);

            /* TODO RAVITEJA Below code needs to un comment for Porto */

            /*if (path.contains("http")) {
                intent = new Intent(this, Webplayer.class);
            }else {
                intent = new Intent(this, LinkWebViewPlayer.class);
            }*/
            b.putString("isbn", isbn);
            //intent = new Intent(this, PortoWebViewPlayer.class);
            intent.putExtras(b);
            this.startActivity(intent);
        }


    }

    private void processCommentsMarkUp(LinkVO objVO) {
        WindowManager manager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
        Display display = manager.getDefaultDisplay();
        dialog = new Dialog(this,
                android.R.style.Theme_Translucent_NoTitleBar);
        WindowManager.LayoutParams params = dialog.getWindow().getAttributes();
        params.width = GlobalDataManager.getInstance()
                .getPagesContainerWidth() / 2;
        params.height = (int) (GlobalDataManager.getInstance()
                .getPagesContainerHeight() / 2.5);
        dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        dialog.getWindow().setAttributes(params);
        dialog.setContentView(R.layout.commentsmarkup);
        String s = objVO.getUrl();
        LinearLayout commLayout = dialog
                .findViewById(R.id.commentsLayout);
        if (!s.contains("/")) {
            TextView tv = commLayout.findViewById(R.id.comments);
            tv.setText((objVO.getUrl()));
            tv.setTextColor(Color.BLACK);
        }
        TextView tv = commLayout
                .findViewById(R.id.commentsdescription);
        tv.setText(s);
        Button closebtn = dialog.findViewById(R.id.closebutton);
        dialog.show();
        dialog.setOnDismissListener(this);
        closebtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mDialog != null)
                    mDialog.dismiss();
                SDKManager.getInstance().setAnyPopVisible(false);
            }
        });
    }

    private void processWebAddress(LinkVO objVO) {
        if (objVO.getType() == LinkVO.LinkType.SURVEY) {
            linkVO = objVO;
            if (Utils.isOnline(this)) {

                params.add(new BasicNameValuePair(ServiceConstant.SERVICE_KEY_ENTRYID, objVO.getUrl()));
                params.add(new BasicNameValuePair(ServiceConstant.SERVICE_KEY_TYPE, "3"));
                params.add(new BasicNameValuePair(ServiceConstant.SERVICE_KEY_BOOKID, ""
                        + SDKManager.getInstance().getGetLocalBookData().getBookID()));

                if (Utils.isOnline(this)) {

                    if (mProgressDialog != null)
                        mProgressDialog.show();

                    mServicehandler.getSecureUrl(this, params);
                } else {
                    customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
                }

            } else {
                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
            }
        } else {
            Intent intent = new Intent(this, LinkWebViewPlayer.class);
            //Intent intent = new Intent(this, PortoWebViewPlayer.class);
            Bundle b = new Bundle();
            b.putBoolean("isOriantationLocked", false);
            b.putString("path", objVO.getUrl());
            if (objVO.getSecureUrlType() != null) {
                b.putString("streamType", objVO.getSecureUrlType());
            } else {
                b.putString("streamType", "");
            }
            intent.putExtras(b);
            startActivity(intent);
        }
    }

    private void processImage(LinkVO objVO, View view) {
        dialog = new Dialog(this,
                android.R.style.Theme_Translucent_NoTitleBar);
        String data = getBookFolderPathCompat(bookId
                + "", isbn)
                + File.separator + objVO.getUrl();
        File f = new File(data);
        if (f.exists()) {
            mDialogImagePopUp = new Dialog(this, R.style.NewDialog);
            mDialogImagePopUp.getWindow().setFlags(
                    WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL, 0xffffffff);
            mDialogImagePopUp.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
            mDialogImagePopUp.requestWindowFeature(Window.FEATURE_NO_TITLE);
            mImagePopupView = new LinkImagePopupView(this, f.getAbsolutePath(), R.layout.image_popup_view, mDialogImagePopUp, objVO.getImageCaption(), isbn);
            mDialogImagePopUp.setContentView(mImagePopupView.getView());
            imageView = mDialogImagePopUp.findViewById(R.id.imagelayoutepubreflow);
            imageView.setBackgroundColor(Color.WHITE);
            imageView.setMaxZoom(4f);
            WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
            lp.copyFrom(mDialogImagePopUp.getWindow().getAttributes());
            lp.width = WindowManager.LayoutParams.MATCH_PARENT;
            lp.height = WindowManager.LayoutParams.MATCH_PARENT;
            mDialogImagePopUp.show();
            mDialogImagePopUp.getWindow().setAttributes(lp);

            mDialogImagePopUp.setOnDismissListener(new DialogInterface.OnDismissListener() {
                @Override
                public void onDismiss(DialogInterface dialog) {
                }
            });
        } else {
            SDKManager.getInstance().setAnyPopVisible(false);
            DialogUtils.showOKAlert(view, 0, this, getResources().getString(R.string.alert_error),
                    getResources().getString(R.string.alert_tor_no_resources_found), this);

        }


    }

    public void openDocument(String path) {
        Intent intent = new Intent(Intent.ACTION_VIEW);
        String extension = android.webkit.MimeTypeMap
                .getFileExtensionFromUrl(Uri.parse(path).toString());
        String mimetype = android.webkit.MimeTypeMap.getSingleton()
                .getMimeTypeFromExtension(extension);
        if (extension.equalsIgnoreCase("") || mimetype == null) {
            intent.setDataAndType(Uri.parse(path), "text/*");
        } else {
            intent.setDataAndType(Uri.parse(path), mimetype);
        }

        PackageManager packageManager = getPackageManager();
        List<ResolveInfo> list = packageManager
                .queryIntentActivities(intent, 0);

        if (list.size() == 0) {
            DialogUtils.displayToast(this, getResources()
                    .getString(R.string.no_application_available), Toast.LENGTH_LONG, Gravity.CENTER);
            SDKManager.getInstance().setAnyPopVisible(false);
        } else {
            if (Build.VERSION.SDK_INT >= 24) {
                try {
                    Method m = StrictMode.class.getMethod("disableDeathOnFileUriExposure");
                    m.invoke(null);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            this.startActivityForResult(intent,
                    Constants.BOOKPLAYER_OPEN_PDF_REQUESTCODE);
        }
    }

    private void processSlideShow(LinkVO objVO) {
        Intent intent = new Intent(this, LinkSlideShowActivity.class);
        Bundle bundle = new Bundle();
        bundle.putStringArray("imagelist", ((objVO.getUrl()).split("\\;")));
        bundle.putString("imagecaption", objVO.getImageCaption());
        bundle.putLong("bookid", bookId);
        bundle.putString("isbn", isbn);
        intent.putExtras(bundle);
        startActivity(intent);
        overridePendingTransition(R.anim.zoom_in, 0);
    }

    private void processYouTubeVideo(LinkVO objVO) {
        /*String vidID = TextUtils.isEmpty(objVO.getUrl().trim()) == true ? "avP5d16wEp0"
                : objVO.getUrl().trim();
        Intent intent = null;
//        boolean lightboxMode = objVO.getTheme().equalsIgnoreCase("Light");
        boolean lightboxMode = true; //to allow orientation support.
        if (objVO.IsPlayListEnabled()) {
            intent = YouTubeStandalonePlayer.createPlaylistIntent(
                    (Activity) this,
                    getResources().getString(
                            R.string.youtubeDeveloperKey), vidID, 0, 0,
                    objVO.IsAutoplayEnabled(), lightboxMode);

        } else {
            intent = YouTubeStandalonePlayer.createVideoIntent(
                    (Activity) this,
                    getResources().getString(
                            R.string.youtubeDeveloperKey), vidID, 0,
                    objVO.IsAutoplayEnabled(), lightboxMode);

        }

        if (intent != null) {
            if (canResolveIntent(intent, this)) {
                //mContext.startActivity(intent);
                ((Activity) this).startActivityForResult(intent,
                        REQ_START_STANDALONE_PLAYER);
            } else {
                // Could not resolve the intent - must need to install or update
                // the YouTube API service.
                YouTubeInitializationResult.SERVICE_MISSING.getErrorDialog(
                        (Activity) this,
                        Constants.REQ_RESOLVE_SERVICE_MISSING).show();
                SDKManager.getInstance().setAnyPopVisible(false);
            }
        }*/
    }

    private void processKalturaVideo(LinkVO objVO) {
        if (!TextUtils.isEmpty(objVO.getUrl())) {
            Intent intent = new Intent(this, LinkVideoPlayer.class);
            Bundle b = new Bundle();
            b.putBoolean("isOriantationLocked", false);
            b.putString("videopath", objVO.getUrl().trim());
            b.putBoolean("isOnline", true);
            b.putString("streamType", objVO.getType().toString());
            if (SDKManager.getInstance().getGetLocalBookData().getClassList().size() > 0) {
                b.putString("classID", SDKManager.getInstance().getGetLocalBookData()
                        .getClassList().get(0).getID());
            } else {
                b.putString("classID", "");
            }
            intent.putExtras(b);
            startActivity(intent);
        }

    }
    /*private void processGroupImage(LinkVO objVO) {
        dialog = new Dialog(this,
                android.R.style.Theme_Translucent_NoTitleBar);
        dialog.getWindow().setFlags(
                WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL, 0xff000000);
        dialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        mImageManager = new LinkImageStackView(this);
        mImageManager.setObjVo(objVO);
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB) {
            mImageManager.buildView(R.layout.imagestackxml, dialog);
        }
        dialog.setContentView(mImageManager.getMyStackView());
        dialog.setOnDismissListener(this);
        dialog.show();
    }*/


    private void processAudioSync(LinkVO objVO, View view, float seekToTime, boolean isSeekReq) {

        String data = SDKManager.getInstance().getBaseUrlReflowableEpub()
                + objVO.getUrl();
        SDKManager.getInstance().setLastAudioSrc(objVO.getUrl());


        File f = new File(data);
        if (f.exists()) {
            //SDKManager.getInstance().setLinkSequence(objVO.getLinkSequence());
            // Log.d("RAVITEJA", objVO.getLinkSequence() + "");
            SDKManager.getInstance().setCurrentAudioPlayingFolioID(objVO.getFolioID());
            // Log.d("RAVITEJA_FOLIO", objVO.getFolioID());

            SDKManager.getInstance().setAudioSyncClicked(true);
            mAudioManager = new LinkAudioView(this, data, objVO, bookId, isbn, currentFoliId,
                    audioSeekBarVisibility, audioTimeVisibility, audioDragIconVisibility, audioPlayerPopupPosition, mReaderType);
            if (isSeekReq)
                mAudioManager.playAudioOnTime(seekToTime);
            mAudioManager.buildView(R.layout.audiolayout);
            mAudioManager.setAudioControlListener(PlayerActivity.this);
            if (objVO.isAudioSync()) {

            }
            if (!SDKManager.getInstance().getGetLocalBookData().isIsReadAloudAutoPlay() && !SDKManager.getInstance().getGetLocalBookData().isReadToMe()) {
                View audioview = mAudioManager.getView();
                if (objVO.isAudioSync()) {
                    mAudioPopup = new PopupWindow(audioview, 0,
                            0);
                } else {
                    mAudioPopup = new PopupWindow(audioview, WindowManager.LayoutParams.WRAP_CONTENT,
                            WindowManager.LayoutParams.WRAP_CONTENT);
                }
                mAudioPopup.setFocusable(true);
                mAudioPopup.setOutsideTouchable(false);
                mAudioPopup.setBackgroundDrawable(new BitmapDrawable());
                mAudioPopup.setContentView(audioview);
            }
            mAudioManager.setAudioPlayerPopup(mAudioPopup);
            mAudioManager.setLinkView(view);
            if (mAudioPopup != null) {
                mAudioManager.setAudioPlayerPosition();
                mAudioPopup.setFocusable(false);
                mAudioPopup.setOutsideTouchable(false);
                SDKManager.getInstance().setmState(com.hurix.commons.notifier.GlobalDataManager.PlayerState.NAVIGATION);
                mAudioPopup.setOnDismissListener(new PopupWindow.OnDismissListener() {
                    @Override
                    public void onDismiss() {
                        // onDismiss();
                        SDKManager.getInstance().setAudioSyncClicked(false);
                        if (mAudioManager != null)
                            mAudioManager.close();
                        mAudioManager = null;
                        SDKManager.getInstance().setCurrAudioSyncRect(null);
                        SDKManager.getInstance().setAnyPopVisible(false);
                    }
                });

                if (mAudioManager != null && mAudioManager.getView() != null) {

                    mAudioManager.getView().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                          /*  if (mAudioManager != null)
                                mAudioManager.setLastAudioPlaySpeed();*/
                            hideTopBar();
                        }
                    }, 2000);
                }


            }
        } else {
            SDKManager.getInstance().setAnyPopVisible(false);
            DialogUtils.showOKAlert(view, 0, this, getResources().getString(R.string.alert_error),
                    getResources().getString(R.string.alert_tor_no_resources_found), this);

        }

        if (SDKManager.getInstance().isFromUserTouch()) {
            SDKManager.getInstance().setFromUserTouch(false);
        }

        SDKManager.getInstance().setAudioManger(mAudioManager);
    }

    private void processAudio(LinkVO objVO, View view) {

        String data = getBookFolderPathCompat(bookId
                + "", isbn)
                + File.separator + objVO.getUrl();
        File f = new File(data);
        if (f.exists()) {
            //SDKManager.getInstance().setLinkSequence(objVO.getLinkSequence());
            // Log.d("RAVITEJA", objVO.getLinkSequence() + "");
            SDKManager.getInstance().setCurrentAudioPlayingFolioID(objVO.getFolioID());
            // Log.d("RAVITEJA_FOLIO", objVO.getFolioID());

            SDKManager.getInstance().setAudioSyncClicked(true);
            mAudioManager = new LinkAudioView(this, data, objVO, bookId, isbn, currentFoliId,
                    audioSeekBarVisibility, audioTimeVisibility, audioDragIconVisibility, audioPlayerPopupPosition, mReaderType);
            mAudioManager.buildView(R.layout.audiolayout);
            mAudioManager.setAudioControlListener(PlayerActivity.this);
            if (objVO.isAudioSync()) {

            }
            if (!SDKManager.getInstance().getGetLocalBookData().isIsReadAloudAutoPlay() && !SDKManager.getInstance().getGetLocalBookData().isReadToMe()) {
                View audioview = mAudioManager.getView();
                if (objVO.isAudioSync()) {
                    mAudioPopup = new PopupWindow(audioview, 0,
                            0);
                } else {
                    mAudioPopup = new PopupWindow(audioview, WindowManager.LayoutParams.WRAP_CONTENT,
                            WindowManager.LayoutParams.WRAP_CONTENT);
                }
               /* mAudioPopup.setFocusable(true);
                mAudioPopup.setOutsideTouchable(false);
                mAudioPopup.setBackgroundDrawable(new BitmapDrawable());*/
                mAudioPopup.setContentView(audioview);
            }
            mAudioManager.setAudioPlayerPopup(mAudioPopup);
            mAudioManager.setLinkView(view);
            if (mAudioPopup != null) {
                mAudioManager.setAudioPlayerPosition();
                mAudioPopup.setFocusable(false);
                mAudioPopup.setOutsideTouchable(false);
                SDKManager.getInstance().setmState(com.hurix.commons.notifier.GlobalDataManager.PlayerState.NAVIGATION);
                mAudioPopup.setOnDismissListener(new PopupWindow.OnDismissListener() {
                    @Override
                    public void onDismiss() {
                        // onDismiss();
                        SDKManager.getInstance().setAudioSyncClicked(false);
                        if (mAudioManager != null)
                            mAudioManager.close();
                        mAudioManager = null;
                        SDKManager.getInstance().setCurrAudioSyncRect(null);
                        SDKManager.getInstance().setAnyPopVisible(false);
                    }
                });
            }
        } else {
            SDKManager.getInstance().setAnyPopVisible(false);
            DialogUtils.showOKAlert(view, 0, this, getResources().getString(R.string.alert_error),
                    getResources().getString(R.string.alert_tor_no_resources_found), this);

        }

    }

    private void processVideo(LinkVO objVO) {
        playVideoByType(objVO);
    }

    private void initDefaultVideoPlayer(LinkVO objVO) {
        String data = getBookFolderPathCompat(bookId
                + "", isbn)
                + File.separator + objVO.getUrl();
        File f = new File(data);
        if (f.exists()) {
            try {
                Intent intent = new Intent(this, LinkVideoPlayer.class);
                Bundle b = new Bundle();
                b.putBoolean("isOriantationLocked", false);
                b.putString("videopath", data);
                b.putString("isbnNo", isbn);
                b.putBoolean("isInline", objVO.isInline());
                b.putBoolean("isOnline", objVO.getmResourceClickMode().equalsIgnoreCase("online"));
                if (objVO.getType() == LinkVO.LinkType.VIDEO) {
                    b.putBoolean("isOnline", false);
                }

                intent.putExtras(b);
                this.startActivityForResult(intent,
                        Constants.BOOKPLAYER_PROCESS_LINKTYPE_REQUESTCODE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public void onDismiss(DialogInterface dialog) {

    }

    public void playVideoByType(LinkVO objVO) {
        mProgressDialog.show();
        ArrayList<NameValuePair> params = new ArrayList<NameValuePair>();
        if (objVO.getType().toString().equalsIgnoreCase(LinkVO.LinkType.KALTURASTREAMING.toString())) {
            if (Utils.isOnline(this)) {
                params.add(new BasicNameValuePair(ServiceConstant.SERVICE_KEY_ENTRYID, objVO.getUrl().trim()));
                params.add(new BasicNameValuePair(ServiceConstant.SERVICE_KEY_TYPE, "1"));
                mServicehandler.getSecureUrl(this, params);
            } else {
                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
            }
        } else if (objVO.getType().toString().equalsIgnoreCase(LinkVO.LinkType.VIMEO_VIDEO.toString())) {
            if (Utils.isOnline(this)) {
                params.add(new BasicNameValuePair(ServiceConstant.SERVICE_KEY_VIMEOID, objVO.getUrl().substring(objVO.getUrl().lastIndexOf('/') + 1)));
                params.add(new BasicNameValuePair(ServiceConstant.SERVICE_KEY_DURATION, 0 + ""));
                mServicehandler.getVimeoUrl(this, params);
            } else {
                customSnackBar(mainview, getResources().getString(R.string.no_internet_try_again), getResources().getString(R.string.dismiss_snackbar));
            }
        } else {
            initDefaultVideoPlayer(objVO);
        }

    }

    public File decryptFilePath(String path) {
        File mediaFile = null;
        try {

            File fl = new File(path);
            String parentfile = fl.getParent();

            String key = isbn;

            File file = new File(path);
            long len = file.length();
            byte[] data = new byte[(int) len];
            FileInputStream in = new FileInputStream(file);
            in.read(data);
            in.close();

            byte[] fileda = EncryptionManager.decrypt(data, key, EncryptionManager.LIGHT_ENCRYPTION_SIZE);

            mediaFile = new File(parentfile + "/dummy.html");
            if (mediaFile.exists()) {
                mediaFile.delete();
            }
            mediaFile.createNewFile();
            FileOutputStream fos = new FileOutputStream(mediaFile);
            fos.write(fileda);
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();

        }
        return mediaFile;
    }

    /**
     * Callback is responsible to handle the position of searched data
     *
     * @param currentPositionOfPageSearchData
     */
    @Override
    public void updateCurrentPositionOfPageSearchData(int currentPositionOfPageSearchData) {
        if (mReaderType == EBookType.FIXEDKITABOO) {

            if (mIsElasticSearch) {
                //          SDKManager.getInstance().setCurrentPositionOfPageSearchData(currentPositionOfPageSearchData);
            }
        }
    }

    /**
     * Responsible for getting visible CFI on page
     *
     * @param cfidList Arraylist of all visible CFI of current page.
     */
    @Override
    public void onCfidReceived(ArrayList<String> cfidList, String cfiOpenTimeStamp) {
        if (mReaderType == EBookType.REFLOWEPUB) {
            if (mCFIDArrayList != null && !mCFIDArrayList.isEmpty()) {
                savePageTrackingDataForReflow(mLastReflowPage, mCFIDArrayList, isFromBackpressed);
            }
            SDKManager.getInstance().setOpenTimeStampOfCFID(Utils.getDateTime());

            for (String cfid : cfidList) {
                if (!TextUtils.isEmpty(cfid)) {
                    if (mCFIDArrayList == null) {
                        mCFIDArrayList = new ArrayList<>();
                    }
                    mCFIDArrayList.add(cfid);
                }
            }

            mCfiOpenTimeStamp = cfiOpenTimeStamp;
            updateRemaningTime();

        }
    }

    private void updateRemaningTime() {
        if (SDKManager.getInstance().getCurrentCFIDCount() != 0) {

            final String numberofCFI = com.hurix.commons.utils.Utils.getSharedPreferenceStringValue(
                    this, Constants.SHELF_PREFS_NAME, Constants.NUMBER_OF_CFI, "");

            if (numberofCFI != null && !numberofCFI.isEmpty()) {
                String serverAverage = com.hurix.commons.utils.Utils.getSharedPreferenceStringValue(
                        this, Constants.SHELF_PREFS_NAME, Constants.SERVER_AVERAGE_TIME, "");

                String localAverage = com.hurix.commons.utils.Utils.getSharedPreferenceStringValue(
                        this, Constants.SHELF_PREFS_NAME, Constants.CALCULATED_AVERAGE_TIME, "");

                if ((serverAverage != null && !serverAverage.isEmpty()) && (localAverage != null && !localAverage.isEmpty())) {
                    final long serverAverageTime = Long.parseLong(serverAverage);
                    final long localAverageTime = Long.parseLong(localAverage);


                    int serverAverageTimeInSec = 0;
                    if ((double) serverAverageTime > 60) {
                        serverAverageTimeInSec = (int) Math.round((double) serverAverageTime / 60d);
                    } else if ((double) serverAverageTime > 0) {
                        serverAverageTimeInSec = 1;
                    }

                    int localAverageTimeInSec = 0;
                    if ((double) localAverageTime > 60) {
                        localAverageTimeInSec = (int) Math.round((double) localAverageTime / 60d);
                    } else if ((double) localAverageTime > 0) {
                        localAverageTimeInSec = 1;
                    }


                    final int finalServerAverageTimeInSec = serverAverageTimeInSec;
                    final int finalLocalAverageTimeInSec = localAverageTimeInSec;


                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            findViewById(R.id.time_left_layout).setVisibility(View.GONE);
                            long finalAverageTime;
                            if (Utils.isOnline(PlayerActivity.this)) {
                                finalAverageTime = finalServerAverageTimeInSec;
                            } else {
                                finalAverageTime = (finalServerAverageTimeInSec + finalLocalAverageTimeInSec) / 2;
                            }
                            if (finalAverageTime != 0) {
                                mTimeLeftShowing.setText(String.format("%d%s", (Integer.parseInt(numberofCFI) -
                                        SDKManager.getInstance().getCurrentCFIDCount())
                                        * finalAverageTime, getResources().getString(R.string.min_left)));
                                mHowMuchTimeLeft = String.format("%d%s", (Integer.parseInt(numberofCFI) -
                                        SDKManager.getInstance().getCurrentCFIDCount())
                                        * finalAverageTime, getResources().getString(R.string.min_left));

                                renderView.setReadingTimeLeft(mTimeLeftShowing.getText().toString());

                            } else {
                                double d1 = getResources().getInteger(R.integer.default_average_time);
                                mTimeLeftShowing.setText(String.format("%d%s", (Integer.parseInt(numberofCFI) -
                                        SDKManager.getInstance().getCurrentCFIDCount())
                                        * (int) Math.round(d1 / 60d), getResources().getString(R.string.min_left)));

                                mHowMuchTimeLeft = String.format("%d%s", (Integer.parseInt(numberofCFI) -
                                        SDKManager.getInstance().getCurrentCFIDCount())
                                        * (int) Math.round(d1 / 60d), getResources().getString(R.string.min_left));

                                renderView.setReadingTimeLeft(mTimeLeftShowing.getText().toString());
                            }
                        }
                    });
                } else {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {

                            findViewById(R.id.time_left_layout).setVisibility(View.GONE);

                            double d1 = getResources().getInteger(R.integer.default_average_time);
                            mTimeLeftShowing.setText(String.format("%d%s", (Integer.parseInt(numberofCFI) -
                                    SDKManager.getInstance().getCurrentCFIDCount())
                                    * (int) Math.round(d1 / 60d), getResources().getString(R.string.min_left)));

                            renderView.setReadingTimeLeft(mTimeLeftShowing.getText().toString());

                            mHowMuchTimeLeft = String.format("%d%s", (Integer.parseInt(numberofCFI) -
                                    SDKManager.getInstance().getCurrentCFIDCount())
                                    * (int) Math.round(d1 / 60d), getResources().getString(R.string.min_left));

                        }
                    });
                }


                mIsScrolled = true;

            }

        }
    }

    @Override
    public void getFirstCFIOnCurrentPage(String cfid) {
        if (cfid != null && !cfid.isEmpty()) {
            currentCFID = DatabaseManager.getInstance(this).getCurrentCFIDCount(cfid, bookId, userID);
            SDKManager.getInstance().setCurrentCFIDCount(currentCFID);
        }
    }


    @Override
    public void onClick(View v) {
        if (v != null && snackbar != null) {
            snackbar.dismiss();
        }

        int id = v.getId();

        if (id == R.id.search_prev_text) {
            if (mReaderType == EBookType.REFLOWEPUB) {
                renderView.onPreviousClickElasticSearch();
            } else {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    if (mReaderType == EBookType.FIXEDKITABOO) {
                        onSearchPrevClickedForLandscape();
                    } else {
                        onSearchPreviousClicked();
                    }
                } else {
                    onSearchPreviousClicked();
                }
            }

        } else if (id == R.id.search_next_text) {
            if (mReaderType == EBookType.REFLOWEPUB) {
                renderView.onNextClickElasticSearch();
            } else {
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    if (mReaderType == EBookType.FIXEDKITABOO) {
                        onSearchNextClickedForLandscape();
                    } else {
                        onSearchNextClicked();
                    }
                } else {
                    onSearchNextClicked();
                }
            }

        } else if (id == R.id.search_maximize_text) {
            if (mTabSearchList.getVisibility() == View.VISIBLE) {
                mTabSearchList.setVisibility(View.GONE);
            } else {
                mTabSearchList.setVisibility(View.VISIBLE);
                //   customSearchPanel(false);
            }
        } else if (id == R.id.elastic_search_cancel) {
            com.hurix.commons.notifier.GlobalDataManager.getInstance().setElasticSearchActive(false);
            SDKManager.getInstance().setElasticSearchActive(false);
            renderView.isElasticSearchActive(false);
            if (mReaderType == EBookType.REFLOWEPUB) {
                renderView.clearAllElasticSearchData();
            }
            renderView.highlightSearchText("", null, mIsElasticSearch, false, false);
            GlobalDataManager.getInstance().setCurrMode(GlobalDataManager.PlayerState.NAVIGATION);
            onSearchCancelClick();
            customSearchPanel(mIsElasticSearch);
        } else if (id == R.id.txtnext) {
            //renderView.deActivateHighlight();
            //  onTocitemClick("","", "", false,getCurrPageIDByDisplayNum(currentFoliId)+1);

            final String nextFolioID = getNextFoliId(currentFoliId);
            final int mpageid = getCurrPageIDByDisplayNum(nextFolioID);

            if (mpageid != -1) {
                if (SDKManager.getInstance().getPageMode() == 1) {
                    renderView.autoPageChange(mpageid - 1);
                } else {
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                        renderView.autoPageChange(mpageid - 1);
                    } else {
                        if (mpageid == 0 || mpageid == 1) {
                            renderView.autoPageChange(0);
                        } else {
                            renderView.autoPageChange(mpageid / 2);
                        }
                    }
                }
            }


        } else if (id == R.id.txtprevious) {
            //renderView.deActivateHighlight();
            final String previousFolioID = getPreviousFolioId(currentFoliIdPrev);
            final int mpageid = getCurrPageIDByDisplayNum(previousFolioID);
            if (mpageid != -1) {
                if (SDKManager.getInstance().getPageMode() == 1) {
                    renderView.autoPageChange(mpageid - 1);
                } else {
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                        renderView.autoPageChange(mpageid - 1);
                    } else {
                        if (mpageid == 0 || mpageid == 1) {
                            renderView.autoPageChange(0);
                        } else {
                            renderView.autoPageChange(mpageid / 2);
                        }
                    }
                }
            }
        } else if (id == R.id.zoom_100) {
            if (getScaleValue(((Button) v).getText().toString()) > SDKManager.getInstance().getZoomLevel()) {
                renderView.zoomLevel(ZOOM_INC, getScaleValue(((Button) v).getText().toString()));

            } else {
                renderView.zoomLevel(ZOOM_DEC, getScaleValue(((Button) v).getText().toString()));

            }
            SDKManager.getInstance().setZoomLevel(getScaleValue(((Button) v).getText().toString()));
        } else if (id == R.id.zoom_125) {

            if (getScaleValue(((Button) v).getText().toString()) > SDKManager.getInstance().getZoomLevel()) {
                renderView.zoomLevel(ZOOM_INC, getScaleValue(((Button) v).getText().toString()));

            } else {
                renderView.zoomLevel(ZOOM_DEC, getScaleValue(((Button) v).getText().toString()));

            }
            SDKManager.getInstance().setZoomLevel(getScaleValue(((Button) v).getText().toString()));
        } else if (id == R.id.zoom_150) {
            if (getScaleValue(((Button) v).getText().toString()) > SDKManager.getInstance().getZoomLevel()) {
                renderView.zoomLevel(ZOOM_INC, getScaleValue(((Button) v).getText().toString()));

            } else {
                renderView.zoomLevel(ZOOM_DEC, getScaleValue(((Button) v).getText().toString()));

            }
            SDKManager.getInstance().setZoomLevel(getScaleValue(((Button) v).getText().toString()));
        } else if (id == R.id.zoom_175) {
            if (getScaleValue(((Button) v).getText().toString()) > SDKManager.getInstance().getZoomLevel()) {
                renderView.zoomLevel(ZOOM_INC, getScaleValue(((Button) v).getText().toString()));

            } else {
                renderView.zoomLevel(ZOOM_DEC, getScaleValue(((Button) v).getText().toString()));

            }
            SDKManager.getInstance().setZoomLevel(getScaleValue(((Button) v).getText().toString()));
        } else if (id == R.id.zoom_200) {
            if (getScaleValue(((Button) v).getText().toString()) > SDKManager.getInstance().getZoomLevel()) {
                renderView.zoomLevel(ZOOM_INC, getScaleValue(((Button) v).getText().toString()));

            } else {
                renderView.zoomLevel(ZOOM_DEC, getScaleValue(((Button) v).getText().toString()));

            }
            SDKManager.getInstance().setZoomLevel(getScaleValue(((Button) v).getText().toString()));
        }


    }


    public int getScaleValue(String value) {
        int scale;
        switch (value) {
            // case statements
            // values must be of same type of expression
            case "100":
                // Statements
                scale = 1;
                break;

            case "125":
                scale = 2;
                break;

            case "150":
                scale = 3;
                break;

            case "175":
                scale = 4;
                break;

            case "200":
                scale = 5;
                break;
            default:
                scale = 1;
                break;
        }
        return scale;
    }

    private void onSearchNextClickedForLandscape() {
        searchQuerylength = mSearchQuery.split(" ").length;
        SDKManager.getInstance().setSearchedWordLenght(searchQuerylength);
        if (mSearchArrayList.size() > 0 && SDKManager.getInstance().getSearchPageWiseIterationPosition() < mSearchArrayList.size() - 1) // If Page Wise position greater than size -> no next page
        {
            if (SDKManager.getInstance().getCurrentPositionOfPageSearchData() < SdkDatabaseManager.getInstance(PlayerActivity.this).getSearchHightlightRectsForCurrentPage().size() - 1
                    && SDKManager.getInstance().getCurrentPositionOfPageSearchData() + searchQuerylength <= SdkDatabaseManager.getInstance(PlayerActivity.this).getSearchHightlightRectsForCurrentPage().size() - 1) // If line position more than size -> move to next word
            {
                SDKManager.getInstance().setCurrentPositionOfPageSearchData(SDKManager.getInstance().getCurrentPositionOfPageSearchData() + searchQuerylength);
                renderView.drawSequesntialSearchHighlight();  // method responsible to draw sequential word highlight
            } else {
                SDKManager.getInstance().setSearchPageWiseIterationPosition(SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1);
                if (mSearchArrayListPageWise.size() > SDKManager.getInstance().getSearchPageWiseIterationPosition()) {
                    SDKManager.getInstance().setCurrentPositionOfPageSearchData(0);
                    renderView.navigatePage(Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()), "", "", isMobile, false);
                    //  navigatePageByFolioId("", Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()));

                    if (!isMobile) {
                        if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 == 0
                                && mSearchArrayListPageWise.size() > SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1) {

                            onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1), mIsElasticSearch, false, false);
                        }

                        new Handler().postDelayed(new Runnable() {
                            @Override
                            public void run() {

                                onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, false, false);

                            }
                        }, 500);
                    } else {

                        onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, false, false);

                    }
                } else {
                    SDKManager.getInstance().setSearchPageWiseIterationPosition(SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1);
                    Toast.makeText(PlayerActivity.this, "No next search available", Toast.LENGTH_SHORT).show();
                    //mNextIcon.setClickable(false);
                }

            }
        } else {
            Toast.makeText(PlayerActivity.this, "No next search available", Toast.LENGTH_SHORT).show();
            //mNextIcon.setClickable(false);
        }
    }

    private void onSearchPrevClickedForLandscape() {
        searchQuerylength = mSearchQuery.split(" ").length;
        SDKManager.getInstance().setSearchedWordLenght(searchQuerylength);
        if (mSearchArrayList.size() > 0 && (SDKManager.getInstance().getSearchPageWiseIterationPosition() > 0 || SDKManager.getInstance().getCurrentPositionOfPageSearchData() != 0))   // If Page Wise position less than zero -> no Previous page
        {
            if (SDKManager.getInstance().getCurrentPositionOfPageSearchData() > 0) // If line position less than zero -> move to previous word
            {
                SDKManager.getInstance().setCurrentPositionOfPageSearchData(SDKManager.getInstance().getCurrentPositionOfPageSearchData() - searchQuerylength);
                renderView.drawSequesntialSearchHighlight();  // method responsible to draw sequential word highlight
            } else {
                SDKManager.getInstance().setSearchPageWiseIterationPosition(SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1);
                renderView.navigatePage(Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()), "", "", isMobile, false);
                //   navigatePageByFolioId("",Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()));
                if (!isMobile) {
                    if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 != 0 &&
                            Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) != 1) {
                        if (mSearchArrayListPageWise.size() > SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1
                                && SDKManager.getInstance().getSearchPageWiseIterationPosition() >= 1) {
                            onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().
                                            getSearchPageWiseIterationPosition() - 1),
                                    mIsElasticSearch, true, false);
                        }
                    }
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {

                            //if search result is start from page 1 or odd page number in landscape mode ; loading only single page highlight
                            onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, true, false);


                        }
                    }, 500);
                } else {

                    onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, true, false);
                }

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        //if search result is start from page 1 or odd page number in landscape mode ; loading only single page highlight
                        if (SDKManager.getInstance().getCurrentPositionOfPageSearchData() > 0) // If line position less than zero -> move to previous word
                        {
                            SDKManager.getInstance().setCurrentPositionOfPageSearchData(SDKManager.getInstance().getCurrentPositionOfPageSearchData() - searchQuerylength);
                            renderView.drawSequesntialSearchHighlight();  // method responsible to draw sequential word highlight
                        }

                    }
                }, 700);
            }
        } else {
            Toast.makeText(PlayerActivity.this, "No Previous search available", Toast.LENGTH_SHORT).show();
            //mPrevIcon.setClickable(false);
        }
    }

    private void onSearchNextClicked() {
        isNextCliked = true;
        searchQuerylength = mSearchQuery.split(" ").length;
        SDKManager.getInstance().setSearchedWordLenght(searchQuerylength);
        if (mReaderType == EBookType.FIXEDKITABOO) {
            if (mSearchArrayList.size() > 0 && SDKManager.getInstance().getSearchPageWiseIterationPosition() < mSearchArrayList.size() - 1) // If Page Wise position greater than size -> no next page
            {
                if (SDKManager.getInstance().getCurrentPositionOfPageSearchData() < SdkDatabaseManager.getInstance(PlayerActivity.this).getSearchHightlightRectsForCurrentPage().size() - 1
                        && SDKManager.getInstance().getCurrentPositionOfPageSearchData() + searchQuerylength <= SdkDatabaseManager.getInstance(PlayerActivity.this).getSearchHightlightRectsForCurrentPage().size() - 1) // If line position more than size -> move to next word
                {
                    SDKManager.getInstance().setCurrentPositionOfPageSearchData(SDKManager.getInstance().getCurrentPositionOfPageSearchData() + searchQuerylength);
                    renderView.drawSequesntialSearchHighlight();  // method responsible to draw sequential word highlight
                } else {
                    //searchWordWiseIterationPosition = 0;
                    SDKManager.getInstance().setSearchPageWiseIterationPosition(SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1);
                    if (SDKManager.getInstance().getSearchPageWiseIterationPosition() < mSearchArrayListPageWise.size()) {

                        renderView.navigatePage(Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()), "", "", isMobile, false);

                        // navigatePageByFolioId("", Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()));
                        onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, false, false);
                    } else {
                        SDKManager.getInstance().setSearchPageWiseIterationPosition(SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1);
                        Toast.makeText(PlayerActivity.this, "No next search available", Toast.LENGTH_SHORT).show();

                    }

                }
            } else {
                Toast.makeText(PlayerActivity.this, "No next search available", Toast.LENGTH_SHORT).show();
                //mNextIcon.setClickable(false);
            }
        } else {
            if (mReaderType == EBookType.FIXEDEPUB) {
                if (SDKManager.getInstance().getSearchIndexEpub() >= 0 && SDKManager.getInstance().getSearchIndexEpub() <= mSearchArrayList.size() && SDKManager.getInstance().getSearchIndexEpub() + 1 <= mSearchArrayList.size() - 1) {
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                        if (SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub() + 1).getChapterName())) {
                            SDKManager.getInstance().setSearchIndexEpub(SDKManager.getInstance().getSearchIndexEpub() + 1);
                            SDKManager.getInstance().setSearchSequentialIndexEpub(SDKManager.getInstance().getSearchSequentialIndexEpub() + 1);
                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false, true);
                        } else {
                            SDKManager.getInstance().setSearchIndexEpub(SDKManager.getInstance().getSearchIndexEpub() + 1);
                            SDKManager.getInstance().setSearchSequentialIndexEpub(0);
                            renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                        }
                    } else {
                        if (SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub() + 1).getChapterName())) {
                            SDKManager.getInstance().setSearchIndexEpub(SDKManager.getInstance().getSearchIndexEpub() + 1);
                            SDKManager.getInstance().setSearchSequentialIndexEpub(SDKManager.getInstance().getSearchSequentialIndexEpub() + 1);
                            renderView.drawSequesntialSearchHighlight();
                        } else {
                            SDKManager.getInstance().setSearchIndexEpub(SDKManager.getInstance().getSearchIndexEpub() + 1);
                            if (SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[1].getChapterName()))
                                renderView.drawSequesntialSearchHighlight();
                            else {
                                SDKManager.getInstance().setSearchSequentialIndexEpub(0);
                                renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                            }
                        }
                    }
                } else
                    Toast.makeText(PlayerActivity.this, "No next search available", Toast.LENGTH_SHORT).show();
            }
        }

    }

    private void onSearchPreviousClicked() {
        isPrevClicked = true;
        searchQuerylength = mSearchQuery.split(" ").length;
        SDKManager.getInstance().setSearchedWordLenght(searchQuerylength);
        if (mReaderType == EBookType.FIXEDKITABOO) {
            if (mSearchArrayList.size() > 0 && (SDKManager.getInstance().getSearchPageWiseIterationPosition() > 0 || SDKManager.getInstance().getCurrentPositionOfPageSearchData() != 0))   // If Page Wise position less than zero -> no Previous page
            {
                if (SDKManager.getInstance().getCurrentPositionOfPageSearchData() > 0) // If line position less than zero -> move to previous word
                {
                    SDKManager.getInstance().setCurrentPositionOfPageSearchData(SDKManager.getInstance().getCurrentPositionOfPageSearchData() - searchQuerylength);
                    renderView.drawSequesntialSearchHighlight();  // method responsible to draw sequential word highlight
                } else {
                    SDKManager.getInstance().setSearchPageWiseIterationPosition(SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1);
                    renderView.navigatePage(Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()), "", "", isMobile, false);

                    //    navigatePageByFolioId("",Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()));
                    onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, true, false);

                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            if (SDKManager.getInstance().getCurrentPositionOfPageSearchData() > 0) // If line position less than zero -> move to previous word
                            {
                                SDKManager.getInstance().setCurrentPositionOfPageSearchData(SDKManager.getInstance().getCurrentPositionOfPageSearchData() - searchQuerylength);
                                renderView.drawSequesntialSearchHighlight();  // method responsible to draw sequential word highlight
                            }
                        }
                    }, 500);
                    //searchWordWiseIterationPosition = SdkDatabaseManager.getInstance(PlayerActivity.this).getSearchHightlightRectsForCurrentPage().size();
                }
            } else {
                Toast.makeText(PlayerActivity.this, "No Previous search available", Toast.LENGTH_SHORT).show();
                //mPrevIcon.setClickable(false);
            }
        } else {
            if (mReaderType == EBookType.FIXEDEPUB) {
                if (SDKManager.getInstance().getSearchIndexEpub() > 0) {
                    if (SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub() - 1).getChapterName())) {
                        SDKManager.getInstance().setSearchIndexEpub(SDKManager.getInstance().getSearchIndexEpub() - 1);
                        SDKManager.getInstance().setSearchSequentialIndexEpub(SDKManager.getInstance().getSearchSequentialIndexEpub() - 1);
                        if (mSearchArrayListPageWise != null && !mSearchArrayListPageWise.isEmpty())
                            mSearchArrayListPageWise.clear();
                        for (int i = 0; i < mSearchArrayList.size(); i++) {
                            if (mSearchArrayList.get(i).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName()))
                                mSearchArrayListPageWise.add(mSearchArrayList.get(i));
                        }
                        // onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false);
                        if (isMobile) {
                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false, true);
                        } else {
                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                                onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false, true);
                            } else {
                               /* if(SDKManager.getInstance().getSearchIndexEpub() % 2 == 0){
                                    onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false,false);
                                    onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false,true);
                                }else {
                                    onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false,true);
                                    onSearchItemClick(mSearchQuery, mSearchArrayList.get(SDKManager.getInstance().getSearchIndexEpub()), mIsElasticSearch, false,false);
                                }*/
                                renderView.drawSequesntialSearchHighlight();
                            }
                        }

                    } else {
                        SDKManager.getInstance().setSearchIndexEpub(SDKManager.getInstance().getSearchIndexEpub() - 1);
                        if (SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[0].getChapterName())) {
                            renderView.drawSequesntialSearchHighlight();
                        } else {
                            SDKManager.getInstance().setSearchSequentialIndexEpub(0);
                            renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                        }

                    }
                } else
                    Toast.makeText(PlayerActivity.this, "No Previous search available", Toast.LENGTH_SHORT).show();
            }
        }

    }

    private void initProcessDilog() {
        mProgressDialog = new Dialog(this, android.R.style.Theme_Translucent_NoTitleBar);
        mProgressDialog.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        mProgressDialog.setCancelable(false);
        mProgressDialog.setCanceledOnTouchOutside(false);
        mProgressDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        mProgressDialog.setContentView(R.layout.progress_dialog);
        TextView txttitle = mProgressDialog.findViewById(R.id.txtprogressmsg);
        txttitle.setTextColor(Color.parseColor(themeUserSettingVo.getmKitabooMainColor()));
        txttitle.setText(getResources().getString(R.string.syncing));
    }

    /**
     * Callback when Search-Dialog is dismissed
     */
    @Override
    public void onSearchDialogCancel() {
        if (mSearchview != null) {
            mSearchview.setQuery("", true);
            if (mIsElasticSearch) {
                if (mReaderType == EBookType.REFLOWEPUB) {
                    //if (mIsElasticSearch)
                    renderView.clearAllElasticSearchData();
                }
                mIsElasticSearch = false;
                customSearchPanel(mIsElasticSearch);
            } else {
                if (mReaderType == EBookType.FIXEDEPUB)
                    renderView.isHighlightActive(false);
            }
        }
        mLastSearchedtext = "";
        mSearchQuery = "";
        if (mTabSearchList != null)
            mTabSearchList.setVisibility(View.GONE);
        if (mSearchEmptyView != null)
            mSearchEmptyView.setVisibility(View.GONE);
        //startTextSearch();
        /*if(mDialog!=null) {
            mDialog.dismiss();
        }*/
    }


    @Override
    public void onSearchTextClick() {
        if (mDialog != null) {
            mDialog.dismiss();
        }

    }

    /**
     * Callback is to save the user answer
     *
     * @param objVO
     * @param answer
     * @param editMode
     */
    @Override
    public void onSavingTheUserAnswer(LinkVO objVO, String answer, boolean editMode) {
        if (GlobalDataManager.getInstance().isReviewMode() && editMode) {
            for (int i = 0; i < GlobalDataManager.getInstance().getAssessmentPenMarks().size(); i++) {
                if (GlobalDataManager.getInstance().getAssessmentPenMarks().get(i).getFolioID().equals(objVO.getFolioID())) {
                    ArrayList<LinkVO> linkColl = GlobalDataManager.getInstance().getAssessmentPenMarks()
                            .get(i).getLinkCollection();
                    for (int k = 0; k < linkColl.size(); k++) {
                        if (linkColl.get(k).getLinkID() == objVO.getLinkID() && objVO.getFolioID().equals(linkColl.get(k).getFolioID())) {
                            linkColl.get(k).setDateTime(com.hurix.commons.utils.Utils.getDateTime());
                            linkColl.get(k).setSyncStatus(false);
                            linkColl.get(k).setSubmitted(false);
                            linkColl.get(k).setSubmitReviewedData(true);
                            linkColl.get(k).setMode(getFIBMode(objVO, answer));
                            linkColl.get(k).setUserAnswer(answer);
                            linkColl.get(k).setSubmitted(true);
                            linkColl.get(k).setmIsMathView(objVO.ismIsMathView());
                            linkColl.get(k).setType(LinkVO.LinkType.ACTIVITY_INJECTION.toString());
                            break;
                        } else if (objVO.getLinkID() != 0 && objVO.getFolioID().equals(linkColl.get(k).getFolioID())) {
                        /*objVO.setDateTime(com.hurix.commons.utils.Utils.getDateTime());
                        objVO.setSyncStatus(false);
                        objVO.setMode(getFIBMode(objVO, answer));
                        objVO.setUserAnswer(answer);
                        objVO.setSubmitted(false);
                        if (objVO.ismIsMathView()) {
                            objVO.setmIsMathView(true);
                        } else {
                            objVO.setmIsMathView(false);
                        }
                        objVO.setType(LinkVO.LinkType.ACTIVITY_INJECTION.toString());
                        linkColl.add(objVO);
                        *//**
                             * Remove duplicate elements
                             *//*
                        HashSet<LinkVO> set = new HashSet<>(linkColl);
                        linkColl.clear();
                        linkColl.addAll(set);*/
                        }
                    }
                }

            }
        } else if (editMode) {
            objVO.setDateTime(com.hurix.commons.utils.Utils.getDateTime());
            objVO.setSyncStatus(false);
            objVO.setMode(getFIBMode(objVO, answer));
            if (objVO.IsInstantFeedbackValidate() && !checkAnswer(objVO, answer)) {
                com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().setCorrectAnswer(false);
            }
            objVO.setUserAnswer(answer);
            DatabaseManager.getInstance(this).manupulateFIBToDB(objVO, KitabooSDKModel.getInstance().getUserID(),
                    com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getBookID());
            com.hurix.commons.utils.Utils.hideKeyboard(this);
        }
    }

    /**
     * Callback when dropdown item is selected
     *
     * @param position
     * @param id
     * @param mData
     * @param mItems
     */
    @Override
    public void setOnDropDownItemSelected(int position, long id, LinkVO mData, String[] mItems) {

        mClearAllImage.setVisibility(VISIBLE);
        if (GlobalDataManager.getInstance().isReviewMode()) {
            for (int i = 0; i < GlobalDataManager.getInstance().getAssessmentPenMarks().size(); i++) {
                ArrayList<LinkVO> linkColl = GlobalDataManager.getInstance().getAssessmentPenMarks()
                        .get(i).getLinkCollection();
                for (int k = 0; k < linkColl.size(); k++) {
                    if (linkColl.get(k).getLinkID() == mData.getLinkID()) {
                        linkColl.get(k).setDateTime(com.hurix.commons.utils.Utils.getDateTime());
                        linkColl.get(k).setSyncStatus(false);
                        linkColl.get(k).setSubmitReviewedData(true);
                        linkColl.get(k).setUserAnswer(mItems[position]);
                        linkColl.get(k).setType(LinkVO.LinkType.ACTIVITY_INJECTION.toString());
                    } else if (linkColl.get(k).getLinkID() != 0 && mData.getFolioID().equals(linkColl.get(k).getFolioID())) {
                        /*linkColl.get(k).setDateTime(com.hurix.commons.utils.Utils.getDateTime());
                        linkColl.get(k).setSyncStatus(false);
                        linkColl.get(k).setSubmitReviewedData(true);
                        linkColl.get(k).setMode(getFIBMode(mData, mItems[position]));
                        linkColl.get(k).setUserAnswer(mItems[position]);
                        linkColl.get(k).setSubmitted(false);
                        if (mData.ismIsMathView()) {
                            mData.setmIsMathView(true);
                        } else {
                            mData.setmIsMathView(false);
                        }
                        mData.setType(LinkVO.LinkType.ACTIVITY_INJECTION.toString());
                        linkColl.add(mData);
                        *//**
                         * Remove duplicate elements
                         *//*
                        HashSet<LinkVO> set = new HashSet<>(linkColl);
                        linkColl.clear();
                        linkColl.addAll(set)*/
                    }
                }
            }
        } else {
            mData.setUserAnswer(mItems[position]);
            mData.setDateTime(com.hurix.commons.utils.Utils.getDateTime());
           /* if (mData.IsInstantFeedbackValidate() && !checkAnswer(mData.getUserAnswer())) {
                GlobalDataManager.getInstance().getLocalBookData().setCorrectAnswer(false);
            }*/
            mData.setSyncStatus(false);
        }
        if (GlobalDataManager.getInstance().isReviewMode() && GlobalDataManager.getInstance()
                .getCurrMode() == GlobalDataManager.PlayerState.PEN_ENABLE) {
            showAnswer();
        } else {
            if (position != 0) {
                if (mData.getUGCID() == 0) {
                    mData.setMode(com.hurix.database.dbutility.Constants.UGC_ITEM_MODE_NEW);
                } else {
                    mData.setMode(com.hurix.database.dbutility.Constants.UGC_ITEM_MODE_MODIFIED);
                }
            } else {
                if (mData.getUGCID() == 0) {
                    mData.setMode("");
                    if (position == 0) {
                        mData.setMode(com.hurix.database.dbutility.Constants.UGC_ITEM_MODE_NEW);
                    }
                } else {
                    mData.setMode(com.hurix.database.dbutility.Constants.UGC_ITEM_MODE_DELETED);
                }
            }
            if (!mData.getMode().equals("")) {
                //setPageTrackingResource(mData);
                DatabaseManager.getInstance(this).manupulateFIBToDB(mData, KitabooSDKModel.getInstance().getUserID(),
                        com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getBookID());
            }
        }

        if (!com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().getPentoolBarOpen()
                && com.hurix.commons.notifier.GlobalDataManager.getInstance().getLocalBookData().isToolbarOpen()) {

            //GlobalDataManager.getInstance().getLocalBookData().setToolbarOpen(false);
        }
    }

    private void showAnswer() {
    }


    private String getFIBMode(LinkVO vos, String newanswer) {
        if (!(newanswer.isEmpty()) && vos.getUGCID() != 0) {
            return Constants.UGC_ITEM_MODE_MODIFIED;
        } else if (newanswer.isEmpty()) {
            return Constants.UGC_ITEM_MODE_DELETED;
        } else {
            return Constants.UGC_ITEM_MODE_NEW;
        }
    }

    public boolean checkAnswer(LinkVO mObjVO, String userAnswer) {
        if (mObjVO.IsCaseSensitive()) {
            return userAnswer.equals(mObjVO.getUserCorrectAnswer());
        } else {
            return userAnswer.equalsIgnoreCase(mObjVO.getUserCorrectAnswer());
        }
    }

    public void getListOfCurrentBookMarkData() {
        if (mCurrentPageData != null) {
            mListOfCurrentBookmark = DatabaseManager.getInstance(this).getBookMarkOnPage(userID, mCurrentPageData.getFolioID(), bookId);
        }
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
            if (mCurrentPageDataPrev != null) {
                ArrayList<BookMarkVO> bookMarkVOS = DatabaseManager.getInstance(this).getBookMarkOnPage(userID, mCurrentPageDataPrev.getFolioID(), bookId);
                mListOfCurrentBookmark.addAll(bookMarkVOS);
            }
        }
    }

   /* @Override
    public void profilePicUploadStatus(boolean status, Map.Entry<String, Integer> entry) {
       *//* NewProfileSetting.toggleStatus = true;
        if (status) {
            com.hurix.kitaboocloud.kitaboosdkrenderer.sdkUtils.Utils.deleteProfilePic(this, true);
        } else {
            com.hurix.kitaboocloud.kitaboosdkrenderer.sdkUtils.Utils.deleteProfilePic(this, false);
            com.hurix.kitaboocloud.kitaboosdkrenderer.sdkUtils.Utils.restorePreviousProfilePic(this);
            if (entry != null) {
                if (entry.getValue() == Constants.SESSION_EXPIRE_ERRORCODE) {
                    //showSessionExpiredAlert();
                } else {
                }
            }
        }
        getBitmap();
        drawImage();*//*

    }*/

    /**
     * Callback is reponsible to handle the LetMeRead option in Read-aloud feature
     *
     * @param letmeread
     */
    @Override
    public void letMeReadClicked(KitabooFixedBook.ReadAloudType letmeread) {
        readAloudType = letmeread;
        if (readAloudMarkups == null)
            readAloudMarkups = SDKManager.getInstance().getCurrentPageAudioSyncList();

        SDKManager.getInstance().setReadAloudType(readAloudType);
        SDKManager.getInstance().setReadAloudPlaying(false);
        currentreadAloudType = letmeread;
        // playNextAudio();
        //playReadAloudAudio();
    }

    /**
     * Callback is reponsible to handle the AutoPlay option in Read-aloud feature
     *
     * @param autoplay
     */
    @Override
    public void autoPlayClicked(KitabooFixedBook.ReadAloudType autoplay) {
        readAloudType = autoplay;
        currentreadAloudType = autoplay;
        playNextAudio = true;

        if (currASList != null && currASList.size() == 0) {

            if (!isMobile && (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) && currentFoliIdPrev != null && !currentFoliIdPrev.isEmpty())
                createAudioSyncList(currentFoliIdPrev);
            else
                createAudioSyncList(currentFoliId);
        }

        if (!audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
            mASYellowCol.setText(CustomPlayerUIConstants.AS_SELECTED_COLOR);
            mASYellowCol.setTextSize(25);
            com.hurix.commons.notifier.GlobalDataManager.getInstance().setCurrentAScolor(getResources().getString(R.string.as_yellow_col));
            com.hurix.commons.notifier.GlobalDataManager.getInstance().setCurrentASMenucolor(getResources().getString(R.string.as_menu_orange_col));
        }

        SDKManager.getInstance().setReadAloudType(readAloudType);
        SDKManager.getInstance().setReadAloudPlaying(true);
        LinkVO objVO = null;

        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !isMobile && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand))) {
            if (currASList != null
                    && currASList.size() > 0 && currASList.get(0).getFolioID().equalsIgnoreCase(currentFoliIdPrev)) {
                playReadAloudAudio();
            } else {
                if (readAloudMarkups != null && readAloudMarkups.size() > 0) {
                    Collections.sort(readAloudMarkups, new AlphanumComparator() {

                        @Override
                        public int compare(Object o1, Object o2) {
                            return super.compare(((LinkVO) o1).getFolioID(), ((LinkVO) o2).getFolioID());
                        }
                    });

                    for (int i = 0; i < readAloudMarkups.size(); i++) {
                        if (readAloudMarkups.get(i).getFolioID().equalsIgnoreCase(currentFoliId)) {
                            objVO = readAloudMarkups.get(i);
                            break;
                        } else {
                            objVO = readAloudMarkups.get(i);
                            break;
                        }
                    }
                    autoplayReq = true;
                    SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                    navigatePageByFolioId(objVO.getFolioID(), 0);
                }

            }
        } else {
            if (currASList != null && currASList.size() > 0
                    && currASList.get(0).getFolioID().equalsIgnoreCase(currentFoliId)) {
                playReadAloudAudio();
            } else {
                if (readAloudMarkups != null && readAloudMarkups.size() > 0) {
                    Collections.sort(readAloudMarkups, new AlphanumComparator() {

                        @Override
                        public int compare(Object o1, Object o2) {
                            return super.compare(((LinkVO) o1).getFolioID(), ((LinkVO) o2).getFolioID());
                        }
                    });

                    for (int i = 0; i < readAloudMarkups.size(); i++) {
                        if (readAloudMarkups.get(i).getFolioID().equalsIgnoreCase(currentFoliId)) {
                            objVO = readAloudMarkups.get(i);
                            break;
                        } else {
                            objVO = readAloudMarkups.get(i);
                            break;
                        }
                    }
                    autoplayReq = true;
                    SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                    navigatePageByFolioId(objVO.getFolioID(), 0);
                }

            }
        }
    }

    /**
     * Callback is reponsible to handle the ReadToMe option in Read-aloud feature
     *
     * @param readtome
     */
    @Override
    public void readToMeClicked(KitabooFixedBook.ReadAloudType readtome) {

        if (currASList != null && currASList.size() == 0) {

            if (!isMobile && (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) && currentFoliIdPrev != null && !currentFoliIdPrev.isEmpty())
                createAudioSyncList(currentFoliIdPrev);
            else
                createAudioSyncList(currentFoliId);
        }
        readAloudType = readtome;
        currentreadAloudType = readtome;
       /* if(readAloudMarkups==null)
            readAloudMarkups=SDKManager.getInstance().getCurrentPageAudioSyncList();*/
        SDKManager.getInstance().setReadAloudType(readAloudType);
        SDKManager.getInstance().setReadAloudPlaying(true);
        LinkVO objVO = null;

        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !isMobile) {
            if (currASList != null
                    && currASList.size() > 0 && currASList.get(0).getFolioID().equalsIgnoreCase(currentFoliIdPrev)) {
                playReadAloudAudio();
            } else {
                if (readAloudMarkups != null && readAloudMarkups.size() > 0) {
                    Collections.sort(readAloudMarkups, new AlphanumComparator() {

                        @Override
                        public int compare(Object o1, Object o2) {
                            return super.compare(((LinkVO) o1).getFolioID(), ((LinkVO) o2).getFolioID());
                        }
                    });

                    for (int i = 0; i < readAloudMarkups.size(); i++) {
                        if (readAloudMarkups.get(i).getFolioID().equalsIgnoreCase(currentFoliId)) {
                            objVO = readAloudMarkups.get(i);
                            break;
                        } else {
                            objVO = readAloudMarkups.get(i);
                            break;
                        }
                    }
                    autoplayReq = true;
                    navigatePageByFolioId(objVO.getFolioID(), 0);
                }

            }
        } else {

            if (currASList != null && currASList.size() > 0
                    && currASList.get(0).getFolioID().equalsIgnoreCase(currentFoliId)) {
                playReadAloudAudio();
            } else {
                if (readAloudMarkups != null && readAloudMarkups.size() > 0) {
                    Collections.sort(readAloudMarkups, new AlphanumComparator() {

                        @Override
                        public int compare(Object o1, Object o2) {
                            return super.compare(((LinkVO) o1).getFolioID(), ((LinkVO) o2).getFolioID());
                        }
                    });

                    for (int i = 0; i < readAloudMarkups.size(); i++) {
                        if (readAloudMarkups.get(i).getFolioID().equalsIgnoreCase(currentFoliId)) {
                            objVO = readAloudMarkups.get(i);
                            break;
                        } else {
                            objVO = readAloudMarkups.get(i);
                            break;
                        }
                    }
                    autoplayReq = true;
                    SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                    navigatePageByFolioId(objVO.getFolioID(), 0);
                }

            }
        }
    }

    /**
     * Callback when Read aloud dialog is dismissed
     */
    @Override
    public void readDialogDismiss() {
        mReadAloudDialog = null;
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                if (mReaderType == EBookType.FIXEDKITABOO && mAudioManager == null) {
                    if (mReadAloudIcon != null && !mReadAloudIcon.isEnabled())
                        mReadAloudIcon.setEnabled(true);
                }
            }
        }, 2000);
    }

    private void playReadAloudAudio() {
        if (readAloudMarkups != null && readAloudMarkups.size() > 0) {
            LinkVO objVO = null;
           /* for (int i = 0; i < readAloudMarkups.size(); i++) {
                if(readAloudMarkups.get(i).getFolioID().equalsIgnoreCase(currentFoliId)){
                    objVO=readAloudMarkups.get(i);
                    break;
                }else {
                    objVO=readAloudMarkups.get(i);
                    break;
                }
            }*/

            if (currASList != null && currASList.size() > 0 && currASList.get(0) != null && currASList.get(0).getLinkView() != null && (currASList.get(0).getFolioID().equalsIgnoreCase(currentFoliId) || currASList.get(0).getFolioID().equalsIgnoreCase(currentFoliIdPrev))) {
                ((LinkVideoView) currASList.get(0).getLinkView()).callAudioOnclick();
                lastReadAloudFolioID = currentFoliId;
                isReadAloudRequired = false;
                isOrientationChanged = false;
                SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(false);
            } else if (mcurrentPageData != null && mcurrentPageData.length > 0 && mcurrentPageData[0].getMarkupsList() != null && mcurrentPageData[0].getMarkupsList().size() > 0 && mcurrentPageData[0].getMarkupsList().get(0).getLinkView() != null) {
                linkVoReadAloud = mcurrentPageData[0].getMarkupsList().get(0);
                ((LinkVideoView) mcurrentPageData[0].getMarkupsList().get(0).getLinkView()).callAudioOnclick();
                lastReadAloudFolioID = currentFoliId;
                isReadAloudRequired = false;
                isOrientationChanged = false;
                SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(false);
            }
        }

    }


    @Override
    public void onChapterAudioSyncEnd() {
        if (mReaderType == EBookType.REFLOWEPUB) {

            if (SDKManager.getInstance().getCurrentPageVO() != null && !SDKManager.getInstance().getCurrentPageVO().getChaptertittle().equalsIgnoreCase(mAudioPageData.getChaptertittle())) {
                mAudioPageData = SDKManager.getInstance().getCurrentPageVO();
            }

            playNextAudio = true;
            currAudioSyncChapter = "";
            renderView.navigatePage(0, getNextBaseUrl(mAudioPageData.getChaptertittle()), "", isMobile, false);
        }
    }

    private String getNextBaseUrl(String name) {

        if (mTocdata != null && mTocdata.size() > 0) {

            for (int i = 0; i < mTocdata.size(); i++) {

                if (mTocdata.get(i).getTitle().equalsIgnoreCase(name)) {
                    if ((i + 1) < mTocdata.size()) {
                        nextAudioSyncChapterName = mTocdata.get(i + 1).getTitle();
                        return mTocdata.get(i + 1).getmBaseUrl();
                    }

                }
            }
        }
        return "";
    }

    @Override
    public void onAudioSyncEnd() {

        SDKManager.getInstance().setAudioSyncSrcCount(SDKManager.getInstance().getAudioSyncSrcCount() + 1);
        SDKManager.getInstance().setAudioSyncCount(0);

        if (mAudioManager != null)
            mAudioManager = null;

        if (mAudioPageData == null && SDKManager.getInstance().getCurrentPageVO() != null)
            mAudioPageData = SDKManager.getInstance().getCurrentPageVO();

        if (mAudioPageData != null) {

            if (SDKManager.getInstance().getCurrentPageVO() != null && !SDKManager.getInstance().getCurrentPageVO().getChaptertittle().equalsIgnoreCase(mAudioPageData.getChaptertittle())) {
                mAudioPageData = SDKManager.getInstance().getCurrentPageVO();
            }

            LinkVO linkAudioVO = new LinkVO();
            BookVO.Manifest bookVo = SDKManager.getInstance().getMediaOverlayMap().get(getBaseUrl(mAudioPageData.getChaptertittle()));
            linkAudioVO.setUrl(bookVo.href);
            if (SDKManager.getInstance().getAllaudioSrcList() != null && SDKManager.getInstance().getAllaudioSrcList().size() > 0 && SDKManager.getInstance().getAudioSyncSrcCount() < SDKManager.getInstance().getAllaudioSrcList().size()) {
                SDKManager.getInstance().setLastAudioSrc(SDKManager.getInstance().getAllaudioSrcList().get(SDKManager.getInstance().getAudioSyncSrcCount()));
                linkAudioVO.setUrl(SDKManager.getInstance().getLastAudioSrc());
                linkAudioVO.setmIsAudioSync(true);
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {

                        if (!onPauseCalled) {

                            processAudioSync(linkAudioVO, null, 0, false);

                            if (mReadPause != null) {
                                if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                                    mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                                    audioIsPause = false;
                                }
                            }
                        } else {
                            if (mReadPause != null) {
                                if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PAUSE)) {
                                    mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                                    audioIsPause = true;
                                }
                            }
                        }
                    }
                }, 500);

            } else {
                onChapterAudioSyncEnd();
            }
        }

    }


    @Override
    public void onAudioSpeedChanged(LinkAudioView.AudioSpeed speedType) {

        _speedType = speedType;

        if (speedType != null && !speedType.toString().isEmpty()) {

            if (mReadPause != null) {
                if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                    mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                    audioIsPause = false;
                }
            }

            if (mReadSpeed != null)
                mReadSpeed.setText(speedType.toString());

            if (mSpeedInc != null && mSpeedDec != null) {
                switch (speedType) {
                    case SLOW:
                        mSpeedInc.setAlpha(1.0f);
                        mSpeedDec.setAlpha(0.5f);
                        break;
                    case MEDIUM:
                        mSpeedInc.setAlpha(1.0f);
                        mSpeedDec.setAlpha(1.0f);
                        break;
                    case NORMAL:
                        mSpeedInc.setAlpha(1.0f);
                        mSpeedDec.setAlpha(1.0f);
                        break;
                    case FAST:
                        mSpeedInc.setAlpha(0.5f);
                        mSpeedDec.setAlpha(1.0f);
                        break;

                }
            }
        }

    }

    @Override
    public void onAudioPageChanged() {

        if (mAudioManager != null) {
           /* if(mAudioManager.getMediaPlayer()!=null)
                mAudioManager.playAudioOnTime(mAudioManager.getMediaPlayer().getCurrentPosition()/ 1000F);*/

            mAudioManager.pauseAudioSync();
        }


        if (mReadPause != null) {
            if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                audioIsPause = false;
            } else {
                mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                audioIsPause = true;
            }
        }

        SDKManager.getInstance().setmState(com.hurix.commons.notifier.GlobalDataManager.PlayerState.NAVIGATION);


        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {

                if (mAudioManager != null) {
                   /* if(mAudioManager.getMediaPlayer()!=null)
                    mAudioManager.playAudioOnTime(mAudioManager.getMediaPlayer().getCurrentPosition()/ 1000F);*/
                    mAudioManager.playAudio();
                }

                if (mReadPause != null) {
                    if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                        mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                        audioIsPause = false;
                    } else {
                        mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                        audioIsPause = true;
                    }
                }

                SDKManager.getInstance().setmState(com.hurix.commons.notifier.GlobalDataManager.PlayerState.NAVIGATION);
            }
        }, 3000);

    }

    @Override
    public void pauseAudio(boolean isPlayRequired) {

        if (mAudioManager != null) {

            if (mAudioManager.getMediaPlayer() != null) {
                mAudioManager.getMediaPlayer().pause();
            } else {
                mAudioManager.pauseAudioSync();
            }

            if (mReadPause != null && mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PAUSE)) {
                mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                audioIsPause = true;
            }
        }

        if (isPlayRequired) {
            new Handler(getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (mAudioManager != null)
                        mAudioManager.playAudio();
                    if (mReadPause != null && mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                        mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                        audioIsPause = false;
                    }
                    SDKManager.getInstance().setmState(com.hurix.commons.notifier.GlobalDataManager.PlayerState.NAVIGATION);
                }
            }, 100);
        } else {
            SDKManager.getInstance().setTapInProgress(false);
        }
    }

    @Override
    public void onAudioStart() {


    }

    @Override
    public void onResumeAudioSync() {

        if (onAudioOrientationChanged) {
            new Handler(getMainLooper()).postDelayed(new Runnable() {
                @Override
                public void run() {

                    if (mReadPause != null && mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                        mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                        audioIsPause = false;
                    }


                    if (SDKManager.getInstance().getAudioElementState()) {

                        if (mAudioManager != null)
                            mAudioManager.playAudio();

                    } else {
                        com.hurix.commons.notifier.GlobalDataManager.getInstance().highlightFirstAudioText();
                    }

                    SDKManager.getInstance().setmState(com.hurix.commons.notifier.GlobalDataManager.PlayerState.NAVIGATION);
                    onAudioOrientationChanged = false;
                    if (_speedType != null)
                        onAudioSpeedChanged(_speedType);
                }
            }, 100);
        } else {
            onAudioOrientationChanged = false;
            SDKManager.getInstance().setReadFirstElementReq(true);
        }


    }

    @Override
    public void onAudioClose() {

        new Handler(getMainLooper()).postDelayed(() -> {

            setEpubPagecountVisibility(true);
            closeReadAloud();
            com.hurix.commons.notifier.GlobalDataManager.getInstance().closeAudioSync();
            currPageVo = pageVo;
            if (mReaderType == EBookType.REFLOWEPUB) {
                mTextChapterTitle.setText(currPageVo.getChaptertittle().trim());

                SDKManager.getInstance().setLastWordId("");

                if (SDKManager.getInstance().getAudioVOS() != null) {
                    SDKManager.getInstance().getAudioVOS().clear();
                }
            } else if (mReaderType == EBookType.FIXEDKITABOO) {
                mTextChapterTitle.setText(mCurrentPageData.getChapterName());
            } else {
                if (mTextChapterTitle != null && mCurrentPageData != null) {
                    mTextChapterTitle.setText(mCurrentPageData.getChaptertittle().trim());
                }
            }

        }, 100);


    }

    @Override
    public void onAudioStop() {

        if (mAudioManager != null) {

            if (mAudioManager != null) {
                mAudioManager.close();
                if (mAudioManager != null)
                    mAudioManager.closeExplictly();
            }

            if (mReadPause != null) {
                if (mReadPause != null && mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PAUSE)) {
                    mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                    //mAudioManager.pauseAudioSync();
                    audioIsPause = false;
                }
            }

        }

    }

    private class SearchAsyncTask extends AsyncTask<String, Void, ArrayList<SearchItemVO>> {

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            mSearchArrayList.clear();
            if (mIsElasticSearch) {
                mTabSearchList.setVisibility(View.INVISIBLE);

            } else {
                mTabSearchList.setVisibility(View.INVISIBLE);
            }
        }

        @Override
        protected ArrayList<SearchItemVO> doInBackground(String... params) {
            ArrayList<SearchItemVO> searchlist = new ArrayList<>();
            try {
                if (params[0].isEmpty())
                    return null;
                if (isCancelled())
                    return null;

                for (SearchItemVO search : mSeachdata) {
                    if (search.get_pageTextData().toLowerCase().contains(params[0].toLowerCase())) {
                        SearchItemVO vo = new SearchItemVO();
                        if (mIsElasticSearch) {
                            vo.set_pageTextData(search.get_pageTextData());
                        } else {
                            vo.set_pageTextData(getTrimmedData(search.get_pageTextData(), mLastSearchedtext, 50, 150));
                        }
                        if (mReaderType == EBookType.FIXEDKITABOO) {
                            vo.setChapterName(getChapterName(search.get_pageNumber()));
                        } else {
                            vo.setChapterName(search.getChapterName());
                        }
                        vo.set_displayNumber(search.get_displayNumber());
                        vo.set_pageNumber(search.get_pageNumber());
                        vo.setChapterTitleEpub(search.getChapterTitleEpub());
                        vo.setChapterIdEpub(search.getChapterIdEpub());
                        if (mReaderType == EBookType.REFLOWEPUB && mIsElasticSearch) {
                            for (int i = 0; i < SDKManager.getInstance().getReflowableTOC().getSpines().size(); i++) {
                                if (SDKManager.getInstance().getReflowableTOC().getSpines().get(i).equalsIgnoreCase(search.getChapterIdEpub())) {
                                    vo.set_pageNumber(String.valueOf(i));
                                    break;
                                }
                            }
                        }
                        searchlist.add(vo);
                    }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            return searchlist;
        }

        @Override
        protected void onCancelled() {
            super.onCancelled();
        }

        @Override
        protected void onPostExecute(ArrayList<SearchItemVO> result) {

            if (result == null)
                return;
            if (isCancelled()) {
                return;
            }
            if (result.size() == 0) {
                mTabSearchList.setVisibility(View.GONE);
                mSearchEmptyView.setVisibility(View.VISIBLE);
            } else {
                mSearchEmptyView.setVisibility(View.GONE);
                if (mIsElasticSearch || mReaderType == EBookType.FIXEDKITABOO) {
                    ArrayList<SearchItemVO> totalresult = new ArrayList<>();
                    for (int n = 0; n < result.size(); n++) {
                        SearchItemVO uniqueArraylist = null;
                        ArrayList TotalarrayList = countWord(result.get(n).get_pageTextData());
                        int count = 0;
                        for (int i = 0; i < TotalarrayList.size(); i++) {
                            String mainstring = "";
                            if (mLastSearchedtext.toLowerCase().contains(((String) TotalarrayList.get(i)).toLowerCase())
                                    || ((String) TotalarrayList.get(i)).toLowerCase().contains(mLastSearchedtext.toLowerCase())) {
                                uniqueArraylist = new SearchItemVO();
                                if (mReaderType == EBookType.FIXEDKITABOO) {
                                    uniqueArraylist.setChapterName(getChapterName(result.get(n).get_pageNumber()));
                                    uniqueArraylist.setSearchIndex(count++);
                                } else {
                                    uniqueArraylist.setChapterName(result.get(n).getChapterName());
                                    if (totalresult.size() - 1 > 0) {
                                        if (totalresult.get(totalresult.size() - 1).getChapterName().equalsIgnoreCase(uniqueArraylist.getChapterName()))
                                            uniqueArraylist.setSearchIndex(totalresult.get(totalresult.size() - 1).getSearchIndex() + 1);
                                        else
                                            uniqueArraylist.setSearchIndex(0);
                                    } else {
                                        uniqueArraylist.setSearchIndex(0);
                                    }

                                }
                                uniqueArraylist.set_displayNumber(result.get(n).get_displayNumber());
                                uniqueArraylist.set_pageNumber(result.get(n).get_pageNumber());
                                uniqueArraylist.setChapterTitleEpub(result.get(n).getChapterTitleEpub());
                                uniqueArraylist.setChapterIdEpub(result.get(n).getChapterIdEpub());
                                uniqueArraylist.setPagePosition(n);

                                if (i > 10) {
                                    for (int j = i - 10; j <= i; j++) {

                                        if (j >= 0 || j <= i) {
                                            //Adding 10 words before the searched words
                                            mainstring = mainstring.trim() + "" + TotalarrayList.get(j).toString();
                                        }

                                        if (j == i) {
                                            if (TotalarrayList.size() > j + 10) {
                                                for (int k = j + 1; k <= j + 10; k++) {
                                                    //After 10 words After the searched words
                                                    mainstring = mainstring.trim() + "" + TotalarrayList.get(k).toString();
                                                    if (k == j + 10) {
                                                        uniqueArraylist.set_pageTextData(mainstring);
                                                        totalresult.add(uniqueArraylist);
                                                    }
                                                }
                                            } else {
                                                if (i == TotalarrayList.size() - 1) {
                                                    uniqueArraylist.set_pageTextData(mainstring);
                                                    totalresult.add(uniqueArraylist);
                                                } else
                                                    for (int k = i; k <= TotalarrayList.size() - 1; k++) {
                                                        //After 10 words After the searched words
                                                        mainstring = mainstring.trim() + "" + TotalarrayList.get(k).toString();
                                                        if (k == TotalarrayList.size() - 1) {
                                                            uniqueArraylist.set_pageTextData(mainstring);
                                                            totalresult.add(uniqueArraylist);
                                                        }
                                                    }
                                            }

                                        }
                                    }
                                } else {
                                    for (int j = 0; j <= i; j++) {

                                        if (j >= 0 || j <= i) {
                                            //Adding 10 words before the searched words
                                            mainstring = mainstring.trim() + "" + TotalarrayList.get(j).toString();
                                        }

                                        if (j == i) {
                                            if (TotalarrayList.size() > i + 10) {
                                                for (int k = i + 1; k <= i + 10; k++) {
                                                    //After 10 words After the searched words
                                                    mainstring = mainstring.trim() + "" + TotalarrayList.get(k).toString();
                                                    if (k == i + 10) {
                                                        uniqueArraylist.set_pageTextData(mainstring);
                                                        totalresult.add(uniqueArraylist);
                                                    }
                                                }
                                            } else {
                                                for (int k = i + 1; k <= TotalarrayList.size() - 1; k++) {
                                                    //After 10 words After the searched words
                                                    mainstring = mainstring.trim() + "" + TotalarrayList.get(k).toString();
                                                    if (k == TotalarrayList.size() - 1) {
                                                        uniqueArraylist.set_pageTextData(mainstring);
                                                        totalresult.add(uniqueArraylist);
                                                    }

                                                }
                                            }

                                        }
                                    }
                                }

                            }


                        }

                        //result.add(vo);
                    }
                    if (mSearchArrayListPageWise != null && !mSearchArrayListPageWise.isEmpty()) {
                        mSearchArrayListPageWise.clear();
                    }
                    for (int i = 0; i < result.size(); i++) {
                        mSearchArrayListPageWise.addAll(result);
                        result.clear();
                    }
                    for (int i = 0; i < totalresult.size(); i++) {
                        result.add(totalresult.get(i));
                    }
                    if (result != null) {
                        if (result.size() > 0) {
                            if (result != null && mReaderType == EBookType.REFLOWEPUB) {
                                if (result.size() > 0) {
                                    Collections.sort(result, new AlphanumComparator() {

                                        @Override
                                        public int compare(Object o1, Object o2) {
                                            return super.compare(((SearchItemVO) o1).get_pageNumber(), ((SearchItemVO) o2).get_pageNumber());
                                        }
                                    });
                                }
                            } else if (mReaderType == EBookType.FIXEDKITABOO) {
                                /*Collections.sort(result, new AlphanumComparator() {

                                    @Override
                                    public int compare(Object o1, Object o2) {
                                        return super.compare(((SearchItemVO) o1).get_displayNumber(), ((SearchItemVO) o2).get_displayNumber());
                                    }
                                });*/
                                //  mSearchArrayList.addAll(result);

                            } else {
                                Collections.sort(result, new AlphanumComparator() {

                                    @Override
                                    public int compare(Object o1, Object o2) {
                                        return super.compare(((SearchItemVO) o1).getChapterName(), ((SearchItemVO) o2).getChapterName());
                                    }
                                });
                            }

                        }
                    }
                    mSearchArrayList.addAll(result);
                    if (mReaderType == EBookType.FIXEDEPUB) {
                        for (int i = 1; i < mSearchArrayList.size(); i++) {
                            if (mSearchArrayList.size() > 0 && i + 1 < mSearchArrayList.size() - 1) {
                                if (i - 1 >= 0) {
                                    if (mSearchArrayList.get(i).getChapterName().equals(mSearchArrayList.get(i - 1).getChapterName())) {
                                        mSearchArrayList.get(i).setSearchIndex(mSearchArrayList.get(i - 1).getSearchIndex() + 1);
                                    } else {
                                        mSearchArrayList.get(i).setSearchIndex(0);
                                    }

                                } else {
                                    mSearchArrayList.get(i).setSearchIndex(0);
                                }

                            }
                        }
                    }
                } else {
                    mSearchArrayList.addAll(result);
                }
                //SDKManager.getInstance().setSearchAllData(mSearchArrayList);
                //Collections.reverse(mSearchArrayList);
                mSearchAdapter.notifyDataSetChanged();
                //mTabSearchList.setVisibility(View.VISIBLE);
                ObjectAnimator animatorSearch = ObjectAnimator.ofFloat(mTabSearchList, "translationY", mTabSearchList.getHeight(), 0f);
                animatorSearch.setDuration(500);
                animatorSearch.addListener(new Animator.AnimatorListener() {
                    @Override
                    public void onAnimationStart(Animator animation) {

                    }

                    @Override
                    public void onAnimationEnd(Animator animation) {
                        if (mIsElasticSearch) {
                            mTabSearchList.setVisibility(View.INVISIBLE);
                            if (mSearchArrayList.size() != 0) {
                                Utils.hideKeyboard(PlayerActivity.this, mTabSearchEditText);
                                Utils.hideKeyboard(PlayerActivity.this);

                                //This is for first launch of book to load search result for elastic search
                                SDKManager.getInstance().setCurrentPositionOfPageSearchData(0);
                                SDKManager.getInstance().setSearchPageWiseIterationPosition(0);
                                if (mReaderType == EBookType.REFLOWEPUB) {
                                    String tmpElasticBackgroundColor = "#ebebe0", searchHighlightedColor = "#ffff33";

                                    renderView.highlightTempElasticSearch(mSearchQuery, tmpElasticBackgroundColor, searchHighlightedColor, 1);
                                    onSearchItemClick(mSearchQuery, mSearchArrayList.get(0), true, false, false);
                                } else {
                                    if (mReaderType == EBookType.FIXEDKITABOO) {
                                        renderView.navigatePage(Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()), "", "", isMobile, false);
                                    } else {
                                        renderView.navigatePage(0, mSearchArrayList.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).getChapterName(), "", isMobile, false);
                                    }

                                    SDKManager.getInstance().getSearchData().addAll(mSearchArrayList);
                                    int time = 0;
                                    if (mReaderType == EBookType.FIXEDKITABOO) {
                                        time = 1000;
                                    }
                                    new Handler().postDelayed(new Runnable() {
                                        @Override
                                        public void run() {
                                            SDKManager.getInstance().setSearchIndexEpub(0);
                                            SDKManager.getInstance().setSearchSequentialIndexEpub(0);
                                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                                                if (mReaderType == EBookType.FIXEDKITABOO) {
                                                    onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, false, false);
                                                }
                                            } else {
                                                if (mReaderType == EBookType.FIXEDKITABOO) {
                                                    //if search result is start from page 1 or odd page number in landscape mode ; loading only single page highlight
                                                    if (mSearchArrayListPageWise != null && !mSearchArrayListPageWise.isEmpty() && mSearchArrayListPageWise.size() > SDKManager.getInstance().getSearchPageWiseIterationPosition()) {

                                                        if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) == 1 ||
                                                                Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 != 0) {
                                                            onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, false, false);

                                                        } else if (mSearchArrayListPageWise.size() > (SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1) && Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 == 0) {
                                                            onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1), mIsElasticSearch, false, false);
                                                            onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, false, false);
                                                        }
                                                    }
                                                }
                                            }

                                        }
                                    }, time);
                                }

                            }
                        } else {
                            mTabSearchList.setVisibility(View.VISIBLE);
                        }
                    }

                    @Override
                    public void onAnimationCancel(Animator animation) {

                    }

                    @Override
                    public void onAnimationRepeat(Animator animation) {

                    }
                });
                animatorSearch.start();
                // Animation s = AnimationUtils.loadAnimation(PlayerActivity.this, R.anim.slide_up);
                //mTabSearchList.startAnimation(s);
            }

        }
    }


    private ArrayList countWord(String wholeString) {

        ArrayList arrayList = new ArrayList();
        String s2 = wholeString;
        String[] t = s2.split("(?= )");
        for (String e : t) {
            System.out.println(e);
            arrayList.add(e);
        }

        return arrayList;
    }

    private String getChapterName(String pageno) {
        String chapterName = "";
        for (IPage page : mTotalPage) {
            if (page.getPageID() == Integer.parseInt(pageno)) {
                chapterName = page.getChapterName();
            }
        }
        return chapterName;
    }

    /**
     * @param pagaData            : page strings contain searched text
     * @param querystring         : searched text
     * @param noOfbeforeAfterText : charcter should be after and before querystring
     * @param pageDataCheck       : here it is 150
     *                            :To check pagedata not more than 150 character
     * @return
     */
    private String getTrimmedData(String pagaData, String querystring, int noOfbeforeAfterText, int pageDataCheck) {
        String strReturn = pagaData;
        if (pagaData.length() > pageDataCheck) {
            String strBefore = "";
            String strAfter = "";
            int startIndex = pagaData.toLowerCase().indexOf(querystring.toLowerCase());
            if (startIndex != -1) {
                if (startIndex > noOfbeforeAfterText) {
                    strBefore = pagaData.substring(pagaData.toLowerCase().indexOf(querystring.toLowerCase()) - noOfbeforeAfterText, startIndex);
                } else {
                    strBefore = pagaData.substring(0, startIndex);
                    if (strBefore.equals("")) {
                        strBefore = " ";
                    }
                }
            }
            strAfter = pagaData.substring(pagaData.toLowerCase().indexOf(querystring.toLowerCase()) + querystring.length());
            if (strAfter.length() > noOfbeforeAfterText) {
                strAfter = strAfter.substring(0, noOfbeforeAfterText);
            }
            strReturn = strBefore + querystring + strAfter;
            if (strReturn.contains("")) {
                strReturn = strReturn.substring(strReturn.indexOf("  ") + 1);
            }
            if (strReturn.contains("")) {
                //strReturn = strReturn.substring(0, strReturn.lastIndexOf(" "));
            }
        }
        return strReturn;
    }

    /**
     * Callback when search item is pressed
     *
     * @param parent
     * @param view
     * @param position
     * @param id
     */
    @Override
    public void onItemClick(AdapterView<?> parent, View view, final int position, long id) {
        isOnItemClicked = true;
        searchQuerylength = mSearchQuery.split(" ").length;
        SDKManager.getInstance().setSearchedWordLenght(searchQuerylength);
        if ((mIsElasticSearch && mReaderType != EBookType.REFLOWEPUB) || (mReaderType == EBookType.FIXEDKITABOO)) {
            if ((mReaderType == EBookType.FIXEDKITABOO)) {
                SDKManager.getInstance().setSearchPageWiseIterationPosition(position);
                //  navigatePageByFolioId("",Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()));

                renderView.navigatePage(Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()), "", "", isMobile, false);
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT || isMobile) {
                    //  navigatePageByFolioId("",Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()));
                    //     onSearchItemClick(mLastSearchedtext, mSearchArrayList.get(position), mIsElasticSearch, false, false);
                    onSearchItemClick(mLastSearchedtext, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()), mIsElasticSearch, false, false);
                } else {

                    if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 == 0 &&
                            mSearchArrayListPageWise.size() > (SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1)) {

                        onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition() + 1), mIsElasticSearch, false, false);


                    } else if (Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) % 2 != 0 &&
                            Integer.parseInt(mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition()).get_pageNumber()) != 1) {

                        if (SDKManager.getInstance().getSearchPageWiseIterationPosition() > 0)
                            onSearchItemClick(mSearchQuery, mSearchArrayListPageWise.get(SDKManager.getInstance().getSearchPageWiseIterationPosition() - 1), mIsElasticSearch, false, false);

                    }

                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {

                            //if search result is start from page 1 or odd page number in landscape mode ; loading only single page highlight

                            onSearchItemClick(mLastSearchedtext, mSearchArrayList.get(position), mIsElasticSearch, false, false);

                        }
                    }, 500);
                }

            } else {
                SDKManager.getInstance().setSearchIndexEpub(position);
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    if (SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[0].getChapterName()) || SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[1].getChapterName())) {
                        renderView.drawSequesntialSearchHighlight();
                    } else {
                        renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                    }
                } else {
                    if (SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[0].getChapterName())) {
                        renderView.drawSequesntialSearchHighlight();
                    } else {
                        renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                    }
                }
              /*  if(!SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(position).getChapterName())){
                    SDKManager.getInstance().setSearchIndexEpub(position);
                    if(mSearchArrayListPageWise!=null)
                        mSearchArrayListPageWise.clear();
                   *//* for (int i = 0; i <mSearchArrayList.size() ; i++) {
                        int value=-1;
                        if(mSearchArrayList.get(i).getChapterName().equalsIgnoreCase(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName())){
                           if(value==-1)
                               value=0;
                           else
                               value=value+1;
                            mSearchArrayList.get(i).setSearchIndex(value);
                            mSearchArrayListPageWise.add(mSearchArrayList.get(i));
                        }
                    }*//*
                    SDKManager.getInstance().setSearchSequentialIndexEpub(mSearchArrayList.get(position).getSearchIndex());
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                        if(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[0].getChapterName()) || SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[1].getChapterName())) {
                            renderView.drawSequesntialSearchHighlight();
                        }else {
                            renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                        }
                    }else {
                        if(SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName().equalsIgnoreCase(mcurrentPageData[0].getChapterName())){
                            renderView.drawSequesntialSearchHighlight();
                        }else {
                            renderView.navigatePage(0, SDKManager.getInstance().getSearchData().get(SDKManager.getInstance().getSearchIndexEpub()).getChapterName(), "", isMobile, false);
                        }
                    }
                   *//* int time=0;
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE) {
                        time=3000;
                    }else {
                        time=2000;
                    }
                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {

                            if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                                onSearchItemClick(mSearchQuery, mSearchArrayList.get(position),mIsElasticSearch,false,true);
                            }
                            else{
                                if(isMobile){
                                    onSearchItemClick(mSearchQuery, mSearchArrayList.get(position-1),mIsElasticSearch,false,false);
                                }else {
                                    if(position % 2 == 0){
                                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(position),mIsElasticSearch,true,true);
                                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(position-1),mIsElasticSearch,false,false);
                                    }else {
                                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(position),mIsElasticSearch,false,true);
                                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(position+1),mIsElasticSearch,true,false);
                                    }
                                }


                            }

                        }
                    },time);*//*
                }else {
                    SDKManager.getInstance().setSearchIndexEpub(position);
                    if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {

                        onSearchItemClick(mSearchQuery, mSearchArrayList.get(position),mIsElasticSearch,false,true);
                    }
                    else{
                        if(position % 2 == 0){
                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(position),mIsElasticSearch,true,true);
                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(position-1),mIsElasticSearch,false,false);
                        }else {
                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(position),mIsElasticSearch,false,true);
                            onSearchItemClick(mSearchQuery, mSearchArrayList.get(position+1),mIsElasticSearch,true,false);
                        }

                    }
                }*/
            }
        } else {
            if (mReaderType != EBookType.REFLOWEPUB) {
                renderView.navigatePage(Integer.parseInt(mSearchArrayList.get(position).get_pageNumber()), "", "", isMobile, false);
            }

            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {

                    //if search result is start from page 1 or odd page number in landscape mode ; loading only single page highlight

                    onSearchItemClick(mLastSearchedtext, mSearchArrayList.get(position), mIsElasticSearch, false, false);

                }
            }, 500);
        }
        mTabSearchList.setVisibility(View.GONE);

        //  mTabSearchCancelButton.callOnClick();

    }

    /**
     * call the async method to search the query string
     */
    private void startTextSearch() {
        if (mLastSearchedtext != null && mLastSearchedtext.length() >= 2 && mLastSearchedtext.length() <= 100) {
            callAsync(mLastSearchedtext);


            Bundle bundle = new Bundle();
           /* bundle.putString(FirebaseConstants.SEARCH_BUTTON, mLastSearchedtext);

            FirebaseAnalyticsEvents.INSTANCE.sendFirebaseEvents(FirebaseConstants.SEARCH_BUTTON_CLICK, bundle);*/

        }
    }

    private void callAsync(String data) {

        if (mSearchAsync != null && mSearchAsync.getStatus() == AsyncTask.Status.RUNNING) {
            mSearchAsync.cancel(true);
        }
        mSearchAdapter.setHighlightText(mLastSearchedtext);
        mSearchAsync = new SearchAsyncTask();
        mSearchAsync.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, data.trim());
    }

    private String getPageNumber(String content) {
        String[] pageno;
        pageno = content.split("/")[1].substring(4).split(".xhtml");
        return pageno[0];
    }

    public void openColorPopup(View v, FragmentManager fm, final ColorPickerDialogDash.OnColorSelectedListener
            obj, int[] penColors, int numberOfColumn) {
        try {

            colors = penColors;
            if (numberOfColumn == 0) {
                numberOfColumn = colors.length;
            }
         /*   for (int i = 0; i < penColors.length; i++) {
                try {
                    colors[i] = Color.parseColor(penColors[i] + "");
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }*/
            colorcalendar = CustomColorPickerDialogDash.newInstance(PlayerActivity.this,
                    R.string.color_picker_default_title,
                    colors,
                    getCurrPenColorInt(),
                    numberOfColumn, readerThemeSettingVo);
            //   obj.onColorSelected(getCurrPenColorInt());
            //Implement listener to get selected color value
            colorcalendar.setOnColorSelectedListener(new CustomColorPickerDialogDash.OnColorSelectedListener() {

                @Override
                public void onColorSelected(int color) {
                    String hexColor = String.format("%06X", (0xFFFFFF & color));
                    obj.onColorSelected(color, true);
                }

                @Override
                public void onDismiss() {
                    obj.onDismiss();
                }
            });
            colorcalendar.setOnDismissListener(new PopupWindow.OnDismissListener() {
                @Override
                public void onDismiss() {
                    obj.onDismiss();
                }
            });
            try {
                int[] location = new int[2];
                v.getLocationOnScreen(location);
                int popStart = location[0] - (((int) getResources().getDimension(R.dimen.color_popup_width) / 2) - (v.getWidth() / 2));
                int screenWidth = getWindowManager().getDefaultDisplay().getWidth();
                int windowWidth = (int) getResources().getDimension(R.dimen.pop_width) + popStart;

                if (windowWidth > screenWidth) {
                    colorcalendar.showAsDropDown(v, -(windowWidth - screenWidth), (int) getResources().getDimension(R.dimen.pop_offset));
                } else if (popStart < 0) {
                    colorcalendar.showAsDropDown(v, 10, (int) getResources().getDimension(R.dimen.pop_offset));
                } else {
                    colorcalendar.showAsDropDown(v, -(((int) getResources().getDimension(R.dimen.color_popup_width) / 2) - (v.getWidth() / 2)),
                            (int) getResources().getDimension(R.dimen.pop_offset));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            //  GlobalDataManager.getInstance().getLocalBookData().addPopUpVisibilityListener(this);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void openASColorPopup(View v, FragmentManager fm, final ColorPickerDialogDash.OnColorSelectedListener
            obj, int[] penColors, int numberOfColumn) {
        try {

            colors = penColors;
            if (numberOfColumn == 0) {
                numberOfColumn = colors.length;
            }

            if (colorcalendar != null) {
                colorcalendar.dismiss();
                colorcalendar = null;
            }

            colorcalendar = CustomColorPickerDialogDash.newInstance(PlayerActivity.this,
                    R.string.color_picker_default_title,
                    colors,
                    getCurrColorPickerInt(),
                    numberOfColumn, readerThemeSettingVo);

            colorcalendar.setOnColorSelectedListener(new CustomColorPickerDialogDash.OnColorSelectedListener() {

                @Override
                public void onColorSelected(int color) {
                    String hexColor = String.format("%06X", (0xFFFFFF & color));
                    obj.onColorSelected(color, false);
                }

                @Override
                public void onDismiss() {
                    obj.onDismiss();
                }
            });
            colorcalendar.setOnDismissListener(new PopupWindow.OnDismissListener() {
                @Override
                public void onDismiss() {
                    obj.onDismiss();
                }
            });


            try {
                int[] location = new int[2];
                v.getLocationOnScreen(location);
                int popStart = location[0] - (((int) getResources().getDimension(R.dimen.color_popup_width) / 2) - (v.getWidth() / 2));

                if (isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT)
                    colorcalendar.showAtLocation(v, Gravity.TOP | Gravity.RIGHT, locateView(v).left, mainview.getHeight() - (bottomActionbar
                            .getHeight() + (bottomActionbar.getHeight() / 4)));
                else
                    colorcalendar.showAtLocation(v, Gravity.TOP | Gravity.LEFT, locateView(v).left, mainview.getHeight() - (bottomActionbar
                            .getHeight() + (bottomActionbar.getHeight() / 3)));

            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public static Rect locateView(View v) {
        int[] loc_int = new int[2];
        if (v == null) return null;
        try {
            v.getLocationOnScreen(loc_int);
        } catch (NullPointerException npe) {
            //Happens when the view doesn't exist on screen anymore.
            return null;
        }
        Rect location = new Rect();
        location.left = loc_int[0];
        location.top = loc_int[1];
        location.right = location.left + v.getWidth();
        location.bottom = location.top + v.getHeight();
        return location;
    }

    public int getCurrPenColorInt() {
        if (colors != null && colors.length > 0) {
            int tmp = colors[0];
            String currColor = GlobalDataManager.getInstance().getPenColor();
            if (currColor != null && !currColor.isEmpty()) {
                //currColor = tmp.getColor();
                if (currColor.contains("#")) {
                    tmp = Color.parseColor(currColor);
                } else {
                    tmp = Color.parseColor("#" + currColor);
                }
            }
            return tmp;
        }


        return 0;

    }

    public int getCurrColorPickerInt() {
        if (colors != null && colors.length > 0) {
            int tmp = colors[0];
            String currColor = com.hurix.commons.notifier.GlobalDataManager.getInstance().getCurrentASMenucolor();
            if (currColor != null && !currColor.isEmpty()) {
                //currColor = tmp.getColor();
                if (currColor.contains("#")) {
                    tmp = Color.parseColor(currColor);
                } else {
                    tmp = Color.parseColor("#" + currColor);
                }
            }
            return tmp;
        }


        return 0;

    }

    /**
     * Callback is responsible to handle the Custom keyboard parameters
     *
     * @param height        The height of the keyboard in pixels
     * @param orientation   The orientation either: Configuration.ORIENTATION_PORTRAIT or
     * @param visibleheight
     * @param screenSize
     */
    @Override
    public void onKeyboardHeightChanged(int height, int orientation, int visibleheight, int screenSize) {
        FrameLayout.LayoutParams params = (FrameLayout.LayoutParams) mTabSearchLayout.getLayoutParams();
        //   params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        params.bottomMargin = height;
        if (!Utility.isDeviceTypeMobile(this)) {
            mTabSearchLayout.setPadding(0, 0, 0, 20);
        }
        mTabSearchLayout.setLayoutParams(params);
    }

    @Override
    public void onTouchCalledTextAnnotation(MotionEvent event) {

        /*if (event.getAction() == MotionEvent.ACTION_DOWN) {
            removeEmptyAnnotationView();
            //(findViewById(R.id.text_annotation)).setVisibility(View.GONE);
            PointF _currentPoint = new PointF(event.getX(), event.getY() );
            point = new Point((int) _currentPoint.x, (int) _currentPoint.y );
            if (SDKManager.getInstance().getActivatedAnnotationVO() != null &&
                    SDKManager.getInstance().getActivatedAnnotationVO().getmEnteredText().isEmpty()){
                renderView.removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO() , false);
                SDKManager.getInstance().removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO().getViewKey());
            }else {
                drawAnnotationView();
            }


        }*/
    }

    public void drawAnnotationView() {
        ScalableEditText vo = renderView.isTouchPointValid(point);
        if (vo != null) {
            SDKManager.getInstance().setActivatedAnnotationVO(null);
            vo.setCustomWidth((SDKManager.getInstance().getPdfPageWidth() - 100) / SDKManager.getInstance().getCurrentScale());
            vo.setCustomHeight((SDKManager.getInstance().getPdfPageHeight() / 3) / SDKManager.getInstance().getCurrentScale());
            renderView.drawTextAnnotation(vo);
            vo.setViewKey(vo.getFolioID() + Math.random());
            SDKManager.getInstance().setActivatedAnnotationVO(vo);
        }
    }

    /**
     * Callback when Annotation draw completed
     *
     * @param view
     */
    @Override
    public void onAnnotationDrawCompleted(ScalableEditText view) {
        SDKManager.getInstance().setAnnotionInList(view.getViewKey(), view);
    }

    @Override
    public void drawAnnotationAfterRemoveEmptyView() {
        drawAnnotationView();
    }

    @Override
    public void refreshPageAfterDragAnnotaion() {
        ScalableEditText text = SDKManager.getInstance().getActivatedAnnotationVO();
        SDKManager.getInstance().getAnnotationList().remove(text);
        float width = 0, height = 0;
        if (text.getUpdatedRect() != null) {
            width = text.getUpdatedRect().width() / SDKManager.getInstance().getCurrentScale();
            height = text.getUpdatedRect().height() / SDKManager.getInstance().getCurrentScale();
        } else {
            width = text.getCustomWidth();
            height = text.getCustomHeight();

        }
        text.setCustomHeight(height);
        text.setCustomWidth(width);
        text.setAnnotationFrame(getJSONAnnotationFrame(text.getX1(), text.getY1(), width, height));
        text.setUpdatedRect(null);

        if (text.getLocalID() == 0) {
            DatabaseManager.getInstance(PlayerActivity.this).insertTextAnnotation(text,
                    bookId,
                    userID);
        } else {
            DatabaseManager.getInstance(PlayerActivity.this).updateTextAnnotationData(text, userID);
        }

        emptyListAndAddData();
        SDKManager.getInstance().refreshHighLightOnPage();
        new Handler(getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                enableTextAnnotation();
            }
        }, 1000);

    }

    private void emptyListAndAddData() {
        SDKManager.getInstance().getAnnotationVOByFolioID().clear();
        getTextAnnotationFromDBByFolioId(currentFoliId);
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE &&
                !Utils.isDeviceTypeMobile(PlayerActivity.this) && !SDKManager.getInstance().getBookMode().equalsIgnoreCase("landscape_one_page")) {
            getTextAnnotationFromDBByFolioId(currentFoliIdPrev);
        }
    }

    private void enableTextAnnotation() {
        renderView.isTextAnnotationActive(true);
        hideActionBar();
        enableAnnotationViews();
        hideBottomBar();
        replaceBottomBarWithAnnotationBar();

    }

    private void enableAnnotationViews() {
        enableSavedView(currentFoliId);
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE &&
                !Utils.isDeviceTypeMobile(PlayerActivity.this) && !SDKManager.getInstance().getBookMode().equalsIgnoreCase("landscape_one_page")) {
            enableSavedView(currentFoliIdPrev);
        }
    }

    private void enableSavedView(String currentFoliId) {
        if (SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliId) != null) {
            for (ScalableEditText view : SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliId)) {
                view.setEnabled(true);
                //view.setTextIsSelectable(true);
                //view.setSelection(view.getmEnteredText().length());
                //view.setCursorVisible(true);
            }
        }
    }

    @Override
    public void onAnnotationLongPressed(ScalableEditText view) {
        renderView.startDragAnnotation(view);
    }

    private void removeAnnotation(String folio) {
        if (SDKManager.getInstance().getAnnotationVOByFolioID().get(folio) != null) {
            for (ScalableEditText view : SDKManager.getInstance().getAnnotationVOByFolioID().get(folio)) {
                if (view.getmEnteredText().isEmpty()) {
                    renderView.removeAnnotationView(view, true);
                }
            }
        }
    }

    private void removeEmptyAnnotationView() {
        removeAnnotation(currentFoliId);

        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE &&
                !Utils.isDeviceTypeMobile(PlayerActivity.this) && !SDKManager.getInstance().getBookMode().equalsIgnoreCase("landscape_one_page")) {
            removeAnnotation(currentFoliIdPrev);
        }
    }

    private ScalableEditText getUpdatedView(ScalableEditText text) {
        float pointX1 = (text.getUpdatedRect().left + (text.getUpdatedRect().width() / 2));
        float pointY1 = (text.getUpdatedRect().top + (text.getUpdatedRect().height() / 2));
        float x1 = pointX1 / SDKManager.getInstance().getCurrentScale();
        text.setX1(x1);
        float y1 = pointY1 / SDKManager.getInstance().getCurrentScale();
        text.setY1(y1);
        float width = text.getUpdatedRect().width() / SDKManager.getInstance().getCurrentScale();
        float height = text.getUpdatedRect().height() / SDKManager.getInstance().getCurrentScale();
        text.setCustomHeight(height);
        text.setCustomWidth(width);
        text.setAnnotationFrame(getJSONAnnotationFrame(x1, y1, width, height));
        text.setUpdatedRect(null);
        return text;
    }

    private JSONObject getJSONAnnotationFrame(float x, float y, float width, float height) {
        JSONObject annotaion = new JSONObject();
        try {
            annotaion.put("x", x);
            annotaion.put("y", y);
            annotaion.put("width", width);
            annotaion.put("height", height);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return annotaion;
    }

    private void setTopBarWithDoneAnnotation() {
        mAnnotationDoneText = new KitabooActionItemView(this);
        setTopActionbar(mAnnotationDoneText, R.id.action_annotation_done, "F", "F", mBottomActionBarItemColor, Gravity.RIGHT, 0, 22);
        topActionbar.build();
    }

    private void getTextAnnotationFromDBByFolioId(String folioId) {
        ArrayList<ScalableEditText> annotationList = DatabaseManager.getInstance(this).getTextAnnotaionByChapter(
                bookId, userID, folioId);

        if (annotationList != null) {
            SDKManager.getInstance().setAnnotationVOByFolioID(folioId, annotationList);
        }

    }

    @Override
    public void removeActiveEmptyAnnotation() {
        if (SDKManager.getInstance().getActivatedAnnotationVO() != null &&
                SDKManager.getInstance().getActivatedAnnotationVO().getmEnteredText().isEmpty()) {
            renderView.removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO(), true);
            SDKManager.getInstance().removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO().getViewKey());
        }
    }

    private void addTextAnnotationDeleteButton(String folioId) {
        /*TextView textView = new TextView(PlayerActivity.this);
        textView.setText("D");
        textView.setTextSize(22);
        textView.setTextColor(getResources().getColor(R.color.red_dark));
        textView.setBackground(getResources().getDrawable(R.drawable.text_annotation_delete_backgroundc));*/
        CustomFloatingActionButton actionButton = new CustomFloatingActionButton(PlayerActivity.this);
        actionButton.setCustomWidth((int) (190 / SDKManager.getInstance().getCurrentScale()));
        actionButton.setCustomHeight((int) (190 / SDKManager.getInstance().getCurrentScale()));
        actionButton.setX1(SDKManager.getInstance().getPdfPageWidth() / 2 / SDKManager.getInstance().getCurrentScale());
        actionButton.setY1((SDKManager.getInstance().getPdfPageHeight() - 200) / SDKManager.getInstance().getCurrentScale());

        //renderView.addTextAnnotationDeleteButton(actionButton, folioid);
        SDKManager.getInstance().setTextAnnotationDeleteButton(actionButton, folioId);
        //SDKManager.getInstance()

    }

    private void replaceBottomBarWithAnnotationBar() {
        Typeface _typeFace = Typefaces.get(PlayerActivity.this, "kitabooread_new_27_12_2018.ttf");
        mTextAnnotationParent.setBackgroundColor(mPentoolToolbarBackgroundColor);
        ((TextView) findViewById(R.id.text_keyboard)).setAllCaps(false);
        ((TextView) findViewById(R.id.text_keyboard)).setTypeface(_typeFace);
        ((TextView) findViewById(R.id.text_keyboard)).setText(PlayerUIConstants.TEXT_KEYBOARD_UP_TEXT_ANNOTATION);
        ((TextView) findViewById(R.id.text_keyboard)).setTextColor(Color.parseColor(themeUserSettingVo.getmKitabooMainColor()));
        ((TextView) findViewById(R.id.text_keyboard)).setTextSize(21);
        findViewById(R.id.text_keyboard).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!mIsKeyboardOpen) {
                    //Utils.showKeyboard(PlayerActivity.this, SDKManager.getInstance().getActivatedAnnotationVO());
                    SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardOpen();
                    mIsKeyboardOpen = true;
                } else {
                    mIsKeyboardOpen = false;
                    SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardClose();
                    //Utils.hideKeyboard(PlayerActivity.this);
                }
            }
        });

        findViewById(R.id.text_keyboard_parent).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (!mIsKeyboardOpen) {
                    //Utils.showKeyboard(PlayerActivity.this, SDKManager.getInstance().getActivatedAnnotationVO());
                    SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardOpen();
                    mIsKeyboardOpen = true;
                } else {
                    mIsKeyboardOpen = false;
                    SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardClose();
                    //Utils.hideKeyboard(PlayerActivity.this);
                }
            }
        });

        HashMap<Integer, String> annotationMenuList = new HashMap<>();
        annotationMenuList.put(R.id.action_clear_text_annotation_view, PlayerUIConstants.TEXT_CLEAR_TEXT_ANNOTATION);
        annotationMenuList.put(R.id.action_alignment_text_annotation_view, PlayerUIConstants.TEXT_ALIGNMENT_TEXT_ANNOTATION);
        annotationMenuList.put(R.id.action_text_annotation_text_color, PlayerUIConstants.TEXT_COLOR_TEXT_ANNOTATION);
        annotationMenuList.put(R.id.action_text_annotation_background_color, PlayerUIConstants.TEXT_ANNOTATION_BACKGROUND_COLOR);
        annotationMenuList.put(R.id.action_add_text_annotation_view, PlayerUIConstants.TEXT_ADD_ANNOTATION);
        annotationMenuList.put(R.id.action_done_text_annotation_view, PlayerUIConstants.TEXT_DONE_TEXT_ANNOTATION);

        ArrayList<Integer> menuIdList = new ArrayList<>();
        menuIdList.add(R.id.action_clear_text_annotation_view);
        menuIdList.add(R.id.action_alignment_text_annotation_view);
        menuIdList.add(R.id.action_text_annotation_text_color);
        menuIdList.add(R.id.action_text_annotation_background_color);
        menuIdList.add(R.id.action_add_text_annotation_view);
        menuIdList.add(R.id.action_done_text_annotation_view);

        LinearLayoutManager layoutManager
                = new LinearLayoutManager(PlayerActivity.this, LinearLayoutManager.HORIZONTAL, false);

        textAnnotationMenuAdapter = new TextAnnotationMenuAdapter(annotationMenuList, menuIdList, themeUserSettingVo, _typeFace);
        textAnnotationMenuAdapter.setListener(this);
        mTextAnnotationBottomBar.setLayoutManager(layoutManager);
        mTextAnnotationBottomBar.setAdapter(textAnnotationMenuAdapter);
    }

    @Override
    public void onTextAnnotationKeyboardHeightChanged(int height, int orientation, int visibleheight, int screenSize) {
        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mTextAnnotationParent.getLayoutParams();
        params.bottomMargin = height;
        mTextAnnotationParent.setLayoutParams(params);
        if (height == 0) {
            ((TextView) findViewById(R.id.text_keyboard)).setText(PlayerUIConstants.TEXT_KEYBOARD_UP_TEXT_ANNOTATION);
            mIsKeyboardOpen = false;
        } else {
            ((TextView) findViewById(R.id.text_keyboard)).setText(PlayerUIConstants.TEXT_KEYBOARD_DOWN_TEXT_ANNOTATION);
            mIsKeyboardOpen = true;
        }

    }

    /**
     * Callback is responsible to handle Annotation and protractor on page.
     *
     * @param id item res id
     */
    @Override
    public void onAnnotationRecyclerItemClick(final int id) {
        penHelper.setTextAnnotationListener(this);

        if (SDKManager.getInstance().getActivatedAnnotationVO() != null) {
            SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardClose();
        }
        new Handler(getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                if (id == R.id.action_clear_text_annotation_view) {

                    if (SDKManager.getInstance().getActivatedAnnotationVO().getMode() != "M") {
                        if (SDKManager.getInstance().getActivatedAnnotationVO() != null) {
                            SDKManager.getInstance().getActivatedAnnotationVO().setmEnteredText("");
                            SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardClose();
                        }

                        if (SDKManager.getInstance().getActivatedAnnotationVO() != null &&
                                (SDKManager.getInstance().getActivatedAnnotationVO().getLocalID() != 0
                                        || SDKManager.getInstance().getActivatedAnnotationVO().getUGCID() != 0)) {
                            SDKManager.getInstance().getActivatedAnnotationVO().setMode("D");
                        }
                    }
                    mTextAnnotationParent.setVisibility(View.GONE);
                    onTextAnnotationDoneClicked();


                } else if (id == R.id.action_alignment_text_annotation_view) {
                    SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardClose();
                    HashMap<Integer, String> alignmentPopupKeyList = new HashMap<>();
                    alignmentPopupKeyList.put(R.id.action_left_align_text_annotation, PlayerUIConstants.TEXT_ANNOTATION_LEFT_ALIGN_TEXT);
                    alignmentPopupKeyList.put(R.id.action_centre_align_text_annotation, PlayerUIConstants.TEXT_ANNOTATION_CENTRE_ALIGN_TEXT);
                    alignmentPopupKeyList.put(R.id.action_right_align_text_annotation, PlayerUIConstants.TEXT_ANNOTATION_RIGHT_ALIGN_TEXT);

                    ArrayList<Integer> alignmentIds = new ArrayList<>();
                    alignmentIds.add(R.id.action_left_align_text_annotation);
                    alignmentIds.add(R.id.action_centre_align_text_annotation);
                    alignmentIds.add(R.id.action_right_align_text_annotation);

                    Typeface _typeFace = Typefaces.get(PlayerActivity.this, "kitabooread_new_27_12_2018.ttf");

                    penHelper.openTextAlignmentPopup(mTextAnnotationParent, alignmentPopupKeyList, alignmentIds, _typeFace);

                } else if (id == R.id.action_text_annotation_text_color) {
                    SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardClose();
                    if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                        hideDialog();
                    }
                    final int numberOfColumn = 5;
                    final FragmentManager fm = getSupportFragmentManager();
                    penHelper.openTextAnnotationTextColorPopup(mTextAnnotationParent, fm, PlayerActivity.this, mTxtAnnotationTextColors, numberOfColumn);

                } else if (id == R.id.action_text_annotation_background_color) {
                    SDKManager.getInstance().getActivatedAnnotationVO().setKeyboardClose();
                    if (mDialog != null && mDialog.getDialog() != null && mDialog.getDialog().isShowing()) {
                        hideDialog();
                    }


                    final int numberOfColumn = 5;
                    final FragmentManager fm = getSupportFragmentManager();
                    penHelper.openTextAnnotationBackgroundColorPopup(mTextAnnotationParent, fm, PlayerActivity.this, mTextAnnotationBackgroundColors, numberOfColumn);

                } else if (id == R.id.action_add_text_annotation_view) {
                    hideDeleteButtonTextAnnotation();

                    removeEmptyAnnotationView();
                    //PointF _currentPoint = new PointF(event.getX(), event.getY());
                    point = new Point(SDKManager.getInstance().getPdfPageWidth() / 2, SDKManager.getInstance().getPdfPageHeight() / 2);
                    if (SDKManager.getInstance().getActivatedAnnotationVO() != null &&
                            SDKManager.getInstance().getActivatedAnnotationVO().getmEnteredText().isEmpty()) {
                        renderView.removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO(), false);
                        SDKManager.getInstance().removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO().getViewKey());
                    } else {
                        drawAnnotationView();
                    }

                } else if (id == R.id.action_done_text_annotation_view) {
                    mTextAnnotationParent.setVisibility(View.GONE);
                    onTextAnnotationDoneClicked();

                }
            }
        }, 500);

    }

    @SuppressLint("RestrictedApi")
    private void hideDeleteButtonTextAnnotation() {
        for (PDFPage page : SDKManager.getInstance().getCurrentActivatedPageList()) {
            SDKManager.getInstance().getTextAnnotationDeleteButton().get(page.getFolioID()).setVisibility(View.INVISIBLE);
        }
    }

    private void setTextAnnotationTextColorCollection() {
        mTxtAnnotationTextColors = new int[5];
        String[] mEditTextColorStringArray = new String[]{"#000000", "#fcb000", "#01a7fc", "#00d0ef", "#cc82ff"};
        for (int i = 0; i < mEditTextColorStringArray.length; i++) {
            mTxtAnnotationTextColors[i] = Color.parseColor(mEditTextColorStringArray[i]);
        }
        SDKManager.getInstance().setCurrentTextColorOfTextAnnotation(mEditTextColorStringArray[0]);
        SDKManager.getInstance().setDefaultTextColorOfAnnoation(mEditTextColorStringArray[0]);
    }

    private void setTextAnnotationBackgroundColorCollection() {
        mTextAnnotationBackgroundColors = new int[5];
        String[] textBackgroundcolors = new String[]{"#ffffff", "#fdf9d1", "#e1fbb9", "#e2fdfd", "#fcf5fe"};
        for (int i = 0; i < textBackgroundcolors.length; i++) {
            mTextAnnotationBackgroundColors[i] = Color.parseColor(textBackgroundcolors[i]);
        }
        SDKManager.getInstance().setCurrentBackgroundColorOfTextAnnotation(textBackgroundcolors[0]);
        SDKManager.getInstance().setDefaultBackgroundColorOfTextAnnotation(textBackgroundcolors[0]);
    }


    private void onTextAnnotationDoneClicked() {
        renderView.isTextAnnotationActive(false);
        hideDeleteButtonTextAnnotation();
        if (SDKManager.getInstance().getActivatedAnnotationVO() != null &&
                SDKManager.getInstance().getActivatedAnnotationVO().getmEnteredText().isEmpty()) {
            renderView.removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO(), true);
            SDKManager.getInstance().removeAnnotationView(SDKManager.getInstance().getActivatedAnnotationVO().getViewKey());
        }

        for (ScalableEditText text : SDKManager.getInstance().getAnnotationList()) {
            if (text.getmEnteredText().isEmpty()) {
                renderView.removeAnnotationView(text, true);
                SDKManager.getInstance().getAnnotationList().remove(text);
            }
        }

        insertTextAnnotationData();
        updateTextAnnotationData();
        updateAndRemoveTextAnnotationInLandscapeDoublePageMode();

        if (SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliId) != null) {
            for (int i = 0; i < SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliId).size(); i++) {
                ScalableEditText viw = SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliId).get(i);
                if (viw.getmEnteredText().isEmpty()) {
                    renderView.removeAnnotationView(viw, true);
                    SDKManager.getInstance().getAnnotationVOByFolioID().get(SDKManager.getInstance().getCurrentFolioId()).remove(viw);
                }
            }
        }

        emptyListAndAddData();
        SDKManager.getInstance().getAnnotationList().removeAll(SDKManager.getInstance().getAnnotationList());
        new Handler(getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                SDKManager.getInstance().refreshHighLightOnPage();
            }
        }, 1000);

        showActionBar();
        showBottomBar();
    }

    private void updateAndRemoveTextAnnotationInLandscapeDoublePageMode() {
        if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE &&
                !Utils.isDeviceTypeMobile(PlayerActivity.this) && !SDKManager.getInstance().getBookMode().equalsIgnoreCase("landscape_one_page")) {
            if (SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliIdPrev) != null) {
                for (ScalableEditText viw : SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliIdPrev)) {
                    if (!viw.getMode().equalsIgnoreCase("N")) {
                        if (viw.getUpdatedRect() != null) {
                            viw = getUpdatedView(viw);
                        }
                        DatabaseManager.getInstance(PlayerActivity.this).updateTextAnnotationData(viw, userID);
                    }
                }

                for (ScalableEditText viw : SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliIdPrev)) {
                    if (viw.getmEnteredText().isEmpty()) {
                        renderView.removeAnnotationView(viw, true);
                        SDKManager.getInstance().getAnnotationVOByFolioID().get(SDKManager.getInstance().getCurrentFolioId()).remove(viw);
                    }
                }

            }

        }
    }

    private void updateTextAnnotationData() {
        if (SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliId) != null) {
            for (ScalableEditText viw : SDKManager.getInstance().getAnnotationVOByFolioID().get(currentFoliId)) {
                if (!viw.getMode().equalsIgnoreCase("N")) {
                    if (viw.getUpdatedRect() != null) {
                        viw = getUpdatedView(viw);
                    }
                    DatabaseManager.getInstance(PlayerActivity.this).updateTextAnnotationData(viw, userID);
                }
            }
        }
    }

    private void insertTextAnnotationData() {
        for (ScalableEditText text : SDKManager.getInstance().getAnnotationList()) {
            if (text.getMode().equalsIgnoreCase("N")) {
                if (text.getUpdatedRect() != null) {
                    text = getUpdatedView(text);
                }
                DatabaseManager.getInstance(this).insertTextAnnotation(text, bookId, userID);
            }
        }
    }

    @Override
    public void onTextAnnotationAlignmentChanged(int id) {
        if (id == R.id.action_left_align_text_annotation) {
            SDKManager.getInstance().getActivatedAnnotationVO().setCustomTextAlignment(TextAlignment.LEFT_ALIGN);
        } else if (id == R.id.action_centre_align_text_annotation) {
            SDKManager.getInstance().getActivatedAnnotationVO().setCustomTextAlignment(TextAlignment.CENTRE_ALIGN);
        } else if (id == R.id.action_right_align_text_annotation) {
            SDKManager.getInstance().getActivatedAnnotationVO().setCustomTextAlignment(TextAlignment.RIGHT_ALIGN);
        }
    }

    @Override
    public void onTextAnnotationTextColorChanged(int color) {
        String hexColor = String.format("%06X", (0xFFFFFF & color));
        SDKManager.getInstance().setCurrentTextColorOfTextAnnotation("#" + hexColor);
        SDKManager.getInstance().getActivatedAnnotationVO().setEdittextTextColor("#" + hexColor);
    }

    @Override
    public void onTextAnnotationBackgroundColorChanged(int color) {
        String hexColor = String.format("%06X", (0xFFFFFF & color));
        SDKManager.getInstance().setCurrentBackgroundColorOfTextAnnotation("#" + hexColor);
        SDKManager.getInstance().getActivatedAnnotationVO().setEdittextBackgroundColor("#" + hexColor);
    }

    @Override
    public void onTextAnnotationPopupDismiss() {
        textAnnotationMenuAdapter.setCurrentItemPosition();
        textAnnotationMenuAdapter.notifyDataSetChanged();
    }

    @Override
    public void onActivateTextAnnotationOnTouch() {
        mTextAnnotationParent.setVisibility(View.VISIBLE);
        renderView.isTextAnnotationActive(true);
        enableTextAnnotation();
        textAnnotationKeyboardHeightProvider.start();
    }

    @Override
    public void onShowTextAnnotationDeletePopup() {
        if (deleteTextAnnotationDialog == null) {
            deleteTextAnnotationDialog = new DeleteTextAnnotationDialog(PlayerActivity.this);
            deleteTextAnnotationDialog.setDeletePopupListener(this);
        }
        if (deleteTextAnnotationDialog.isShowing()) {
            deleteTextAnnotationDialog.dismiss();
        }
        deleteTextAnnotationDialog.show();
    }

    @Override
    public void onTextAnnotationDeleteClicked() {
        if (deleteTextAnnotationDialog.isShowing()) {
            deleteTextAnnotationDialog.dismiss();
        }
        hideDeleteButtonTextAnnotation();
        if (SDKManager.getInstance().getActivatedAnnotationVO() != null) {
            SDKManager.getInstance().getActivatedAnnotationVO().setmEnteredText("");
        }

        if (SDKManager.getInstance().getActivatedAnnotationVO().getLocalID() != 0
                || SDKManager.getInstance().getActivatedAnnotationVO().getUGCID() != 0) {
            SDKManager.getInstance().getActivatedAnnotationVO().setMode("D");
        }
        mTextAnnotationParent.setVisibility(View.GONE);
        onTextAnnotationDoneClicked();
    }

    @Override
    public void onTextAnnotationCancelClicked() {
        if (deleteTextAnnotationDialog.isShowing()) {
            deleteTextAnnotationDialog.dismiss();
        }

        hideDeleteButtonTextAnnotation();
    }


    /**
     * Callback when Sticky Note is dragged
     *
     * @param highlightvo Current [Highlight\note] object
     */
    @Override
    public void onStickyNoteDragged(@NotNull HighlightVO highlightvo) {
        if (highlightvo != null) {
            renderView.isHighlightActive(false);
            saveHighlight(highlightvo);
            getHighlightFromDB(highlightvo.getFolioID());
            if (mReaderType != EBookType.FIXEDEPUB)
                renderView.loadAsset(AssetType.HighlightNote, highlightvo.getFolioID());
        }
    }

    /**
     * Callback when Protractor done button is pressed
     *
     * @param vo Current Pentool object
     */
    @Override
    public void onProtractorDoneClicekd(PentoolVO vo) {
        DatabaseManager.getInstance(this).addPenMarkers(vo, bookId, userID, colorWithHash);
        getProtractorFromDB(vo.getFolioID());
        onProtractorDeactivate();
        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                penHelper.refreshAssestOnPage();
            }
        }, 500);
    }

    /**
     * Callback is responsible to close the Protractor
     */
    @Override
    public void onProtractorCloseClicked() {
        onProtractorDeactivate();
    }

    private void onProtractorDeactivate() {
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                renderView.isProtractorActive(false);
                //showActionBar();
                showBottomBar();
            }
        });
    }

    /**
     * Callback when protractor is updated
     *
     * @param pentoolVO Current [Protractor/Pentool] object
     */
    @Override
    public void onProtractorUpdate(@NotNull PentoolVO pentoolVO) {
        DatabaseManager.getInstance(PlayerActivity.this).updatePenMarkers(pentoolVO, userID, bookId, colorWithHash);
        SDKManager.getInstance().getAllProtractorData(pentoolVO.getFolioID()).clear();
        getProtractorFromDB(pentoolVO.getFolioID());
        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                penHelper.refreshAssestOnPage();
            }
        }, 500);
    }

    /**
     * Callback when Protractor is deleted
     *
     * @param pentoolVO Current [Protractor/Pentool] object
     */
    @Override
    public void onProtractorDelete(@NotNull PentoolVO pentoolVO) {
        DatabaseManager.getInstance(PlayerActivity.this).deletePenMarkers(pentoolVO, userID);
        SDKManager.getInstance().getAllProtractorData(pentoolVO.getFolioID()).clear();
        getProtractorFromDB(pentoolVO.getFolioID());
        new Handler(Looper.getMainLooper()).postDelayed(new Runnable() {
            @Override
            public void run() {
                penHelper.refreshAssestOnPage();
            }
        }, 500);
    }

    private void getProtractorFromDB(String folioId) {
        ArrayList<PentoolVO> protractorList = DatabaseManager.getInstance(this).getAllProtractorsByPage(userID,
                folioId, bookId);
        if (protractorList != null && protractorList.size() > 0) {
            SDKManager.getInstance().setAllProtractorData(folioId, protractorList);
        }
    }

    /**
     * Callback to inform no data is available to Submit
     */
    @Override
    public void showNoDataSubmittedPopup() {
        showOkAlert(getResources().getString(R.string.sync_message_nodata));
    }

    private GradientDrawable getAudioSyncSelectedBackground() {
        GradientDrawable drawable = new GradientDrawable();
        drawable.setColor(getResources().getColor(R.color.transparent));
        drawable.setShape(GradientDrawable.RECTANGLE);
        float[] radi = {5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f};
        drawable.setCornerRadii(radi);
        drawable.setStroke(2, getResources().getColor(R.color.red));
        return drawable;
    }

    private GradientDrawable getAudioSelectedBackground() {
        GradientDrawable drawable = new GradientDrawable();
        drawable.setColor(getResources().getColor(R.color.transparent));
        drawable.setShape(GradientDrawable.RECTANGLE);
        float[] radi = {5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f};
        drawable.setCornerRadii(radi);
        drawable.setStroke(2, getResources().getColor(R.color.light_blue));
        return drawable;
    }

    private GradientDrawable getAudioSyncUnSelectedBackground() {
        GradientDrawable drawable = new GradientDrawable();
        drawable.setShape(GradientDrawable.RECTANGLE);
        float[] radi = {5f, 5f, 5f, 5f, 5f, 5f, 5f, 5f};
        drawable.setCornerRadii(radi);
        drawable.setStroke(2, getResources().getColor(R.color.transparent));
        return drawable;
    }

    private void disableAllAudioSyncIconBorder() {
        if (SDKManager.getInstance().getClickedAudioSyncList() != null && SDKManager.getInstance().getClickedAudioSyncList().size() > 0) {
            for (LinkVideoView view : SDKManager.getInstance().getClickedAudioSyncList()) {
                //linkView = new LinkView(this, view.getType());
                // view.deselectAudioSyncIcon();
            }
        }
    }

    @Override
    public void AudioStateChanged(View state) {
        //state.setBackground(getAudioSyncUnSelectedBackground());
    }

    /**
     * Callback is responsible to handle the Auto-play[Read-Aloud] condition while page is changed
     *
     * @param pageChangedByUser Changed by user or in auto-mode [true/false]
     */
    @Override
    public void pageChangeForAutoPlay(final boolean pageChangedByUser) {
        SDKManager.getInstance().setAutoScrollPageForAudioSync(true);
        final String nextFolioID = getNextFoliId(SDKManager.getInstance().getCurrentAudioPlayingFolioID());
        final int mpageid = getCurrPageIDByDisplayNum(nextFolioID);
        runOnUiThread(new Runnable() {
            @Override
            public void run() {
                renderView.getCurrentPageAudioSyncList(nextFolioID);
                SDKManager.getInstance().setLinkSequence(1);
                if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
                    renderView.autoPageChange(mpageid - 1);
                    SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                    //renderView.setCurrentItem(mpageid - 1);
                } else if (readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY) || readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME)) {
                    if (mpageid == 0 || mpageid == 1) {
                        renderView.autoPageChange(0);
                        SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                        //renderView.setCurrentItem(0);
                    } else {
                        renderView.autoPageChange(mpageid / 2);
                        SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                        //renderView.setCurrentItem(mpageid / 2);
                    }
                }
            }
        });
    }

    /**
     * Callback is responsible to play next audio in  [Read-Aloud] feature
     */
    @Override
    public void playNextAudio() {

        if (SDKManager.getInstance().isAudioSyncPlaying() && !audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
            clearAudioSyncRect();
            closeReadAloud();
            mTextChapterTitle.setText(mCurrentPageData.getChapterName());
            clearAudioSyncData();
            SDKManager.getInstance().setAudioSyncPlaying(false);
        }

        if (SDKManager.getInstance().isAudioSyncPlaying() && audioBookType.equalsIgnoreCase(READ_ALOUD_BOOK_)) {
            SDKManager.getInstance().setAudioSyncPlaying(false);
        }


        if (readAloudMarkups != null && readAloudMarkups.size() > 0) {
            addTempASFolio(readAloudMarkups);
        }

        if (readAloudType != null && !SDKManager.getInstance().isAudioSyncPlaying()) {
            isReadAloudRequired = true;
            if (SDKManager.getInstance().getLinkSequence() < 0) {
                if (playNextAudioAutomatically && readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY) || readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME)) {
                    playAudioSyncNextLinkOnCurrentPage();
                }
            } else {
                if (readAloudType != null) {
                    if (!isMobile && getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE && !(SDKManager.getInstance().getBookMode().equalsIgnoreCase(bookModeIsLand))) {

                        String nextFolio = "";
                        boolean playASNext = false;
                        nextFolio = getNextFoliId(SDKManager.getInstance().getCurrentAudioPlayingFolioID());
                        if (nextFolio != null && tempASFolioList != null && tempASFolioList.size() > 0 && tempASFolioList.contains(nextFolio) && (currentFoliId.equalsIgnoreCase(nextFolio) || currentFoliIdPrev.equalsIgnoreCase(nextFolio))) {
                            playASNext = true;
                        } else {
                            nextFolio = getNextASFoliId(nextFolio);
                            if (nextFolio != null && tempASFolioList != null && tempASFolioList.size() > 0 && tempASFolioList.contains(nextFolio) && (currentFoliId.equalsIgnoreCase(nextFolio) || currentFoliIdPrev.equalsIgnoreCase(nextFolio))) {
                                playASNext = true;
                            }
                        }

                        if (readAloudMarkups != null && readAloudMarkups.size() > 0 && playASNext) {
                            if (mCurrentPageData != null && ((PDFPage) mcurrentPageData[1]).getLinkCollection() != null && ((PDFPage) mcurrentPageData[1]).getLinkCollection().size() > 0)
                                currListofAudioSyncMarkup(((PDFPage) mcurrentPageData[1]).getLinkCollection());
                            LinkVO objVO = null;
                            if (currASList != null
                                    && currASList.size() > 0) {

                                /*if(currASList!=null && currASList.size()>0 && currASList.get(0).getLinkID()>0 && sentenceAudioMap.get((int)currASList.get(0).getLinkID())!=null)
                                    computeAudioSyncAsWordId(((ArrayList<AudioSyncWordInfo>) sentenceAudioMap.get((int)currASList.get(0).getLinkID())),currASList.get(0).getPageID());*/

                                ((LinkVideoView) currASList.get(0).getLinkView()).callAudioOnclick();
                                lastReadAloudFolioID = currentFoliId;
                                orientantionChangeForReadAloud = false;
                                SDKManager.getInstance().getCurrentPageAudioSyncList().clear();
                                /*isReadAloudRequired=false;
                                isOrientationChanged=false;
                                SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(false);*/
                            }
                        } else if (nextFolio != null && tempASFolioList != null && tempASFolioList.size() > 0 && tempASFolioList.contains(nextFolio) && readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY)) {
                            SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                            renderView.navigatePage(getCurrPageIDByDisplayNum(getNextASFoliId(nextFolio)), "", "", isMobile, false);
                        } else {
                            clearAudioSyncRect();
                            com.hurix.commons.notifier.GlobalDataManager.getInstance().sentenceCurrAudioSyncRect(GlobalDataManager.getInstance().getSentenceAsRectList());
                        }
                    } else if (readAloudType != null && readAloudType.equals(KitabooFixedBook.ReadAloudType.AUTOPLAY)) {
                        SDKManager.getInstance().getCurrentPageAudioSyncList().clear();
                        // pageChangeForAutoPlay(true);
                        SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                        String nextFolio = "";
                        nextFolio = getNextFoliId(SDKManager.getInstance().getCurrentAudioPlayingFolioID());
                        if (nextFolio != null && tempASFolioList != null && tempASFolioList.size() > 0 && tempASFolioList.contains(nextFolio)) {
                            renderView.navigatePage(getCurrPageIDByDisplayNum(nextFolio), "", "", isMobile, false);
                        } else {
                            int navId = getCurrPageIDByDisplayNum(getNextASFoliId(nextFolio));
                            if (navId > (-1))
                                renderView.navigatePage(getCurrPageIDByDisplayNum(getNextASFoliId(nextFolio)), "", "", isMobile, false);
                        }

                    } else if (!isMobile && orientantionChangeForReadAloud && readAloudType != null && readAloudType.equals(KitabooFixedBook.ReadAloudType.READTOME) && getCurrPageIDByDisplayNum(getNextFoliId(SDKManager.getInstance().getCurrentAudioPlayingFolioID())) % 2 != 0) {
                        SDKManager.getInstance().getCurrentPageAudioSyncList().clear();
                        SDKManager.getInstance().setIsReadAloudModeReqOnNavigation(true);
                        renderView.navigatePage(getCurrPageIDByDisplayNum(getNextFoliId(SDKManager.getInstance().getCurrentAudioPlayingFolioID())), "", "", isMobile, false);
                    } else {
                        if (mReadPause != null) {
                            if (mReadPause.getText().toString().equalsIgnoreCase(CustomPlayerUIConstants.READ_PLAY)) {
                                mReadPause.setText(CustomPlayerUIConstants.READ_PAUSE);
                                audioIsPause = false;
                            } else {
                                mReadPause.setText(CustomPlayerUIConstants.READ_PLAY);
                                audioIsPause = true;
                            }
                        }
                    }
                } else {
                    SDKManager.getInstance().getCurrentPageAudioSyncList().clear();
                }
            }
        } else if (readAloudType == null) {
            clearAudioSyncRect();
            closeReadAloud();
            if (mTextChapterTitle != null)
                mTextChapterTitle.setText(mCurrentPageData.getChapterName());
            clearAudioSyncData();
        }
    }

    private void clearAudioSyncRect() {

        isColorPickerClicked = false;

        if (com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList() != null)
            com.hurix.commons.notifier.GlobalDataManager.getInstance().getSentenceAsRectList().clear();

        if (colorcalendar != null) {
            colorcalendar.dismiss();
        }
    }

    /**
     * Callback is responsible to get all the audio list based on folio id.
     *
     * @param mFolioId Current folio id
     */
    @Override
    public void getCurrentPageAudioSyncList(String mFolioId) {
        renderView.getCurrentPageAudioSyncList(mFolioId);
    }

    /*
    Audio popup should dismiss when user changes the page
     */
    @Override
    public void disableAudioSync() {
        //Stop audio

        if (!SDKManager.getInstance().isAutoScrollPageForAudioSync()) {
            if (null != mAudioManager) {
                mAudioManager.close();
                mAudioManager = null;
            }
        }
    }

    /**
     * Notifies when there is no audio availble for reading in Read aloud mode
     */
    @Override
    public void noAudiosFoundForThePage() {
       /* if(SDKManager.getInstance().isReadAloudPlaying()){
            if(mTorData!=null && mTorData.get(0).getResourcelist()!=null){
                mTorData.get(0).getResourcelist().get(0).getFolioNo();
            }
        }*/

    }

    public void playAudioSyncNextLinkOnCurrentPage() {
        if (SDKManager.getInstance().getLinkSequence() == 0) {
            SDKManager.getInstance().setLinkSequence(1);
        }
        SDKManager.getInstance().setTocSelectLinkId(SDKManager.getInstance().getCurrentPageAudioSyncList().
                get(SDKManager.getInstance().getLinkSequence() - 1).getLinkID());
        //  Log.d("RAVITEJA", SDKManager.getInstance().getLinkSequence() - 1 + "");
        SDKManager.getInstance().setAutoPlay(true);
        //GlobalDataManager.getInstance().refreshAssestOnPage();
        com.hurix.commons.notifier.GlobalDataManager.getInstance().playNextAudio(true);
    }


    private void showSessionExpiredAlert() {
        com.hurix.commons.utils.DialogUtils.showOKAlert(new View(PlayerActivity.this), 1, PlayerActivity.this, PlayerActivity.this.getResources()
                        .getString(R.string.alert_title), Utils.getMessageForError(PlayerActivity.this, errorValue),
                new com.hurix.commons.listener.OnDialogOkActionListner() {
                    @Override
                    public void onOKClick(View v) {
                       /* DBController.getInstance(PlayerActivity.this).getManager().logoutUserByID(UserController
                                .getInstance(PlayerActivity.this).getUserVO().getUserID());*/
                        Utils.startLauncherActivity(PlayerActivity.this);
                        com.hurix.reader.kitaboosdkrenderer.notifier.GlobalDataManager.getInstance().setWebViewClosedAfterTokenReceived(false);
                    }
                });
    }

    private void showErrorAlertDialog(int errorCode) {
        com.hurix.commons.utils.DialogUtils.showOKAlert(new View(PlayerActivity.this), 1, PlayerActivity.this, PlayerActivity.this.getResources()
                        .getString(R.string.alert_title), Utils.getMessageForError(PlayerActivity.this, errorCode),
                new com.hurix.commons.listener.OnDialogOkActionListner() {
                    @Override
                    public void onOKClick(View v) {
                    }
                });
    }

    private void showAudioPlayDialoge() {

       /* mReadAloudDialog = new ReadAloudOptionDialog();
        if (getResources().getBoolean(R.bool.showAudioPopUp)) {
            mReadAloudDialog.setData(bookVo,themeUserSettingVo,userID,bookId);
            mReadAloudDialog.show(getFragmentManager(), "");
        } else {
            // isReadToMeDefaultOption = true;
            GlobalDataManager.getInstance().getLocalBookData().setReadAloudType(KitabooFixedBook.ReadAloudType.READTOME);
            long currentPageLinkID = mReadAloudDialog.getCurrentPageAudioResource(currentFoliId);
            if (currentPageLinkID > 0) {
                GlobalDataManager.getInstance().setTocSelectLinkId(currentPageLinkID);
                GlobalDataManager.getInstance().setAutoPlay(true);
//                mAudioSyncIsPlaying = true;
//                mShouldReadAloudAudioPause = false;
//                mPlayButtonPaused = false;
//                addMenuItemsToActionbar();
                GlobalDataManager.getInstance().refreshAssestOnPage();
            }
            GlobalDataManager.getInstance().getLocalBookData().setPreviousReadAloudType(true);
        }*/
        if (mReadAloudDialog != null) {
            mReadAloudDialog.dismiss();
        }
        mReadAloudDialog = new ReadAloudDialog(PlayerActivity.this, PlayerActivity.this);
        mReadAloudDialog.selectIcon(currentreadAloudType);
        mReadAloudDialog.show();
        mReadAloudDialog.setCanceledOnTouchOutside(true);
        mReadAloudDialog.setCancelable(true);
    }

    /**
     * Responsible to get the data from FetchUGC request.
     *
     * @param arrayOfUGCIDs
     */

    @Override
    public void fetchUGCRequestCompleted(ArrayList<UGCFetchResponseObject> arrayOfUGCIDs) {


        for (int i = 0; i < arrayOfUGCIDs.size(); i++) {
            Log.e("highlightsugc", "" + arrayOfUGCIDs.get(i).getUGCData());
        }

        if (pageVo != null && (arrayOfUGCIDs != null && arrayOfUGCIDs.size() > 0)) {
            getUGCDataFromDataBase(currentFoliId);

            String nextFolioID = getNextFolioID(currentFoliId);
            if (nextFolioID != null && !nextFolioID.isEmpty()) {
                getUGCDataFromDataBase(nextFolioID);
            }

            String prevFolioId = getPrevFoliId(currentFoliId);
            if (prevFolioId != null && !prevFolioId.isEmpty()) {
                getUGCDataFromDataBase(prevFolioId);
            }
        }

    }

    private void getUGCDataFromDataBase(String folioID) {
        getHighlightFromDB(folioID);
        getBookmarkDataFromDB(pageVo, folioID);
        getPenFromDB(folioID);
        renderView.loadAsset(AssetType.HighlightNote, folioID);
    }

    private String getNextFolioID(String currentFoliId) {
        if (mTotalPage != null) {
            for (int i = 0; i < mTotalPage.size(); i++) {
                IPage vo = mTotalPage.get(i);
                String fname = vo.getFolioID();
                if (currentFoliId.equalsIgnoreCase(fname) && mTotalPage.size() > i + 1) {
                    IPage prevVo = mTotalPage.get(i + 1);
                    String prevFolioId = prevVo.getFolioID();
                    return null != prevFolioId ? prevFolioId : "";
                }
            }
            return "";
        }
        return "";
    }

    private int statusBarHeight(android.content.res.Resources resources) {

        final int resourceId = resources.getIdentifier("status_bar_height", "dimen", "android");
        if (Build.MODEL.equalsIgnoreCase("HD1901") || Build.MODEL.equalsIgnoreCase("Pixel 3 XL") || Build.MODEL.equalsIgnoreCase("SM-M307F") && resourceId > 0)
            notificationBarHeight = resources.getDimensionPixelSize(resourceId);
        else if (Build.MODEL.equalsIgnoreCase("HD1901") || Build.MODEL.equalsIgnoreCase("Pixel 3 XL") || Build.MODEL.equalsIgnoreCase("SM-M307F") && resourceId == 0)
            notificationBarHeight = (int) Math.ceil((Build.VERSION.SDK_INT >= 28 ? 24 : 25) * resources.getDisplayMetrics().density);

        return notificationBarHeight;
        // return (int) (26 * res.getDisplayMetrics().density);
    }

    private void statusBarHeightInLandscape() {
        if (Build.MODEL.equalsIgnoreCase("HD1901")) {
            notificationBarHeight = (int) Math.ceil(24 * getResources().getDisplayMetrics().density);
        } else if (Build.MODEL.equalsIgnoreCase("SM-M307F")) {
            notificationBarHeight = (int) Math.ceil(31 * getResources().getDisplayMetrics().density);
        } else if (Build.MODEL.equalsIgnoreCase("Pixel 3 XL")) {
            notificationBarHeight = (int) Math.ceil(50 * getResources().getDisplayMetrics().density);
        }
    }

    private String getBaseUrl(String name) {
        if (mTocdata != null && mTocdata.size() > 0) {
            for (TableOfContentVO obj : mTocdata) {
                if (obj.getTitle().equalsIgnoreCase(name)) {
                    return obj.getmBaseUrl();
                }
            }
        }
        return "";
    }

    public boolean clearAllReviewLinkData(String folioId) {
        ArrayList<LinkVO> listoflinkdata = new ArrayList<LinkVO>();
        for (int i = 0; i < GlobalDataManager.getInstance().getAssessmentPenMarks().size(); i++) {
            ArrayList<LinkVO> linkColl = GlobalDataManager.getInstance().getAssessmentPenMarks()
                    .get(i).getLinkCollection();
            if (folioId.equals(GlobalDataManager.getInstance().getAssessmentPenMarks().get(i).getFolioID())) {
                for (int k = 0; k < linkColl.size(); k++) {
                    if (linkColl.get(k).getType() == LinkVO.LinkType.ACTIVITY_INJECTION)
                        linkColl.get(k).setSyncStatus(false);
                    linkColl.get(k).setUserAnswer("");
                    linkColl.get(k).setSubmitReviewedData(true);
                    linkColl.get(k).setMode(com.hurix.commons.Constants.Constants.UGC_ITEM_MODE_DELETED);
                    listoflinkdata.add(linkColl.get(k));
                }
            }

        }
        return true;
    }

    public boolean clearAllReviewPenData(String folioId) {
        ArrayList<PentoolVO> listofpenmarks = new ArrayList<PentoolVO>();
        for (int i = 0; i < GlobalDataManager.getInstance().getAssessmentPenMarks().size(); i++) {
            ArrayList<PentoolVO> pentoolColl = GlobalDataManager.getInstance().getAssessmentPenMarks()
                    .get(i).getPenColl();
            if (folioId.equals(GlobalDataManager.getInstance().getAssessmentPenMarks().get(i).getFolioID())) {

                if (pentoolColl != null && pentoolColl.size() > 0) {
                    for (int k = 0; k < pentoolColl.size(); k++) {

                        if (pentoolColl.get(k).getPointarray().size() > 0) {
                            if (pentoolColl.get(k).getUGCID() > 0) {
                                pentoolColl.get(k).setMode(Constants.UGC_ITEM_MODE_DELETED);
                                pentoolColl.get(k).setSyncStatus(false);
                                pentoolColl.get(k).setIsSubmitted(true);
                                pentoolColl.get(k).getpentoolData();
                                pentoolColl.get(k).setDateTime(Utils.getDateTime());
                                penHelper.setDeletedPenMarkerVO(pentoolColl.get(k));
                                listofpenmarks.add(pentoolColl.get(k));
                            } else {
                                listofpenmarks.remove(pentoolColl.get(k));
                            }
                        }
                        if (k == pentoolColl.size() - 1) {
                            SDKManager.getInstance().setAllPenMarkerVO(folioId, listofpenmarks);
                            renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, folioId);
                        }

                    }
                } else {
                    SDKManager.getInstance().setAllPenMarkerVO(folioId, listofpenmarks);
                    renderView.loadAssetForReview(AssetTypeForReview.HighlightNote, folioId);
                }

            }
        }
        return true;
    }

    private void startThread() {

        Log.e("thread called", "thread called");

        schedularHandler = new Handler();
        schedularRunnable = new Runnable() {

            @Override
            public void run() {
                if (mReaderType == EBookType.REFLOWEPUB) {

                    lastPageFolio = new JSONObject();
                    if (mCFIDArrayList != null && mCFIDArrayList.size() > 0) {
                        try {
                            lastPageFolio.put("chapterid", SDKManager.getInstance().getChapterID());
                            lastPageFolio.put("positionIdentifier", SDKManager.getInstance().getCFIBookMarkPath());
                            lastPageFolio.put("page", SDKManager.getInstance().getmBookMarkPath());
                            lastPageFolio.put("pageCFI", mCFIDArrayList.get(mCFIDArrayList.size() - 1));
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }

                    String analyticdata = AnalyticsManager.getInstance(PlayerActivity.this).getTrack();
                    DatabaseManager.getInstance(PlayerActivity.this).saveAnalyticsData(bookId, userID, analyticdata);
                    if (lastPageFolio != null) {
                        kitabooanalytic = new KitabooAnalytics().getKitabooAnalytics(analyticdata, mClassId,
                                lastPageFolio.toString(), PlayerActivity.this);
                    }
                }
                //Log.d("Royalty_Checking_10MinutesDataSending", kitabooanalytic);
                if (Utils.isOnline(PlayerActivity.this)) {
                    mServicehandler.sendServicesOnScheduler(bookId, userID, accountType, bookVersion,
                            kitabooanalytic, PlayerActivity.this);
                    startThread();
                }

            }
        };
        stopHandler();
        startHandler();
    }

    public void startHandler() {
        schedularHandler.postDelayed(schedularRunnable, 10 * 60 * 1000); //for 10 min
    }

    public void stopHandler() {
        if (schedularHandler != null && schedularRunnable != null) {
            schedularHandler.removeCallbacks(schedularRunnable);
        }

    }


    private void disableReadAIcon() {

        if (mthumbnailIcon != null) {
            mthumbnailIcon.setAlpha(0.5f);
            mthumbnailIcon.setEnabled(false);
        }
    }

    private void toggleAudioSyncButton(KitabooActionItemView view) {

        if (view != null) {

            view.setAlpha(1f);

            view.postDelayed(() -> {

                view.setEnabled(true);
                if (mthumbnailIcon != null && !mthumbnailIcon.isEnabled())
                    mthumbnailIcon.setEnabled(true);

            }, 1000);

        }

    }

    public void setEpubPagecountVisibility(boolean isPageCountVisible) {

        renderView.setEpubPagecountVisibility(isPageCountVisible);
    }

}

